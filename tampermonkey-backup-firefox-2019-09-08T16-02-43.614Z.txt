{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Skrypt umożliwiający pobieranie materiałów ze znanych serwisów VOD.","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*www.ipla.tv/*","*getmedia.redefine.pl/*","*player.pl/*","*vod.pl/*","*qi.ckm.onetapi.pl/*","*tvp.pl/*","*www.cda.pl/*"],"merge_includes":true,"use_matches":[],"orig_matches":["http://www.ipla.tv/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1540408179454,"data":{}},"enabled":true,"position":1,"uuid":"38f03da0-ec99-4c18-bb14-6db622aec819","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTa3J5cHQgdW1vxbxsaXdpYWrEhWN5IHBvYmllcmFuaWUgbWF0ZXJpYcWCw7N3IHplIHpuYW55Y2ggc2Vyd2lzw7N3IFZPRC4KLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vd3d3LmlwbGEudHYvCi8vIEBpbmNsdWRlICAgICAgKnd3dy5pcGxhLnR2LyoKLy8gQGluY2x1ZGUgICAgICAqZ2V0bWVkaWEucmVkZWZpbmUucGwvKgovLyBAaW5jbHVkZSAgICAgICpwbGF5ZXIucGwvKgovLyBAaW5jbHVkZSAgICAgICp2b2QucGwvKgovLyBAaW5jbHVkZSAgICAgICpxaS5ja20ub25ldGFwaS5wbC8qCi8vIEBpbmNsdWRlICAgICAgKnR2cC5wbC8qCi8vIEBpbmNsdWRlICAgICAgKnd3dy5jZGEucGwvKgovLyBAdmVyc2lvbiAgICAgIDQuOQovLyBAZGVzY3JpcHRpb24gIFNrcnlwdCB1bW/FvGxpd2lhasSFY3kgcG9iaWVyYW5pZSBtYXRlcmlhxYLDs3cgeiBzZXJ3aXPDs3c6IGlwbGEudHYsIHBsYXllci5wbCwgdm9kLnBsLCB2b2QudHZwLnBsLCBjZGEucGwuIER6aWHFgmEgdHlsa28geiByb3pzemVyemVuaWVtIFRhbXBlcm1vbmtleS4KLy8gQGF1dGhvciAgICAgICBQcnplbWVrCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3d3dy5pcGxhLnR2LyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovL1dhxbxuZToKLy9Ta3J5cHQgb3BpZXJhIHNpxJkgbmEgc2tyeXB0YWNoIHVtaWVzemN6b255Y2ggbmEgc3Ryb25pZTogbWluaXNrcnlwdC5ibG9nc3BvdC5jb20KLy9vcmF6OiBtaW5pc2tyeXB0Lmh1YmFpaXR2LnBsLiBNb2plIHJvenN6ZXJ6ZW5pZSB0eWxrbyBpIHd5xYLEhWN6bmllIGRvZGFqZSB3eWdvZG5lCi8vdyB1xbx5Y2l1IHByenljaXNraSwgamVkbmFrIG5pZSBqZXN0ZW0gYXV0b3JlbSB3acSZa3N6b8WbY2kga29kdS4KLy9Ta3J5cHQgamVzdCBuaWVwdWJsaWN6bnksIGEgZG9zdMSZcCBkbyBuaWVnbyBtYWrEhSB0eWxrbyBpIHd5xYLEhWN6bmllIG9zb2J5IHogbGlua2llbS4KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gS09ORklHVVJBQ0pBIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwp2YXIgV2xhY3pfc2tyeXB0ID0gdHJ1ZTsgLy8gdHJ1ZSA9IHNrcnlwdCB3xYLEhWN6b255LCBmYWxzZSA9IHNrcnlwdCB3ecWCxIVjem9ueS4KLy8vLy8vLy8vLy8vLy8vLy8vLy8gS09OSUVDIEtPTkZJR1VSQUNKSSAvLy8vLy8vLy8vLy8vLy8vLy8vLwoKdmFyIFNrcnlwdEtvcGl1alRleHQgPSAiZnVuY3Rpb24gY29weVRleHQoZSl7ZnVuY3Rpb24gdChlKXtpZihkb2N1bWVudC5zZWxlY3Rpb24pe3ZhciB0PWRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7dC5tb3ZlVG9FbGVtZW50VGV4dChlKSx0LnNlbGVjdCgpfWVsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTt0LnNlbGVjdE5vZGUoZSksd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpLHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hZGRSYW5nZSh0KX19dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtuLnRleHRDb250ZW50PWUsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuKSx0KG4pLGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKSxuLnJlbW92ZSgpfSAiOwp2YXIgU3R5bGVUZXh0ID0gIjxzdHlsZT5ib2R5e2ZvbnQtZmFtaWx5OiBcIlNlZ29lIFVJXCI7fS5jbGlja2Vke2JhY2tncm91bmQtY29sb3I6ICM3Q0ZDMDA7fTwvc3R5bGU+IjsKCmZ1bmN0aW9uIGFkZEV2ZW50KG9iaiwgZXZlbnQsIGZ1bmMpIHsKICAgIGlmIChvYmouYWRkRXZlbnRMaXN0ZW5lcikgewogICAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jLCBmYWxzZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgaWYgKG9iai5hdHRhY2hFdmVudCkgewogICAgICAgIG9iai5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGZ1bmMpOwogICAgfSBlbHNlIHsKICAgICAgICB2YXIgZiA9IG9ialsnb24nICsgZXZlbnRdOwogICAgICAgIG9ialsnb24nICsgZXZlbnRdID0gdHlwZW9mIGYgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGYoKTsKICAgICAgICAgICAgZnVuYygpOwogICAgICAgIH0KICAgICAgICA6IGZ1bmM7CiAgICB9Cn0KCmZ1bmN0aW9uIFNob3dQcm9tcHRXaXRoSW5mbyhsb2wsIGluZm8gPSBudWxsKSB7CiAgICB2YXIgaW5mb3RleHQgPSAnQWJ5IHNrb3Bpb3dhxIcgbGluaywgd2NpxZtuaWo6IENUUkwrQywgcG90ZW06IEVOVEVSIGFieSByb3pwb2N6xIXEhyBwb2JpZXJhbmllLCBsdWIgRVNDIGFieSB6YWtvxYRjennEhyBkemlhxYJhbmllIHNrcnlwdHUnOwogICAgaWYoaW5mbyAhPT0gbnVsbCl7CiAgICAgICAgaW5mb3RleHQgPSBpbmZvdGV4dCArICIuICIgKyBpbmZvOwogICAgfQogICAgaWYgKHdpbmRvdy5wcm9tcHQoaW5mb3RleHQsIGxvbCkpIHsKICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gbG9sOwogICAgfQp9CgpmdW5jdGlvbiBTaG93UHJvbXB0KGxvbCkgewogICAgd2luZG93LnByb21wdCgnQWJ5IHNrb3Bpb3dhxIcgbGluaywgd2NpxZtuaWo6IENUUkwrQywgcG90ZW06IEVOVEVSJywgbG9sKTsKfQoKZnVuY3Rpb24gbWFrZWlkKCkKewogICAgdmFyIHRleHQgPSAnJzsKICAgIHZhciBwb3NzaWJsZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykKICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTsKICAgIHJldHVybiB0ZXh0Owp9Cgp2YXIgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSAnJzsKZnVuY3Rpb24gZmlyZU5ld1RhYigpIHsKICAgIGZ1bmN0aW9uIG1ha2VpZDIoKSB7CiAgICAgICAgdmFyIHRleHQgPSAnJzsKICAgICAgICB2YXIgcG9zc2libGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKQogICAgICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTsKICAgICAgICByZXR1cm4gdGV4dDsKICAgIH0KICAgIHZhciByYW5kb21UZXh0ID0gbWFrZWlkMigpOwogICAgdmFyIG5ld1RhYiA9IHdpbmRvdy5vcGVuKCdhYm91dDpibGFuaycsICdNc2dXaW5kb3ctJyArIHJhbmRvbVRleHQpOwogICAgbmV3VGFiLmRvY3VtZW50LndyaXRlKCJEb2N1bWVudFdyaXRlRmlyZWZveEZpeCIpOwogICAgbmV3VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy9hbGVydCgnaGkyJyk7CiAgICAgICAgdmFyIGRlc3REb2MgPSBuZXdUYWIuZG9jdW1lbnQ7CiAgICAgICAgZGVzdERvYy5vcGVuKCk7CiAgICAgICAgZGVzdERvYy53cml0ZSgiRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXgiKTsKICAgICAgICBkZXN0RG9jLmNsb3NlKCk7CiAgICB9LCBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICApOwp9CmZ1bmN0aW9uIGFkZHNsYXNoZXMoIHN0ciApIHsKICAgIHJldHVybiAoc3RyICsgJycpLnJlcGxhY2UoL1tcXCInXS9nLCAnXFwkJicpLnJlcGxhY2UoL1x1MDAwMC9nLCAnXFwwJyk7Cn0KCmZ1bmN0aW9uIGFkZEpTX05vZGUodGV4dCwgc19VUkwsIGZ1bmNUb1J1biwgcnVuT25Mb2FkKSB7CiAgICB2YXIgRCA9IGRvY3VtZW50OwogICAgdmFyIHNjcmlwdE5vZGUgPSBELmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgaWYgKHJ1bk9uTG9hZCkgewogICAgICAgIHNjcmlwdE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHJ1bk9uTG9hZCwgZmFsc2UpOwogICAgfQogICAgc2NyaXB0Tm9kZS50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICBpZiAodGV4dCkgc2NyaXB0Tm9kZS50ZXh0Q29udGVudCA9IHRleHQ7CiAgICBpZiAoc19VUkwpIHNjcmlwdE5vZGUuc3JjID0gc19VUkw7CiAgICB2YXIgc3RyID0gZnVuY1RvUnVuLnRvU3RyaW5nKCk7CiAgICB2YXIgdGVzID0gYWRkc2xhc2hlcyhEb2N1bWVudFdyaXRlRmlyZWZveEZpeCk7CiAgICB2YXIgcmVzID0gc3RyLnJlcGxhY2UoIkRvY3VtZW50V3JpdGVGaXJlZm94Rml4IiwgdGVzKTsKICAgIHJlcyA9IHJlcy5yZXBsYWNlKCJEb2N1bWVudFdyaXRlRmlyZWZveEZpeCIsIHRlcyk7CiAgICBpZiAoZnVuY1RvUnVuKSBzY3JpcHROb2RlLnRleHRDb250ZW50ID0gJygnICsgcmVzICsgJykoKSc7CgogICAgdmFyIHRhcmcgPSBELmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJykgWzBdIHx8IEQuYm9keSB8fCBELmRvY3VtZW50RWxlbWVudDsKICAgIHRhcmcuYXBwZW5kQ2hpbGQoc2NyaXB0Tm9kZSk7Cn0KCmZ1bmN0aW9uIFBva2F6TGlua1RWTk5vd3koKSB7CiAgICB0cnkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjZGV0YWlsRXBpc29kZSIpLmdldEF0dHJpYnV0ZSgiZGF0YS1hcnRpY2xlLWlkIik7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICB2YXIgcGFnZVVSTCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgICAgICB2YXIgbGFzdENvbW1hID0gcGFnZVVSTC5sYXN0SW5kZXhPZigiLCIpOwogICAgICAgICAgICBpZiAobGFzdENvbW1hID4gLSAxKSB7CiAgICAgICAgICAgICAgICBuID0gcGFnZVVSTC5zdWJzdHJpbmcobGFzdENvbW1hKzEpOwogICAgICAgICAgICAgICAgbiA9IHBhcnNlSW50KG4pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICB4bWxodHRwLm9wZW4oIkdFVCIsICIvYXBpLz9wbGF0Zm9ybT1Db25uZWN0ZWRUViZ0ZXJtaW5hbD1QYW5hc29uaWMmZm9ybWF0PWpzb24mYXV0aEtleT0wNjRmZGE1YWIyNmRjMWRkOTM2ZjVjNmU4NGI3ZDNjMiZ2PTMuMSZtPWdldEl0ZW0maWQ9IiArIG4sIGZhbHNlKTsKICAgICAgICB4bWxodHRwLnNlbmQoKTsKICAgICAgICBvID0gSlNPTi5wYXJzZSh4bWxodHRwLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgbHQgPSBvLml0ZW0udmlkZW9zLm1haW4udmlkZW9fY29udGVudF9saWNlbnNlX3R5cGU7CiAgICAgICAgZGQgPSBvLml0ZW0udmlkZW9zLm1haW4udmlkZW9fY29udGVudDsKICAgICAgICB0aXRsZSA9IG8uaXRlbS5zZXJpZV90aXRsZSArICIgLSBTIiArIG8uaXRlbS5zZWFzb24gKyAiRSIgKyBvLml0ZW0uZXBpc29kZTsKICAgICAgICBpZiAobHQgIT09IG51bGwpIHsKICAgICAgICAgICAgYWxlcnQoJ0RSTSBsdWIgYnJhayBtYXRlcmlhxYJ1IFRWIDooJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSAiIjsKICAgICAgICB2YXIgcmFuZG9tVGV4dCA9IG1ha2VpZCgpOwogICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyAnPHA+VHl0dcWCOiAnICsgdGl0bGUgKyAnPC9wPic7CiAgICAgICAgdmFyIEhpZ2hlc3RSZXNvbHV0aW9uID0gMDsKICAgICAgICB2YXIgSGlnaGVzdFJlc29sdXRpb25MaW5rID0gJyc7CiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbiA9IGRkLmxlbmd0aDsgaiA8IGxlbjsgaiA9IGogKyAxKSB7CiAgICAgICAgICAgIEhpZ2hlc3RSZXNvbHV0aW9uID0gSGlnaGVzdFJlc29sdXRpb24gKyAxOwogICAgICAgICAgICBkbHVybCA9IGRkW2pdLnVybDsKICAgICAgICAgICAgaWYoaiA8IDIpewogICAgICAgICAgICAgICAgSGlnaGVzdFJlc29sdXRpb25MaW5rID0gZGx1cmw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG4gPSBkZFtqXS5wcm9maWxlX25hbWU7CiAgICAgICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyAiPHA+SmFrb8WbxIcgbWF0ZXJpYcWCdTogIiArIHBuICsgIjxicj4iOwogICAgICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgIkxpbmsgZG8gbWF0ZXJpYcWCdTogPGJ1dHRvbiBpZD1cImJ1dHRvbi0iICsgaiArICJcIiB0eXBlPVwiYnV0dG9uXCI+S29waXVqPC9idXR0b24+PGJyPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIiICsgZGx1cmwgKyAiXCI+IiArIGRsdXJsICsgIjwvYT48L3A+IjsKICAgICAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICI8c2NyaXB0PnZhciBidXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uLSIraisiJyk7YnV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtjb3B5VGV4dChcIiIrIGRsdXJsICsiXCIpO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b24tIitqKyInKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNsaWNrZWRcIik7fSk8L3NjcmlwdD4iOwogICAgICAgIH0KICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgU3R5bGVUZXh0ICsgJzxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+ZnVuY3Rpb24gU2hvd1Byb21wdFdpdGhJbmZvKGxvbCl7aWYgKHdpbmRvdy5wcm9tcHQoIkFieSBza29waW93YcSHIGxpbmssIHdjacWbbmlqOiBDVFJMK0MsIHBvdGVtOiBFTlRFUiBhYnkgcm96cG9jesSFxIcgcG9iaWVyYW5pZSwgbHViIEVTQyBhYnkgemFrb8WEY3p5xIcgZHppYcWCYW5pZSBza3J5cHR1IiwgbG9sKSl7ZG9jdW1lbnQubG9jYXRpb24uaHJlZj1sb2w7fX1zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtTaG93UHJvbXB0V2l0aEluZm8oIicgKyBIaWdoZXN0UmVzb2x1dGlvbkxpbmsgKyAnIik7fSwgMTAwMCk7JyArIFNrcnlwdEtvcGl1alRleHQgKyAnPC9zY3JpcHQ+JzsKICAgICAgICBhZGRKU19Ob2RlKG51bGwsIG51bGwsIGZpcmVOZXdUYWIpOwoKICAgIH0gY2F0Y2ggKGUpIHt9Cn0KCmZ1bmN0aW9uIFBva2F6TGlua1BvYmllcmFuaWVJcGxhKCkgewogICAgLy9hbGVydCgnaXBsYScpOwogICAgbm4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdwcmUnKS50ZXh0Q29udGVudDsKICAgIHYgPSBKU09OLnBhcnNlKG5uKTsKICAgIGlmICh2LnZvZC5kcm0gPT0gdHJ1ZSkgewogICAgICAgIGFsZXJ0KCdOaWVzdGV0eSwgYWxlIG1hdGVyaWHFgiBqZXN0IHphYmV6cGllY3pvbnkgRFJNIGkgcHJhd2RvcG9kb2JuaWUgbmllIGLEmWR6aWUgbW/FvG5hIGdvIHBvYnJhxIcgOignKTsKICAgIH0KICAgIHZhciBRdWFsaXR5QXJyYXkgPSBbXTsKICAgIHZhciBjb3BpZXMgPSB2LnZvZC5jb3BpZXM7CiAgICBpZihjb3BpZXMgIT09IG51bGwpewogICAgICAgIGlmKGNvcGllcy5sZW5ndGggPiAwKXsKICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjb3BpZXMpIHsKICAgICAgICAgICAgICAgIHZhciBjb3B5ID0gY29waWVzW3Byb3BdOwogICAgICAgICAgICAgICAgdmFyIG5ld0FycmF5ID0gW2NvcHkucXVhbGl0eV9wLCBjb3B5LnVybF07CiAgICAgICAgICAgICAgICBRdWFsaXR5QXJyYXkucHVzaChuZXdBcnJheSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoUXVhbGl0eUFycmF5ICE9PSBudWxsKXsKICAgICAgICAgICAgICAgIHZhciBjb3VudEFycmF5ID0gUXVhbGl0eUFycmF5Lmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmKGNvdW50QXJyYXkgPiAwKXsKICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRBcnJheUVsZW1lbnQgPSBjb3VudEFycmF5IC0gMTsKICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdFF1YWxpdHkgPSBRdWFsaXR5QXJyYXlbY291bnRBcnJheUVsZW1lbnRdWzBdOwogICAgICAgICAgICAgICAgICAgIHZhciBiZXN0UXVhbGl0eUxpbmsgPSBRdWFsaXR5QXJyYXlbY291bnRBcnJheUVsZW1lbnRdWzFdOwogICAgICAgICAgICAgICAgICAgIFNob3dQcm9tcHRXaXRoSW5mbyhiZXN0UXVhbGl0eUxpbmssIlxuV3licmFuYSBqYWtvxZvEhyBtYXRlcmlhxYJ1IHRvOiAiICsgYmVzdFF1YWxpdHkgKyAiLiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBQb2thekxpbmtJcGxhKCkgewogICAgaWYgKGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwW3NdPzpcL1wvd3d3XC5pcGxhXC50dlwvLykpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIgbWlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ZvZC1wbGF5ZXInKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdm9kLWpzb24nKTsKICAgICAgICAgICAgdmFyIGlkbiA9IEpTT04ucGFyc2UobWlkKS5taWQ7CiAgICAgICAgICAgIC8vdG9wLmxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly9nZXRtZWRpYS5yZWRlZmluZS5wbC92b2RzL2dldF92b2QvP2NwaWQ9MSZ1YT1taXBsYV9pb3MvMTIyJm1lZGlhX2lkPScgKyBpZG47CiAgICAgICAgICAgIHRvcC5sb2NhdGlvbi5ocmVmID0gJ2h0dHBzOi8vZ2V0bWVkaWEucmVkZWZpbmUucGwvdm9kcy9nZXRfdm9kLz9jcGlkPTEmdWE9d3d3X2lwbGF0dl9odG1sNS8xMjM0NSZtZWRpYV9pZD0nICsgaWRuOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciB4ID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgIGlkbiA9IHgubWF0Y2goL1tcYS16XGRdezMyfS8pWzBdOwogICAgICAgICAgICAvL3RvcC5sb2NhdGlvbi5ocmVmID0gJ2h0dHBzOi8vZ2V0bWVkaWEucmVkZWZpbmUucGwvdm9kcy9nZXRfdm9kLz9jcGlkPTEmdWE9bWlwbGFfaW9zLzEyMiZtZWRpYV9pZD0nICsgaWRuOwogICAgICAgICAgICB0b3AubG9jYXRpb24uaHJlZiA9ICdodHRwczovL2dldG1lZGlhLnJlZGVmaW5lLnBsL3ZvZHMvZ2V0X3ZvZC8/Y3BpZD0xJnVhPXd3d19pcGxhdHZfaHRtbDUvMTIzNDUmbWVkaWFfaWQ9JyArIGlkbjsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgdmFyIHBhZ2VVUkwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgiPyIpWzBdOwogICAgICAgICAgICAgICAgdmFyIHBhZ2VVUkxUZW1wID0gcGFnZVVSTC5zdWJzdHJpbmcoMCwgcGFnZVVSTC5sZW5ndGggLSAzKTsKICAgICAgICAgICAgICAgIHZhciBsYXN0Q29tbWEgPSBwYWdlVVJMVGVtcC5sYXN0SW5kZXhPZigiLyIpOwogICAgICAgICAgICAgICAgaWYgKGxhc3RDb21tYSA+IC0gMSkgewogICAgICAgICAgICAgICAgdmFyIG4gPSBwYWdlVVJMLnN1YnN0cmluZyhsYXN0Q29tbWErMSk7CiAgICAgICAgICAgICAgICAgICAgbWlkID0gbjsKICAgICAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSAnaHR0cDovL2dldG1lZGlhLnJlZGVmaW5lLnBsL3ZvZHMvZ2V0X3ZvZC8/Y3BpZD0xJnVhPW1pcGxhX2lvcy8xMjImbWVkaWFfaWQ9JyArIG1pZDsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gJ2h0dHA6Ly9nZXRtZWRpYS5yZWRlZmluZS5wbC92b2RzL2dldF92b2QvP2NwaWQ9MSZ1YT13d3dfaXBsYXR2X2h0bWw1LzEyMzQ1Jm1lZGlhX2lkPScgKyBtaWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KZnVuY3Rpb24gUG9rYXpMaW5rT25ldCgpIHsKdHJ5ewogICAgICAgCWkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIubXZwIikuZ2V0QXR0cmlidXRlKCdpZCcpOwoJCW0gPSBpLm1hdGNoKC9tdnA6KC4rKS8pWzFdOwoJCWkgPSBkb2N1bWVudC5ib2R5LmlubmVySFRNTDsKCQl0aXRsZSA9IGkubWF0Y2goL3RpdGxlOiBcJyguKilcJywvKVsxXTsKCQl1cmwgPSAiYUhSMGNITTZMeTl3YkdGNVpYSXRZWEJwTG1SeVpXRnRiR0ZpTG5Cc0x6OWliMlI1VzJsa1hUMHJiU3NtWW05a2VWdHFjMjl1Y25CalhUMHlMakFtWW05a2VWdHRaWFJvYjJSZFBXZGxkRjloYzNObGRGOWtaWFJoYVd3bVltOWtlVnR3WVhKaGJYTmRXMGxFWDFCMVlteHBhMkZqYW1sZFBTdHRLeVppYjJSNVczQmhjbUZ0YzExYlUyVnlkbWxqWlYwOWRtOWtMbTl1WlhRdWNHd21ZMjl1ZEdWdWRDMTBlWEJsUFdGd2NHeHBZMkYwYVc5dUwycHpiMjV3Sm5ndGIyNWxkQzFoY0hBOWNHeGhlV1Z5TG1aeWIyNTBMbTl1WlhSaGNHa3VjR3dtWTJGc2JHSmhZMnM5IjsKCQl1cmwgPSAoYXRvYih1cmwpKS5yZXBsYWNlKC9cK21cKy9nLCBtKTsKCQl4aHIgPSBuZXcgICBYTUxIdHRwUmVxdWVzdCgpOwoJCXhoci5vcGVuKCdHRVQnLCB1cmwsIGZhbHNlKTsKCQl4aHIuc2VuZChudWxsKTsKCQl2ID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTsKCQl2YyA9IHYucmVzdWx0WzBdLmZvcm1hdHMud2lkZW9bIm1wNC11aGQiXTsKCQlpZiAoIXZjKSB7CgkJCWFsZXJ0KCdOaWVzdGV0eSwgYWxlIG1hdGVyaWHFgiBqZXN0IHphYmV6cGllY3pvbnkgRFJNIGkgbmllIGLEmWR6aWUgbW/FvG5hIGdvIHBvYnJhxIcgOignKTsKCQkJcmV0dXJuOwoJCX07CgkJdGl0bGUgPSB2LnJlc3VsdFswXS5tZXRhLnRpdGxlOwoJCWZvciAodmFyICAgaSA9IC0xLCBjYyA9IFtdLCBkZCA9IFtdLCBsID0gdmMubGVuZ3RoID4+PiAwOyArK2kgIT09IGw7IG51bGwpIHsKCQkJZGRbaV0gPSBjY1tpXSA9IHZjW2ldLnZpZGVvX2JpdHJhdGU7CgkJfTsKCQlkZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CgkJCXJldHVybiAgIGIgLSBhOwoJCX0pOwoJCS8vcGFnZWNyZWF0ZSh0aXRsZSk7CgkJRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSAiIjsKICAgICAgICB2YXIgcmFuZG9tVGV4dCA9IG1ha2VpZCgpOwogICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyAnPHA+VHl0dcWCOiAnICsgdGl0bGUgKyAnPC9wPic7CiAgICAgICAgdmFyIEhpZ2hlc3RSZXNvbHV0aW9uID0gMDsKICAgICAgICB2YXIgSGlnaGVzdFJlc29sdXRpb25MaW5rID0gJyc7CiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbiA9IGRkLmxlbmd0aDsgaiA8IGxlbjsgaiA9IGogKyAxKSB7CiAgICAgICAgICAgIGRsdXJsID0gdmNbY2MuaW5kZXhPZihkZFtqXSldLnVybDsKICAgICAgICAgICAgYml0cmF0ZSA9IHZjW2NjLmluZGV4T2YoZGRbal0pXS52aWRlb19iaXRyYXRlOwogICAgICAgICAgICB2ZXJ0aWNhbF9yZXNvbHV0aW9uID0gdmNbY2MuaW5kZXhPZihkZFtqXSldLnZlcnRpY2FsX3Jlc29sdXRpb247CiAgICAgICAgICAgIC8qY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU5vZGUoInByZSIsIHt9LCB7CiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogIkJpdHJhdGU6ICIgKyBiaXRyYXRlICsgIiAtIFJvemR6aWVsY3pvxZvEhyBwaW9ub3dhOiAiICsgdmVydGljYWxfcmVzb2x1dGlvbgogICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIHcgPSAnd2dldCAtLXJlc3RyaWN0LWZpbGUtbmFtZXM9d2luZG93cyAtLXByb2dyZXNzPWJhciAtLWhlYWRlcj0iVXNlci1BZ2VudDpBQkMiIC1jIC1PICInICsgdGl0bGUgKyAnLm1wNCIgJyArIGRsdXJsOwogICAgICAgICAgICBidXR0b25jcmVhdGUoZGx1cmwsIHRpdGxlLCB3KTsqLwogICAgICAgICAgICBpZiAodmVydGljYWxfcmVzb2x1dGlvbiA+IEhpZ2hlc3RSZXNvbHV0aW9uKSB7CiAgICAgICAgICAgICAgICBIaWdoZXN0UmVzb2x1dGlvbiA9IHZlcnRpY2FsX3Jlc29sdXRpb247CiAgICAgICAgICAgICAgICBIaWdoZXN0UmVzb2x1dGlvbkxpbmsgPSBkbHVybDsKICAgICAgICAgICAgfQogICAgICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgJzxwPkJpdHJhdGU6ICcgKyBiaXRyYXRlICsgJyAtIFJvemR6aWVsY3pvxZvEhyBwaW9ub3dhOiAnICsgdmVydGljYWxfcmVzb2x1dGlvbiArICc8YnI+JzsKICAgICAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICJMaW5rIGRvIG1hdGVyaWHFgnU6IDxidXR0b24gaWQ9XCJidXR0b24tIiArIGogKyAiXCIgdHlwZT1cImJ1dHRvblwiPktvcGl1ajwvYnV0dG9uPjxicj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiIiArIGRsdXJsICsgIlwiPiIgKyBkbHVybCArICI8L2E+PC9wPiI7CiAgICAgICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyAiPHNjcmlwdD52YXIgYnV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1dHRvbi0iK2orIicpO2J1dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7Y29weVRleHQoXCIiKyBkbHVybCArIlwiKTtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uLSIraisiJykuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjbGlja2VkXCIpO30pPC9zY3JpcHQ+IjsKICAgICAgICB9CiAgICAgICAgaWYgKEhpZ2hlc3RSZXNvbHV0aW9uID4gMCkgewogICAgICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgU3R5bGVUZXh0ICsgJzxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+ZnVuY3Rpb24gU2hvd1Byb21wdFdpdGhJbmZvKGxvbCl7aWYgKHdpbmRvdy5wcm9tcHQoIkFieSBza29waW93YcSHIGxpbmssIHdjacWbbmlqOiBDVFJMK0MsIHBvdGVtOiBFTlRFUiBhYnkgcm96cG9jesSFxIcgcG9iaWVyYW5pZSwgbHViIEVTQyBhYnkgemFrb8WEY3p5xIcgZHppYcWCYW5pZSBza3J5cHR1IiwgbG9sKSl7ZG9jdW1lbnQubG9jYXRpb24uaHJlZj1sb2w7fX1zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtTaG93UHJvbXB0V2l0aEluZm8oIicgKyBIaWdoZXN0UmVzb2x1dGlvbkxpbmsgKyAnIik7fSwgMTAwMCk7JyArIFNrcnlwdEtvcGl1alRleHQgKyAnPC9zY3JpcHQ+JzsKICAgICAgICAgICAgYWRkSlNfTm9kZShudWxsLCBudWxsLCBmaXJlTmV3VGFiKTsKICAgICAgICB9CiAgICB9CiAgICBjYXRjaCAoZSl7CiAgICAgICAgaWYgKGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwW3NdPzpcL1wvdm9kXC5wbFwvLykgfHwgbG9jYXRpb24uaHJlZi5tYXRjaCgvXmh0dHBbc10/OlwvXC9iYWpraVwub25ldFwucGxcLy8pKSB7CiAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuYm9keS5pbm5lckhUTUw7CiAgICAgICAgICAgIG0gPSBpLm1hdGNoKC9tdnA6KFtcZFwuXSspXHgyMi8pOwogICAgICAgICAgICB2YXIgdXJsID0gImh0dHA6Ly9xaS5ja20ub25ldGFwaS5wbC8/Ym9keVtpZF09MjJENEIzQkMwMTRBM0MyMDBCQ0ExNENERkYzQUMwMTgmYm9keVtqc29ucnBjXT0yLjAmYm9keVttZXRob2RdPWdldF9hc3NldF9kZXRhaWwmYm9keVtwYXJhbXNdW0lEX1B1Ymxpa2FjamldPSIgKyBtWzFdICsgIiZib2R5W3BhcmFtc11bU2VydmljZV09dm9kLm9uZXQucGwmY29udGVudC10eXBlPWFwcGxpY2F0aW9uL2pzb25wJngtb25ldC1hcHA9cGxheWVyLmZyb250Lm9uZXRhcGkucGwmXz0xNDg3NTM2OTk2MzMzIjsKICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHVybDsKICAgICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwPzpcL1wvcWlcLmNrbS5cb25ldGFwaVwucGxcLy8pKSB7CiAgICAgICAgICAgIG5uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigicHJlIikudGV4dENvbnRlbnQ7CiAgICAgICAgICAgIHYgPSBKU09OLnBhcnNlKG5uKTsKICAgICAgICAgICAgdmMgPSB2LnJlc3VsdFswXS5mb3JtYXRzLndpZGVvLm1wNDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IC0xLCBjYyA9IFtdLCBkZCA9IFtdLCBsID0gdmMubGVuZ3RoID4+PiAwOyArK2kgIT09IGw7IG51bGwpIHsKICAgICAgICAgICAgICAgIGRkW2ldID0gY2NbaV0gPSB2Y1tpXS52aWRlb19iaXRyYXRlOwogICAgICAgICAgICB9OwogICAgICAgICAgICBkZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBsZW4gPSBkZC5sZW5ndGg7IGogPCBsZW47IGogPSBqICsgMSkgewogICAgICAgICAgICAgICAgdmFyIGRsdXJsID0gdmNbY2MuaW5kZXhPZihkZFtqXSldLnVybDsKICAgICAgICAgICAgICAgIGlmIChkbHVybCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBkbHVybDsKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIFBva2F6TGlua09uZXRPbGQoKSB7CiAgICB0cnl7CiAgICAgICAgaSA9IGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MOwogICAgICAgIG0gPSBpLm1hdGNoKC9tdnA6KFtcZF17N31cLltcZF17MSwxMH0pLylbMV07CiAgICAgICAgdGl0bGUgPSBpLm1hdGNoKC90aXRsZTogXCcoLiopXCcsLylbMV07CiAgICAgICAgdXJsID0gImFIUjBjSE02THk5d2JHRjVaWEl0WVhCcExtUnlaV0Z0YkdGaUxuQnNMejlpYjJSNVcybGtYVDByYlNzbVltOWtlVnRxYzI5dWNuQmpYVDB5TGpBbVltOWtlVnR0WlhSb2IyUmRQV2RsZEY5aGMzTmxkRjlrWlhSaGFXd21ZbTlrZVZ0d1lYSmhiWE5kVzBsRVgxQjFZbXhwYTJGamFtbGRQU3R0S3laaWIyUjVXM0JoY21GdGMxMWJVMlZ5ZG1salpWMDlkbTlrTG05dVpYUXVjR3dtWTI5dWRHVnVkQzEwZVhCbFBXRndjR3hwWTJGMGFXOXVMMnB6YjI1d0puZ3RiMjVsZEMxaGNIQTljR3hoZVdWeUxtWnliMjUwTG05dVpYUmhjR2t1Y0d3bVkyRnNiR0poWTJzOSI7CiAgICAgICAgdXJsID0gKGF0b2IodXJsKSkucmVwbGFjZSgvXCttXCsvZywgbSk7CiAgICAgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgZmFsc2UpOwogICAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICAgIHYgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpOwogICAgICAgIHZjID0gdi5yZXN1bHRbMF0uZm9ybWF0cy53aWRlby5tcDQ7CiAgICAgICAgaWYgKCF2YykgewogICAgICAgICAgICBhbGVydCgnTmllc3RldHksIGFsZSBtYXRlcmlhxYIgamVzdCB6YWJlenBpZWN6b255IERSTSBpIG5pZSBixJlkemllIG1vxbxuYSBnbyBwb2JyYcSHIDooJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGl0bGUgPSB2LnJlc3VsdFswXS5tZXRhLnRpdGxlOwogICAgICAgIGZvciAodmFyIGkgPSAtMSwgY2MgPSBbXSwgZGQgPSBbXSwgbCA9IHZjLmxlbmd0aCA+Pj4gMDsgKytpICE9PSBsOyBudWxsKSB7CiAgICAgICAgICAgIGRkW2ldID0gY2NbaV0gPSB2Y1tpXS52aWRlb19iaXRyYXRlOwogICAgICAgIH0KICAgICAgICBkZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgcmV0dXJuIGIgLSBhOwogICAgICAgIH0pOwogICAgICAgIC8vcGFnZWNyZWF0ZSh0aXRsZSk7CgogICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gIiI7CiAgICAgICAgdmFyIHJhbmRvbVRleHQgPSBtYWtlaWQoKTsKICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgJzxwPlR5dHXFgjogJyArIHRpdGxlICsgJzwvcD4nOwogICAgICAgIHZhciBIaWdoZXN0UmVzb2x1dGlvbiA9IDA7CiAgICAgICAgdmFyIEhpZ2hlc3RSZXNvbHV0aW9uTGluayA9ICcnOwogICAgICAgIGZvciAodmFyIGogPSAwLCBsZW4gPSBkZC5sZW5ndGg7IGogPCBsZW47IGogPSBqICsgMSkgewogICAgICAgICAgICBkbHVybCA9IHZjW2NjLmluZGV4T2YoZGRbal0pXS51cmw7CiAgICAgICAgICAgIGJpdHJhdGUgPSB2Y1tjYy5pbmRleE9mKGRkW2pdKV0udmlkZW9fYml0cmF0ZTsKICAgICAgICAgICAgdmVydGljYWxfcmVzb2x1dGlvbiA9IHZjW2NjLmluZGV4T2YoZGRbal0pXS52ZXJ0aWNhbF9yZXNvbHV0aW9uOwogICAgICAgICAgICAvKmNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVOb2RlKCJwcmUiLCB7fSwgewogICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICJCaXRyYXRlOiAiICsgYml0cmF0ZSArICIgLSBSb3pkemllbGN6b8WbxIcgcGlvbm93YTogIiArIHZlcnRpY2FsX3Jlc29sdXRpb24KICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB3ID0gJ3dnZXQgLS1yZXN0cmljdC1maWxlLW5hbWVzPXdpbmRvd3MgLS1wcm9ncmVzcz1iYXIgLS1oZWFkZXI9IlVzZXItQWdlbnQ6QUJDIiAtYyAtTyAiJyArIHRpdGxlICsgJy5tcDQiICcgKyBkbHVybDsKICAgICAgICAgICAgYnV0dG9uY3JlYXRlKGRsdXJsLCB0aXRsZSwgdyk7Ki8KICAgICAgICAgICAgaWYgKHZlcnRpY2FsX3Jlc29sdXRpb24gPiBIaWdoZXN0UmVzb2x1dGlvbikgewogICAgICAgICAgICAgICAgSGlnaGVzdFJlc29sdXRpb24gPSB2ZXJ0aWNhbF9yZXNvbHV0aW9uOwogICAgICAgICAgICAgICAgSGlnaGVzdFJlc29sdXRpb25MaW5rID0gZGx1cmw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICc8cD5CaXRyYXRlOiAnICsgYml0cmF0ZSArICcgLSBSb3pkemllbGN6b8WbxIcgcGlvbm93YTogJyArIHZlcnRpY2FsX3Jlc29sdXRpb24gKyAnPGJyPic7CiAgICAgICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyAiTGluayBkbyBtYXRlcmlhxYJ1OiA8YnV0dG9uIGlkPVwiYnV0dG9uLSIgKyBqICsgIlwiIHR5cGU9XCJidXR0b25cIj5Lb3BpdWo8L2J1dHRvbj48YnI+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiIgKyBkbHVybCArICJcIj4iICsgZGx1cmwgKyAiPC9hPjwvcD4iOwogICAgICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgIjxzY3JpcHQ+dmFyIGJ1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b24tIitqKyInKTtidXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe2NvcHlUZXh0KFwiIisgZGx1cmwgKyJcIik7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1dHRvbi0iK2orIicpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiY2xpY2tlZFwiKTt9KTwvc2NyaXB0PiI7CiAgICAgICAgfQogICAgICAgIGlmIChIaWdoZXN0UmVzb2x1dGlvbiA+IDApIHsKICAgICAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArIFN0eWxlVGV4dCArICc8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2phdmFzY3JpcHQiPmZ1bmN0aW9uIFNob3dQcm9tcHRXaXRoSW5mbyhsb2wpe2lmICh3aW5kb3cucHJvbXB0KCJBYnkgc2tvcGlvd2HEhyBsaW5rLCB3Y2nFm25pajogQ1RSTCtDLCBwb3RlbTogRU5URVIgYWJ5IHJvenBvY3rEhcSHIHBvYmllcmFuaWUsIGx1YiBFU0MgYWJ5IHpha2/FhGN6ecSHIGR6aWHFgmFuaWUgc2tyeXB0dSIsIGxvbCkpe2RvY3VtZW50LmxvY2F0aW9uLmhyZWY9bG9sO319c2V0VGltZW91dChmdW5jdGlvbiAoKSB7U2hvd1Byb21wdFdpdGhJbmZvKCInICsgSGlnaGVzdFJlc29sdXRpb25MaW5rICsgJyIpO30sIDEwMDApOycgKyBTa3J5cHRLb3BpdWpUZXh0ICsgJzwvc2NyaXB0Pic7CiAgICAgICAgICAgIGFkZEpTX05vZGUobnVsbCwgbnVsbCwgZmlyZU5ld1RhYik7CiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggKGUpewogICAgICAgIGlmIChsb2NhdGlvbi5ocmVmLm1hdGNoKC9eaHR0cFtzXT86XC9cL3ZvZFwucGxcLy8pIHx8IGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwW3NdPzpcL1wvYmFqa2lcLm9uZXRcLnBsXC8vKSkgewogICAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MOwogICAgICAgICAgICBtID0gaS5tYXRjaCgvbXZwOihbXGRcLl0rKVx4MjIvKTsKICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwOi8vcWkuY2ttLm9uZXRhcGkucGwvP2JvZHlbaWRdPTIyRDRCM0JDMDE0QTNDMjAwQkNBMTRDREZGM0FDMDE4JmJvZHlbanNvbnJwY109Mi4wJmJvZHlbbWV0aG9kXT1nZXRfYXNzZXRfZGV0YWlsJmJvZHlbcGFyYW1zXVtJRF9QdWJsaWthY2ppXT0iICsgbVsxXSArICImYm9keVtwYXJhbXNdW1NlcnZpY2VdPXZvZC5vbmV0LnBsJmNvbnRlbnQtdHlwZT1hcHBsaWNhdGlvbi9qc29ucCZ4LW9uZXQtYXBwPXBsYXllci5mcm9udC5vbmV0YXBpLnBsJl89MTQ4NzUzNjk5NjMzMyI7CiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSB1cmw7CiAgICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbi5ocmVmLm1hdGNoKC9eaHR0cD86XC9cL3FpXC5ja20uXG9uZXRhcGlcLnBsXC8vKSkgewogICAgICAgICAgICBubiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoInByZSIpLnRleHRDb250ZW50OwogICAgICAgICAgICB2ID0gSlNPTi5wYXJzZShubik7CiAgICAgICAgICAgIHZjID0gdi5yZXN1bHRbMF0uZm9ybWF0cy53aWRlby5tcDQ7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAtMSwgY2MgPSBbXSwgZGQgPSBbXSwgbCA9IHZjLmxlbmd0aCA+Pj4gMDsgKytpICE9PSBsOyBudWxsKSB7CiAgICAgICAgICAgICAgICBkZFtpXSA9IGNjW2ldID0gdmNbaV0udmlkZW9fYml0cmF0ZTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGQuc29ydChmdW5jdGlvbihhLCBiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYiAtIGE7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuID0gZGQubGVuZ3RoOyBqIDwgbGVuOyBqID0gaiArIDEpIHsKICAgICAgICAgICAgICAgIHZhciBkbHVybCA9IHZjW2NjLmluZGV4T2YoZGRbal0pXS51cmw7CiAgICAgICAgICAgICAgICBpZiAoZGx1cmwgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gZGx1cmw7CiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBQb2thekxpbmtPbmV0QXBpKCl7CiAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIGZhbHNlKTsKICAgIHhoci5zZW5kKG51bGwpOwogICAgdiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7CgkJdmMgPSB2LnJlc3VsdFswXS5mb3JtYXRzLndpZGVvWyJtcDQtdWhkIl07CgkJaWYgKCF2YykgewoJCQlhbGVydCgnTmllc3RldHksIGFsZSBtYXRlcmlhxYIgamVzdCB6YWJlenBpZWN6b255IERSTSBpIG5pZSBixJlkemllIG1vxbxuYSBnbyBwb2JyYcSHIDooJyk7CgkJCXJldHVybjsKCQl9OwoJCXRpdGxlID0gdi5yZXN1bHRbMF0ubWV0YS50aXRsZTsKCQlmb3IgKHZhciAgIGkgPSAtMSwgY2MgPSBbXSwgZGQgPSBbXSwgbCA9IHZjLmxlbmd0aCA+Pj4gMDsgKytpICE9PSBsOyBudWxsKSB7CgkJCWRkW2ldID0gY2NbaV0gPSB2Y1tpXS52aWRlb19iaXRyYXRlOwogICAgICAgICAgICBhbGVydChkZFtpXSk7CgkJfTsKCQlkZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CgkJCXJldHVybiAgIGIgLSBhOwoJCX0pOwogICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSAiIjsKICAgIHZhciByYW5kb21UZXh0ID0gbWFrZWlkKCk7CiAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgJzxwPlR5dHXFgjogJyArIHRpdGxlICsgJzwvcD4nOwogICAgdmFyIEhpZ2hlc3RSZXNvbHV0aW9uID0gMDsKICAgIHZhciBIaWdoZXN0UmVzb2x1dGlvbkxpbmsgPSAnJzsKICAgIGZvciAodmFyIGogPSAwLCBsZW4gPSBkZC5sZW5ndGg7IGogPCBsZW47IGogPSBqICsgMSkgewogICAgICAgIGRsdXJsID0gdmNbY2MuaW5kZXhPZihkZFtqXSldLnVybDsKICAgICAgICBiaXRyYXRlID0gdmNbY2MuaW5kZXhPZihkZFtqXSldLnZpZGVvX2JpdHJhdGU7CiAgICAgICAgdmVydGljYWxfcmVzb2x1dGlvbiA9IHZjW2NjLmluZGV4T2YoZGRbal0pXS52ZXJ0aWNhbF9yZXNvbHV0aW9uOwogICAgICAgIC8qY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZU5vZGUoInByZSIsIHt9LCB7CiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogIkJpdHJhdGU6ICIgKyBiaXRyYXRlICsgIiAtIFJvemR6aWVsY3pvxZvEhyBwaW9ub3dhOiAiICsgdmVydGljYWxfcmVzb2x1dGlvbgogICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIHcgPSAnd2dldCAtLXJlc3RyaWN0LWZpbGUtbmFtZXM9d2luZG93cyAtLXByb2dyZXNzPWJhciAtLWhlYWRlcj0iVXNlci1BZ2VudDpBQkMiIC1jIC1PICInICsgdGl0bGUgKyAnLm1wNCIgJyArIGRsdXJsOwogICAgICAgICAgICBidXR0b25jcmVhdGUoZGx1cmwsIHRpdGxlLCB3KTsqLwogICAgICAgIGlmICh2ZXJ0aWNhbF9yZXNvbHV0aW9uID4gSGlnaGVzdFJlc29sdXRpb24pIHsKICAgICAgICAgICAgSGlnaGVzdFJlc29sdXRpb24gPSB2ZXJ0aWNhbF9yZXNvbHV0aW9uOwogICAgICAgICAgICBIaWdoZXN0UmVzb2x1dGlvbkxpbmsgPSBkbHVybDsKICAgICAgICB9CiAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICc8cD5CaXRyYXRlOiAnICsgYml0cmF0ZSArICcgLSBSb3pkemllbGN6b8WbxIcgcGlvbm93YTogJyArIHZlcnRpY2FsX3Jlc29sdXRpb24gKyAnPGJyPic7CiAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICJMaW5rIGRvIG1hdGVyaWHFgnU6IDxidXR0b24gaWQ9XCJidXR0b24tIiArIGogKyAiXCIgdHlwZT1cImJ1dHRvblwiPktvcGl1ajwvYnV0dG9uPjxicj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiIiArIGRsdXJsICsgIlwiPiIgKyBkbHVybCArICI8L2E+PC9wPiI7CiAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICI8c2NyaXB0PnZhciBidXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uLSIraisiJyk7YnV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtjb3B5VGV4dChcIiIrIGRsdXJsICsiXCIpO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b24tIitqKyInKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNsaWNrZWRcIik7fSk8L3NjcmlwdD4iOwogICAgfQogICAgaWYgKEhpZ2hlc3RSZXNvbHV0aW9uID4gMCkgewogICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyBTdHlsZVRleHQgKyAnPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Ij5mdW5jdGlvbiBTaG93UHJvbXB0V2l0aEluZm8obG9sKXtpZiAod2luZG93LnByb21wdCgiQWJ5IHNrb3Bpb3dhxIcgbGluaywgd2NpxZtuaWo6IENUUkwrQywgcG90ZW06IEVOVEVSIGFieSByb3pwb2N6xIXEhyBwb2JpZXJhbmllLCBsdWIgRVNDIGFieSB6YWtvxYRjennEhyBkemlhxYJhbmllIHNrcnlwdHUiLCBsb2wpKXtkb2N1bWVudC5sb2NhdGlvbi5ocmVmPWxvbDt9fXNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1Nob3dQcm9tcHRXaXRoSW5mbygiJyArIEhpZ2hlc3RSZXNvbHV0aW9uTGluayArICciKTt9LCAxMDAwKTsnICsgU2tyeXB0S29waXVqVGV4dCArICc8L3NjcmlwdD4nOwogICAgICAgIC8vYWRkSlNfTm9kZShudWxsLCBudWxsLCBmaXJlTmV3VGFiKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgIjxicj4iICsgZG9jdW1lbnQuYm9keS5pbm5lckhUTUw7CiAgICB9Cn0KCmZ1bmN0aW9uIFBva2F6TGlua1R2cCgpIHsKICAgIGlmIChsb2NhdGlvbi5ocmVmLm1hdGNoKC9eaHR0cFtzXT86XC9cL3ZvZFwudHZwXC5wbFwvW1xkXXswLDh9LykpIHsKICAgICAgICBpID0gZG9jdW1lbnQuYm9keS5pbm5lckhUTUw7CiAgICAgICAgbSA9IGkubWF0Y2goL29iamVjdF9pZD0oW1xkXXswLDh9KS8pOwogICAgICAgIHZhciB6bmFsZXppb25vdHl0dWwgPSBmYWxzZTsKICAgICAgICBzdCA9ICdOaWV6bmFuZSc7CiAgICAgICAgdHQgPSAnTmllem5hbmUnOwogICAgICAgIGkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW92aWVXcmFwcGVyJyk7CiAgICAgICAgaWYgKGkgIT09IG51bGwpIHsKICAgICAgICAgICAgaSA9IGkucXVlcnlTZWxlY3RvcignaWZyYW1lJykuY29udGVudFdpbmRvdy5kb2N1bWVudC5oZWFkLmlubmVySFRNTDsKICAgICAgICAgICAgaWYgKGkgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHN0ID0gaS5tYXRjaCgvXHtuYW1lOiBceDIyU2VyaWVzVGl0bGVceDIyXCwgdmFsdWU6IFx4MjIoLiopXHgyMlx9LC8pIFsxXTsKICAgICAgICAgICAgICAgIHR0ID0gaS5tYXRjaCgvXHtuYW1lOiBceDIyVGl0bGVceDIyXCwgdmFsdWU6IFx4MjIoLiopXHgyMlx9LC8pIFsxXTsKICAgICAgICAgICAgICAgIHpuYWxlemlvbm90eXR1bCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGl0bGUgPSBzdCArICcgLSAnICsgdHQ7CiAgICAgICAgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIHhtbGh0dHAub3BlbignR0VUJywgJ2h0dHBzOi8vd3d3LnR2cC5wbC9zaGFyZWQvY2RuL3Rva2VuaXplcl92Mi5waHA/b2JqZWN0X2lkPScgKyBtWzFdLCBmYWxzZSk7CiAgICAgICAgeG1saHR0cC5zZW5kKCk7CiAgICAgICAgbyA9IEpTT04ucGFyc2UoeG1saHR0cC5yZXNwb25zZVRleHQpOwogICAgICAgIHYgPSBvLmZvcm1hdHM7CiAgICAgICAgdmMgPSBbXTsKICAgICAgICBpZih2ICE9IG51bGwpewogICAgICAgICAgICBmb3IgKHZhciBpID0gLSAxLCB2YyA9IFsKICAgICAgICAgICAgXSwgbCA9IHYubGVuZ3RoID4+PiAwOyArK2kgIT09IGw7IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh2W2ldLmFkYXB0aXZlID09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmMucHVzaCh2W2ldKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGlmICh2Yy5sZW5ndGggPT0gMCkgewogICAgICAgICAgICBhbGVydCgnTmllc3RldHksIGFsZSBtYXRlcmlhxYIgamVzdCB6YWJlenBpZWN6b255IERSTSBpIG5pZSBixJlkemllIG1vxbxuYSBnbyBwb2JyYcSHIDooJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9OwogICAgICAgIGZvciAodmFyIGkgPSAtIDEsIGNjID0gWwogICAgICAgIF0sIGRkID0gWwogICAgICAgIF0sIGwgPSB2Yy5sZW5ndGggPj4+IDA7ICsraSAhPT0gbDsgbnVsbCkgewogICAgICAgICAgICBkZFtpXSA9IGNjW2ldID0gdmNbaV0udG90YWxCaXRyYXRlOwogICAgICAgIH07CiAgICAgICAgZGQuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gYiAtIGE7CiAgICAgICAgfSk7CiAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSAnJzsKICAgICAgICBpZiAoem5hbGV6aW9ub3R5dHVsKSB7CiAgICAgICAgICAgIERvY3VtZW50V3JpdGVGaXJlZm94Rml4ID0gRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggKyAnPHA+VHl0dcWCOiAnICsgdGl0bGUgKyAnPC9wPic7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGogPSAwLCBsZW4gPSBkZC5sZW5ndGg7IGogPCBsZW47IGogPSBqICsgMSkgewogICAgICAgICAgICBkbHVybCA9IHZjW2NjLmluZGV4T2YoZGRbal0pXS51cmw7CiAgICAgICAgICAgIGJpdHJhdGUgPSB2Y1tjYy5pbmRleE9mKGRkW2pdKV0udG90YWxCaXRyYXRlOwogICAgICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgJzxwPkJpdHJhdGU6ICcgKyBiaXRyYXRlICsgJzxicj4nOwogICAgICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgIkxpbmsgZG8gbWF0ZXJpYcWCdTogPGJ1dHRvbiBpZD1cImJ1dHRvbi0iICsgaiArICJcIiB0eXBlPVwiYnV0dG9uXCI+S29waXVqPC9idXR0b24+PGJyPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIiICsgZGx1cmwgKyAiXCI+IiArIGRsdXJsICsgIjwvYT48L3A+IjsKICAgICAgICAgICAgRG9jdW1lbnRXcml0ZUZpcmVmb3hGaXggPSBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCArICI8c2NyaXB0PnZhciBidXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uLSIraisiJyk7YnV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtjb3B5VGV4dChcIiIrIGRsdXJsICsiXCIpO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXR0b24tIitqKyInKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNsaWNrZWRcIik7fSk8L3NjcmlwdD4iOwogICAgICAgIH0KICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuID0gZGQubGVuZ3RoOyBqIDwgbGVuOyBqID0gaiArIDEpIHsKICAgICAgICAgICAgZGx1cmxiZXN0ID0gdmNbY2MuaW5kZXhPZihkZFtqXSldLnVybDsKICAgICAgICAgICAgaWYgKGRsdXJsYmVzdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBEb2N1bWVudFdyaXRlRmlyZWZveEZpeCA9IERvY3VtZW50V3JpdGVGaXJlZm94Rml4ICsgU3R5bGVUZXh0ICsgJzxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+ZnVuY3Rpb24gU2hvd1Byb21wdFdpdGhJbmZvKGxvbCl7aWYgKHdpbmRvdy5wcm9tcHQoIkFieSBza29waW93YcSHIGxpbmssIHdjacWbbmlqOiBDVFJMK0MsIHBvdGVtOiBFTlRFUiBhYnkgcm96cG9jesSFxIcgcG9iaWVyYW5pZSwgbHViIEVTQyBhYnkgemFrb8WEY3p5xIcgZHppYcWCYW5pZSBza3J5cHR1IiwgbG9sKSl7ZG9jdW1lbnQubG9jYXRpb24uaHJlZj1sb2w7fX1zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtTaG93UHJvbXB0V2l0aEluZm8oIicgKyBkbHVybGJlc3QgKyAnIik7fSwgMTAwMCk7JyArIFNrcnlwdEtvcGl1alRleHQgKyAnPC9zY3JpcHQ+JzsKICAgICAgICBhZGRKU19Ob2RlKG51bGwsIG51bGwsIGZpcmVOZXdUYWIpOwogICAgfQoKfQoKZnVuY3Rpb24gUG9rYXpMaW5rQ2RhKCkgewogICAgaWYgKHR5cGVvZiBsID09PSAndW5kZWZpbmVkJykgewogICAgICAgIHZhciBrb2x1bW55X2xpc3QyID0gJ3BiLXZpZGVvLXBsYXllcic7CiAgICAgICAgdmFyIGxpc3RfY3phdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoa29sdW1ueV9saXN0Mik7CiAgICAgICAgaWYgKGxpc3RfY3phdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0X2N6YXQubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciB2dmlpZGVvbyA9IGxpc3RfY3phdFtpXS5zcmM7CiAgICAgICAgICAgICAgICBTaG93UHJvbXB0V2l0aEluZm8odnZpaWRlb28pOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBTaG93UHJvbXB0V2l0aEluZm8obCk7CiAgICB9Cn0KCmZ1bmN0aW9uIFNrcnlwdERvUG9iaWVyYW5pYVN0YXJ0KCkgewogICAgaWYgKFdsYWN6X3NrcnlwdCkgewogICAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICBpZiAobG9jYXRpb24uaHJlZi5tYXRjaCgvXmh0dHBbc10/OlwvXC93d3dcLmlwbGFcLnR2XC8vKSkgewogICAgICAgICAgICB2YXIgYnRuSXBsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7CiAgICAgICAgICAgIGJ0bklwbGEuc2V0QXR0cmlidXRlKCd2YWx1ZScsICdQb2JpZXJ6IHZpZGVvJyk7CiAgICAgICAgICAgIGJ0bklwbGEuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpOwogICAgICAgICAgICBidG5JcGxhLnNldEF0dHJpYnV0ZSgnaWQnLCAnYnRuSXBsYScpOwogICAgICAgICAgICBidG5JcGxhLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAncG9zaXRpb246Zml4ZWQgIWltcG9ydGFudDsgbGVmdDogMHB4OyB0b3A6IDRweDsgd2lkdGg6IDE0MHB4OyBoZWlnaHQ6IDM1cHg7IGJhY2tncm91bmQtY29sb3I6ICMwMGE2ZmY7IGNvbG9yOiB3aGl0ZTsgei1pbmRleDogMTAwMDAwMDAwMDsnKTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKSBbMF0uYXBwZW5kQ2hpbGQoYnRuSXBsYSk7CiAgICAgICAgICAgIGFkZEV2ZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5JcGxhJyksICdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIFBva2F6TGlua0lwbGEoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKHVybC5pbmRleE9mKCdnZXRtZWRpYS5yZWRlZmluZS5wbCcpID4gLSAxKSB7CiAgICAgICAgICAgIFBva2F6TGlua1BvYmllcmFuaWVJcGxhKCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwW3NdPzpcL1wvKD86d3szfVwuKT8oPzp0dm4pP3BsYXllclwucGxcLy8pKSB7CiAgICAgICAgICAgIHZhciBidG5UVk5Ob3d5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgYnRuVFZOTm93eS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ1BvYmllcnogdmlkZW8nKTsKICAgICAgICAgICAgYnRuVFZOTm93eS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7CiAgICAgICAgICAgIGJ0blRWTk5vd3kuc2V0QXR0cmlidXRlKCdpZCcsICdidG5UVk5Ob3d5Jyk7CiAgICAgICAgICAgIGJ0blRWTk5vd3kuc2V0QXR0cmlidXRlKCdzdHlsZScsICdwb3NpdGlvbjpmaXhlZCAhaW1wb3J0YW50OyBsZWZ0OiAwcHg7IHRvcDogMXB4OyB3aWR0aDogMTE1cHg7IGhlaWdodDogMzBweDsgYmFja2dyb3VuZC1jb2xvcjogIzAwYTZmZjsgY29sb3I6IHdoaXRlOyB6LWluZGV4OiAxMDAwMDAwMDAwOycpOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpIFswXS5hcHBlbmRDaGlsZChidG5UVk5Ob3d5KTsKICAgICAgICAgICAgYWRkRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0blRWTk5vd3knKSwgJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgUG9rYXpMaW5rVFZOTm93eSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAobG9jYXRpb24uaHJlZi5tYXRjaCgvXmh0dHBbc10/OlwvXC92b2RcLnBsXC8vKSkgewogICAgICAgICAgICB2YXIgYnRuT25ldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7CiAgICAgICAgICAgIGJ0bk9uZXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsICdQb2JpZXJ6IHZpZGVvJyk7CiAgICAgICAgICAgIGJ0bk9uZXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpOwogICAgICAgICAgICBidG5PbmV0LnNldEF0dHJpYnV0ZSgnaWQnLCAnYnRuT25ldCcpOwogICAgICAgICAgICBidG5PbmV0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAncG9zaXRpb246Zml4ZWQgIWltcG9ydGFudDsgbGVmdDogMHB4OyB0b3A6IDJweDsgd2lkdGg6IDExMHB4OyBoZWlnaHQ6IDI1cHg7IGJhY2tncm91bmQtY29sb3I6ICMyZmQ2ZmY7IHotaW5kZXg6IDEwMDAwMDAwMDA7Jyk7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JykgWzBdLmFwcGVuZENoaWxkKGJ0bk9uZXQpOwogICAgICAgICAgICBhZGRFdmVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuT25ldCcpLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBQb2thekxpbmtPbmV0KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChsb2NhdGlvbi5ocmVmLm1hdGNoKC9eaHR0cFtzXT86XC9cL3FpXC5ja21cLm9uZXRhcGlcLnBsXC8vKSkgewogICAgICAgICAgICBQb2thekxpbmtPbmV0QXBpKCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwW3NdPzpcL1wvdm9kXC50dnBcLnBsXC9bXGRdezAsOH0vKSkgewogICAgICAgICAgICBpID0gZG9jdW1lbnQuYm9keS5pbm5lckhUTUw7CiAgICAgICAgICAgIG0gPSBpLm1hdGNoKC9vYmplY3RfaWQ9KFtcZF17MCw4fSkvKTsKICAgICAgICAgICAgaWYgKG0gIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigndm9kLnR2cC5wbC92b2Qvc2xpZGVyJykgPT0gLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCd0dnAucGwvc2Vzcy90dnBsYXllci5waHA/JykgPT0gLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidG5UdnAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogICAgICAgICAgICAgICAgICAgICAgICBidG5UdnAuc2V0QXR0cmlidXRlKCd2YWx1ZScsICdQb2JpZXJ6IHZpZGVvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ0blR2cC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ0blR2cC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2J0blR2cCcpOwogICAgICAgICAgICAgICAgICAgICAgICBidG5UdnAuc2V0QXR0cmlidXRlKCdzdHlsZScsICdwb3NpdGlvbjpmaXhlZCAhaW1wb3J0YW50OyBsZWZ0OiAwcHg7IHRvcDogMTBweDsgd2lkdGg6IDEwMHB4OyBoZWlnaHQ6IDM1cHg7ICB6LWluZGV4OiAxMDAwMDAwMDAwOycpOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpIFswXS5hcHBlbmRDaGlsZChidG5UdnApOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuVHZwJyksICdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBva2F6TGlua1R2cCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodXJsLmluZGV4T2YoJ3d3dy5jZGEucGwnKSA+IC0gMSkgewogICAgICAgICAgICB2YXIgYnRuQ2RhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICAgICAgYnRuQ2RhLnNldEF0dHJpYnV0ZSgndmFsdWUnLCAnUG9iaWVyeiB2aWRlbycpOwogICAgICAgICAgICBidG5DZGEuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpOwogICAgICAgICAgICBidG5DZGEuc2V0QXR0cmlidXRlKCdpZCcsICdidG5DZGEnKTsKICAgICAgICAgICAgYnRuQ2RhLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAncG9zaXRpb246Zml4ZWQgIWltcG9ydGFudDsgbGVmdDogMHB4OyB0b3A6IDJweDsgd2lkdGg6IDk1cHg7IGhlaWdodDogMzBweDsgIHotaW5kZXg6IDEwMDAwMDAwMDA7Jyk7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JykgWzBdLmFwcGVuZENoaWxkKGJ0bkNkYSk7CiAgICAgICAgICAgIGFkZEV2ZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5DZGEnKSwgJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgUG9rYXpMaW5rQ2RhKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KfQppZih3aW5kb3cualF1ZXJ5KXsKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgICAgIFNrcnlwdERvUG9iaWVyYW5pYVN0YXJ0KCk7CiAgICB9KTsKfQplbHNlewogICAgd2luZG93Lm9ubG9hZCA9IFNrcnlwdERvUG9iaWVyYW5pYVN0YXJ0KCk7Cn0KLypkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBTa3J5cHREb1BvYmllcmFuaWFTdGFydCgpOwp9KTsqLwo="},{"name":"AdsBypasser","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://*","https://*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":["*"]}},"storage":{"ts":1567958522182,"data":{"version":"n4","external_server_support":"bfalse","log_level":"n1","change_background":"btrue","scale_image":"btrue","align_center":"btrue","redirect_image":"btrue"}},"enabled":true,"position":2,"file_url":"https://adsbypasser.github.io/releases/adsbypasser.full.es7.user.js","uuid":"56dab02d-26b1-4a20-9fe7-dbb939495f19","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIEFkc0J5cGFzc2VyCi8vIEBuYW1lc3BhY2UgICAgICBBZHNCeXBhc3NlcgovLyBAZGVzY3JpcHRpb24gICAgQnlwYXNzIEFkcwovLyBAY29weXJpZ2h0ICAgICAgMjAxMissIFdlaS1DaGVuZyBQYW4gKGxlZ25hbGV1cmMpCi8vIEB2ZXJzaW9uICAgICAgICA3LjcuMAovLyBAbGljZW5zZSAgICAgICAgQlNECi8vIEBob21lcGFnZVVSTCAgICBodHRwczovL2Fkc2J5cGFzc2VyLmdpdGh1Yi5pby8KLy8gQHN1cHBvcnRVUkwgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hZHNieXBhc3Nlci9hZHNieXBhc3Nlci9pc3N1ZXMKLy8gQHVwZGF0ZVVSTCAgICAgIGh0dHBzOi8vYWRzYnlwYXNzZXIuZ2l0aHViLmlvL3JlbGVhc2VzL2Fkc2J5cGFzc2VyLmZ1bGwuZXM3Lm1ldGEuanMKLy8gQGRvd25sb2FkVVJMICAgIGh0dHBzOi8vYWRzYnlwYXNzZXIuZ2l0aHViLmlvL3JlbGVhc2VzL2Fkc2J5cGFzc2VyLmZ1bGwuZXM3LnVzZXIuanMKLy8gQGljb24gICAgICAgICAgIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hZHNieXBhc3Nlci9hZHNieXBhc3Nlci92Ny43LjAvcmVzb3VyY2VzL2ltZy9sb2dvLnBuZwovLyBAZ3JhbnQgICAgICAgICAgR01fZGVsZXRlVmFsdWUKLy8gQGdyYW50ICAgICAgICAgIEdNX2dldFJlc291cmNlVVJMCi8vIEBncmFudCAgICAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgICAgR01fb3BlbkluVGFiCi8vIEBncmFudCAgICAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kCi8vIEBncmFudCAgICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50ICAgICAgICAgIEdNLmRlbGV0ZVZhbHVlCi8vIEBncmFudCAgICAgICAgICBHTS5nZXRSZXNvdXJjZVVybAovLyBAZ3JhbnQgICAgICAgICAgR00uZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICAgIEdNLm9wZW5JblRhYgovLyBAZ3JhbnQgICAgICAgICAgR00uc2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICAgIEdNLnhtbEh0dHBSZXF1ZXN0Ci8vIEBncmFudCAgICAgICAgICB1bnNhZmVXaW5kb3cKLy8gQHJlc291cmNlICAgICAgIGFsaWduQ2VudGVyIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hZHNieXBhc3Nlci9hZHNieXBhc3Nlci92Ny43LjAvcmVzb3VyY2VzL2Nzcy9hbGlnbl9jZW50ZXIuY3NzCi8vIEByZXNvdXJjZSAgICAgICBzY2FsZUltYWdlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hZHNieXBhc3Nlci9hZHNieXBhc3Nlci92Ny43LjAvcmVzb3VyY2VzL2Nzcy9zY2FsZV9pbWFnZS5jc3MKLy8gQHJlc291cmNlICAgICAgIGJnSW1hZ2UgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Fkc2J5cGFzc2VyL2Fkc2J5cGFzc2VyL3Y3LjcuMC9yZXNvdXJjZXMvaW1nL2ltYWdlZG9jLWRhcmtub2lzZS5wbmcKLy8gQHJ1bi1hdCAgICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBpbmNsdWRlICAgICAgICBodHRwOi8vKgovLyBAaW5jbHVkZSAgICAgICAgaHR0cHM6Ly8qCi8vIEBjb25uZWN0ICAgICAgICAqCi8vID09L1VzZXJTY3JpcHQ9PQoKIChmdW5jdGlvbihtb2R1bGVzKSB7IAogCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307CiAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewogCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkgewogCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CiAJCX0KIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewogCQkJaTogbW9kdWxlSWQsCiAJCQlsOiBmYWxzZSwKIAkJCWV4cG9ydHM6IHt9CiAJCX07CiAJCW1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pOwogCQltb2R1bGUubCA9IHRydWU7CiAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKIAl9CiAJX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlczsKIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwogCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewogCQlpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7CiAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTsKIAkJfQogCX07CiAJX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykgewogCQlpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHsKIAkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pOwogCQl9CiAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7CiAJfTsKIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkgewogCQlpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTsKIAkJaWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTsKIAkJaWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTsKIAkJdmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTsKIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pOwogCQlpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7CiAJCXJldHVybiBuczsKIAl9OwogCV9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkgewogCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6CiAJCQlmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9OwogCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7CiAJCXJldHVybiBnZXR0ZXI7CiAJfTsKIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07CiAJX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gIiI7CiAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7CiB9KQogKFsKIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7CiB2YXIgdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwogdmFyIHV0aWxfZGlzcGF0Y2hlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTsKIHZhciB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwogdmFyIHV0aWxfY29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpOwogdmFyIHV0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpOwogdmFyIF9BRFNCWVBBU1NFUl9IQU5ETEVSU19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7CmNvbnN0IGlzU2FmYXJpID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5IVE1MRWxlbWVudCkuaW5kZXhPZignQ29uc3RydWN0b3InKSA+IDA7CmZ1bmN0aW9uIGRpc2FibGVXaW5kb3dPcGVuICgpIHsKICB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bInVzdyJdLm9wZW4gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICBjbG9zZWQ6IGZhbHNlLAogICAgfTsKICB9OwogIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1sidXN3Il0uYWxlcnQgPSB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9wIl07CiAgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJ1c3ciXS5jb25maXJtID0gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vcCJdOwp9CmZ1bmN0aW9uIGRpc2FibGVMZWF2ZVByb21wdCAoZWxlbWVudCkgewogIGlmICghZWxlbWVudCkgewogICAgcmV0dXJuOwogIH0KICBjb25zdCBzZWFsID0gewogICAgc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fWyJpbmZvIl0pKCdibG9ja2VkIG9uYmVmb3JldW5sb2FkJyk7CiAgICB9LAogIH07CiAgZWxlbWVudC5vbmJlZm9yZXVubG9hZCA9IHVuZGVmaW5lZDsKICBpZiAoaXNTYWZhcmkpIHsKICAgIGVsZW1lbnQuX19kZWZpbmVTZXR0ZXJfXygnb25iZWZvcmV1bmxvYWQnLCBzZWFsLnNldCk7CiAgfSBlbHNlIHsKICAgIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1sidXN3Il0uT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdvbmJlZm9yZXVubG9hZCcsIHsKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgZ2V0OiB1bmRlZmluZWQsCiAgICAgIHNldDogc2VhbC5zZXQsCiAgICB9KTsKICB9CiAgY29uc3Qgb2FlbCA9IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcjsKICBjb25zdCBuYWVsID0gZnVuY3Rpb24gKHR5cGUpIHsKICAgIGlmICh0eXBlID09PSAnYmVmb3JldW5sb2FkJykgewogICAgICBPYmplY3QodXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1siaW5mbyJdKSgnYmxvY2tlZCBhZGRFdmVudExpc3RlbmVyIG9uYmVmb3JldW5sb2FkJyk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHJldHVybiBvYWVsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgPSBuYWVsOwp9CmZ1bmN0aW9uIGNoYW5nZVRpdGxlICgpIHsKICBkb2N1bWVudC50aXRsZSArPSAnIC0gQWRzQnlwYXNzZXInOwp9CmFzeW5jIGZ1bmN0aW9uIGJlZm9yZURPTVJlYWR5IChoYW5kbGVyKSB7CiAgY29uc3QgY29uZmlnID0gYXdhaXQgT2JqZWN0KHV0aWxfY29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bImR1bXBDb25maWciXSkoKTsKICBPYmplY3QodXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1siaW5mbyJdKSgnd29ya2luZyBvblxuJXMgXG53aXRoXG4lcycsIHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTsKICBkaXNhYmxlTGVhdmVQcm9tcHQodXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJ1c3ciXSk7CiAgZGlzYWJsZVdpbmRvd09wZW4oKTsKICBhd2FpdCBoYW5kbGVyLnN0YXJ0KCk7Cn0KYXN5bmMgZnVuY3Rpb24gYWZ0ZXJET01SZWFkeSAoaGFuZGxlcikgewogIGRpc2FibGVMZWF2ZVByb21wdCh1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bInVzdyJdLmRvY3VtZW50LmJvZHkpOwogIGNoYW5nZVRpdGxlKCk7CiAgYXdhaXQgaGFuZGxlci5yZWFkeSgpOwp9CmZ1bmN0aW9uIHdhaXRET00gKCkgewogIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdsb2FkaW5nJykgewogICAgICByZXNvbHZlKCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7CiAgICAgIHJlc29sdmUoKTsKICAgIH0pOwogIH0pOwp9CmFzeW5jIGZ1bmN0aW9uIG1haW4gKCkgewogIGlmICh1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bInJhd1VTVyJdLnRvcCAhPT0gdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJyYXdVU1ciXS5zZWxmKSB7CiAgICByZXR1cm47CiAgfQogIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5yZWdpc3Rlck1lbnVDb21tYW5kKCdBZHNCeXBhc3NlciAtIENvbmZpZ3VyZScsICgpID0+IHsKICAgIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5vcGVuSW5UYWIoJ2h0dHBzOi8vYWRzYnlwYXNzZXIuZ2l0aHViLmlvL2NvbmZpZ3VyZS5odG1sJyk7CiAgfSk7CiAgYXdhaXQgT2JqZWN0KHV0aWxfY29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bImxvYWRDb25maWciXSkoKTsKICBjb25zdCBoYW5kbGVyID0gT2JqZWN0KHV0aWxfZGlzcGF0Y2hlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJmaW5kSGFuZGxlciJdKSgpOwogIGlmIChoYW5kbGVyKSB7CiAgICBhd2FpdCBiZWZvcmVET01SZWFkeShoYW5kbGVyKTsKICAgIGF3YWl0IHdhaXRET00oKTsKICAgIGF3YWl0IGFmdGVyRE9NUmVhZHkoaGFuZGxlcik7CiAgICByZXR1cm47CiAgfQp9Cm1haW4oKS5jYXRjaCgoZSkgPT4gewogIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fWyJ3YXJuIl0pKGUpOwp9KTsKIH0pLAogKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiQWRzQnlwYXNzZXJFcnJvciIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQWRzQnlwYXNzZXJFcnJvcjsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgImV2ZXJ5IiwgZnVuY3Rpb24oKSB7IHJldHVybiBldmVyeTsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgImZpbmQiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZpbmQ7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJmb3JFYWNoIiwgZnVuY3Rpb24oKSB7IHJldHVybiBmb3JFYWNoOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiaXNTdHJpbmciLCBmdW5jdGlvbigpIHsgcmV0dXJuIGlzU3RyaW5nOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAibWFwIiwgZnVuY3Rpb24oKSB7IHJldHVybiBtYXA7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJub25lIiwgZnVuY3Rpb24oKSB7IHJldHVybiBub25lOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAibm9wIiwgZnVuY3Rpb24oKSB7IHJldHVybiBub3A7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJwYXJ0aWFsIiwgZnVuY3Rpb24oKSB7IHJldHVybiBwYXJ0aWFsOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAidHJ5RXZlcnkiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRyeUV2ZXJ5OyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAid2FpdCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gd2FpdDsgfSk7CmNsYXNzIEFkc0J5cGFzc2VyRXJyb3IgZXh0ZW5kcyBFcnJvciB7CiAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHsKICAgIHN1cGVyKG1lc3NhZ2UpOwogIH0KICBnZXQgbmFtZSAoKSB7CiAgICByZXR1cm4gJ0Fkc0J5cGFzc2VyRXJyb3InOwogIH0KfQpmdW5jdGlvbiBmb3JFYWNoIChjb2xsZWN0aW9uLCBmbikgewogIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkgewogICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoY29sbGVjdGlvbiwgZm4pOwogIH0KICByZXR1cm4gT2JqZWN0LmtleXMoY29sbGVjdGlvbikuZm9yRWFjaCgoaykgPT4gewogICAgcmV0dXJuIGZuKGNvbGxlY3Rpb25ba10sIGssIGNvbGxlY3Rpb24pOwogIH0pOwp9CmZ1bmN0aW9uIGV2ZXJ5IChjb2xsZWN0aW9uLCBmbikgewogIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkgewogICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5ldmVyeS5jYWxsKGNvbGxlY3Rpb24sIGZuKTsKICB9CiAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbGxlY3Rpb24pLmV2ZXJ5KChrKSA9PiB7CiAgICByZXR1cm4gZm4oY29sbGVjdGlvbltrXSwgaywgY29sbGVjdGlvbik7CiAgfSk7Cn0KZnVuY3Rpb24gbWFwIChjb2xsZWN0aW9uLCBmbikgewogIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkgewogICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChjb2xsZWN0aW9uLCBmbik7CiAgfQogIGNvbnN0IG1hcHBlZCA9IE9iamVjdC5hc3NpZ24oe30sIGNvbGxlY3Rpb24pOwogIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG1hcHBlZCkuZm9yRWFjaCgoaykgPT4gewogICAgbWFwcGVkW2tdID0gZm4oY29sbGVjdGlvbltrXSwgaywgY29sbGVjdGlvbik7CiAgfSk7CiAgcmV0dXJuIG1hcHBlZDsKfQpmdW5jdGlvbiBmaW5kIChjb2xsZWN0aW9uLCBmbikgewogIGZvciAoY29uc3QgW2ssIHZdIG9mIGVudW1lcmF0ZShjb2xsZWN0aW9uKSkgewogICAgY29uc3QgciA9IGZuKHYsIGssIGNvbGxlY3Rpb24pOwogICAgaWYgKHIgIT09IG5vbmUpIHsKICAgICAgcmV0dXJuIFtrLCB2LCByXTsKICAgIH0KICB9CiAgcmV0dXJuIFtub25lLCBub25lLCBub25lXTsKfQpmdW5jdGlvbiAqIGVudW1lcmF0ZSAoY29sbGVjdGlvbikgewogIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkgewogICAgeWllbGQgKiBBcnJheS5wcm90b3R5cGUuZW50cmllcy5jYWxsKGNvbGxlY3Rpb24pOwogICAgcmV0dXJuOwogIH0KICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29sbGVjdGlvbik7CiAgZm9yIChjb25zdCBrIG9mIGtleXMpIHsKICAgIHlpZWxkIFtrLCBjb2xsZWN0aW9uW2tdXTsKICB9Cn0KZnVuY3Rpb24gaXNBcnJheUxpa2UgKGNvbGxlY3Rpb24pIHsKICByZXR1cm4gQXJyYXkuaXNBcnJheShjb2xsZWN0aW9uKSB8fCBpc05vZGVMaXN0KGNvbGxlY3Rpb24pOwp9CmZ1bmN0aW9uIGlzTm9kZUxpc3QgKGNvbGxlY3Rpb24pIHsKICByZXR1cm4gY29sbGVjdGlvbi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnTm9kZUxpc3QnOwp9CmZ1bmN0aW9uIHBhcnRpYWwgKGZuLCAuLi5hcmdzKSB7CiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IEFkc0J5cGFzc2VyRXJyb3IoJ211c3QgZ2l2ZSBhIGZ1bmN0aW9uJyk7CiAgfQogIHJldHVybiAoLi4uaW5uZXJBcmdzKSA9PiB7CiAgICByZXR1cm4gZm4oLi4uYXJncy5jb25jYXQoaW5uZXJBcmdzKSk7CiAgfTsKfQpmdW5jdGlvbiBpc1N0cmluZyAodmFsdWUpIHsKICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHx8ICh2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZyk7Cn0KZnVuY3Rpb24gbm9wICgpIHsKfQpjb25zdCBub25lID0gbm9wOwpmdW5jdGlvbiB3YWl0IChtc0RlbGF5KSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIG1zRGVsYXkpOwogIH0pOwp9CmZ1bmN0aW9uIHRyeUV2ZXJ5IChtc0ludGVydmFsLCBmbikgewogIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY29uc3QgaGFuZGxlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICBjb25zdCByZXN1bHQgPSBmbigpOwogICAgICBpZiAocmVzdWx0ICE9PSBub25lKSB7CiAgICAgICAgY2xlYXJJbnRlcnZhbChoYW5kbGUpOwogICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgfQogICAgfSwgbXNJbnRlcnZhbCk7CiAgfSk7Cn0KIH0pLAogKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAicmVnaXN0ZXIiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHJlZ2lzdGVyOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiZmluZEhhbmRsZXIiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZpbmRIYW5kbGVyOyB9KTsKIHZhciB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7CmNvbnN0IHBhdHRlcm5zID0gW107CmZ1bmN0aW9uIHJlZ2lzdGVyIChwYXR0ZXJuKSB7CiAgcGF0dGVybnMucHVzaChwYXR0ZXJuKTsKfQpmdW5jdGlvbiBkaXNwYXRjaEJ5T2JqZWN0IChydWxlLCB1cmxfNikgewogIGNvbnN0IG1hdGNoZWQgPSBPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm1hcCJdKShydWxlLCAocGF0dGVybiwgcGFydCkgPT4gewogICAgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgcmV0dXJuIHVybF82W3BhcnRdLm1hdGNoKHBhdHRlcm4pOwogICAgfQogICAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHsKICAgICAgY29uc3QgWywgLCByXSA9IE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZmluZCJdKShwYXR0ZXJuLCAoc3ApID0+IHsKICAgICAgICBjb25zdCBtID0gdXJsXzZbcGFydF0ubWF0Y2goc3ApOwogICAgICAgIHJldHVybiBtIHx8IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJub25lIl07CiAgICAgIH0pOwogICAgICByZXR1cm4gciAhPT0gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXSA/IHIgOiBudWxsOwogICAgfQogICAgdGhyb3cgbmV3IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJBZHNCeXBhc3NlckVycm9yIl0oJ2ludmFsaWQgcnVsZScpOwogIH0pOwogIGNvbnN0IHBhc3NlZCA9IE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZXZlcnkiXSkobWF0Y2hlZCwgKHYpID0+IHsKICAgIHJldHVybiAhIXY7CiAgfSk7CiAgcmV0dXJuIHBhc3NlZCA/IG1hdGNoZWQgOiBudWxsOwp9CmZ1bmN0aW9uIGRpc3BhdGNoQnlSZWdFeHAgKHJ1bGUsIHVybF8xKSB7CiAgcmV0dXJuIHVybF8xLm1hdGNoKHJ1bGUpOwp9CmZ1bmN0aW9uIGRpc3BhdGNoQnlBcnJheSAocnVsZXMsIHVybF8xLCB1cmxfMywgdXJsXzYpIHsKICBjb25zdCBbLCAsIHJdID0gT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJmaW5kIl0pKHJ1bGVzLCAocnVsZSkgPT4gewogICAgY29uc3QgbSA9IGRpc3BhdGNoKHJ1bGUsIHVybF8xLCB1cmxfMywgdXJsXzYpOwogICAgcmV0dXJuIG0gPyBtIDogdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXTsKICB9KTsKICByZXR1cm4gciAhPT0gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXSA/IHIgOiBudWxsOwp9CmZ1bmN0aW9uIGRpc3BhdGNoQnlTdHJpbmcgKHJ1bGUsIHVybF8zKSB7CiAgbGV0IHNjaGVtZSA9IC9cKnxodHRwcz98ZmlsZXxmdHB8Y2hyb21lLWV4dGVuc2lvbi87CiAgbGV0IGhvc3QgPSAvXCp8KFwqXC4pPyhbXi8qXSspLzsKICBsZXQgcGF0aCA9IC9cLy4qLzsKICBsZXQgdG1wID0gYF4oJHtzY2hlbWUuc291cmNlfSk6Ly8oJHtob3N0LnNvdXJjZX0pPygke3BhdGguc291cmNlfSkkYDsKICBsZXQgdXAgPSBuZXcgUmVnRXhwKHRtcCk7CiAgY29uc3QgbWF0Y2hlZCA9IHJ1bGUubWF0Y2godXApOwogIGlmICghbWF0Y2hlZCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIHNjaGVtZSA9IG1hdGNoZWRbMV07CiAgaG9zdCA9IG1hdGNoZWRbMl07CiAgY29uc3Qgd2MgPSBtYXRjaGVkWzNdOwogIGNvbnN0IHNkID0gbWF0Y2hlZFs0XTsKICBwYXRoID0gbWF0Y2hlZFs1XTsKICBpZiAoc2NoZW1lID09PSAnKicgJiYgIS9odHRwcz8vLnRlc3QodXJsXzMuc2NoZW1lKSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmIChzY2hlbWUgIT09IHVybF8zLnNjaGVtZSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmIChzY2hlbWUgIT09ICdmaWxlJyAmJiBob3N0ICE9PSAnKicpIHsKICAgIGlmICh3YykgewogICAgICB1cCA9IHVybF8zLmhvc3QuaW5kZXhPZihzZCk7CiAgICAgIGlmICh1cCA8IDAgfHwgdXAgKyBzZC5sZW5ndGggIT09IHVybF8zLmhvc3QubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoaG9zdCAhPT0gdXJsXzMuaG9zdCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9CiAgdG1wID0gcGF0aC5yZXBsYWNlKC9bKi5bXF0/KyNdL2csIChjKSA9PiB7CiAgICBpZiAoYyA9PT0gJyonKSB7CiAgICAgIHJldHVybiAnLionOwogICAgfQogICAgcmV0dXJuICdcXCcgKyBjOwogIH0pOwogIHBhdGggPSBuZXcgUmVnRXhwKGBeJHt0bXB9JGApOwogIGlmICghcGF0aC50ZXN0KHVybF8zLnBhdGgpKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIHVybF8zOwp9CmZ1bmN0aW9uIGRpc3BhdGNoQnlGdW5jdGlvbiAocnVsZSwgdXJsXzEsIHVybF8zLCB1cmxfNikgewogIHJldHVybiBydWxlKHVybF8xLCB1cmxfMywgdXJsXzYpOwp9CmZ1bmN0aW9uIGRpc3BhdGNoIChydWxlLCB1cmxfMSwgdXJsXzMsIHVybF82KSB7CiAgaWYgKEFycmF5LmlzQXJyYXkocnVsZSkpIHsKICAgIHJldHVybiBkaXNwYXRjaEJ5QXJyYXkocnVsZSwgdXJsXzEsIHVybF8zLCB1cmxfNik7CiAgfQogIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIGRpc3BhdGNoQnlGdW5jdGlvbihydWxlLCB1cmxfMSwgdXJsXzMsIHVybF82KTsKICB9CiAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgIHJldHVybiBkaXNwYXRjaEJ5UmVnRXhwKHJ1bGUsIHVybF8xKTsKICB9CiAgaWYgKE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siaXNTdHJpbmciXSkocnVsZSkpIHsKICAgIHJldHVybiBkaXNwYXRjaEJ5U3RyaW5nKHJ1bGUsIHVybF8zKTsKICB9CiAgcmV0dXJuIGRpc3BhdGNoQnlPYmplY3QocnVsZSwgdXJsXzYpOwp9CmZ1bmN0aW9uIGZpbmRIYW5kbGVyICgpIHsKICBjb25zdCB1cmxfMSA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpOwogIGNvbnN0IHVybF8zID0gewogICAgc2NoZW1lOiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wuc2xpY2UoMCwgLTEpLAogICAgaG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3QsCiAgICBwYXRoOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2gsCiAgfTsKICBjb25zdCB1cmxfNiA9IHsKICAgIHNjaGVtZTogd2luZG93LmxvY2F0aW9uLnByb3RvY29sLAogICAgaG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLAogICAgcG9ydDogd2luZG93LmxvY2F0aW9uLnBvcnQsCiAgICBwYXRoOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsCiAgICBxdWVyeTogd2luZG93LmxvY2F0aW9uLnNlYXJjaCwKICAgIGhhc2g6IHdpbmRvdy5sb2NhdGlvbi5oYXNoLAogIH07CiAgY29uc3QgW2ksIHBhdHRlcm4sIG1hdGNoZWRdID0gT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJmaW5kIl0pKHBhdHRlcm5zLCAocGF0dGVybikgPT4gewogICAgY29uc3QgbSA9IGRpc3BhdGNoKHBhdHRlcm4ucnVsZSwgdXJsXzEsIHVybF8zLCB1cmxfNik7CiAgICByZXR1cm4gbSA/IG0gOiB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9uZSJdOwogIH0pOwogIGlmIChpID09PSB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9uZSJdKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgaWYgKCFwYXR0ZXJuLnN0YXJ0ICYmICFwYXR0ZXJuLnJlYWR5KSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIHsKICAgIHN0YXJ0OiBwYXR0ZXJuLnN0YXJ0ID8gT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJwYXJ0aWFsIl0pKHBhdHRlcm4uc3RhcnQsIG1hdGNoZWQpIDogdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vcCJdLAogICAgcmVhZHk6IHBhdHRlcm4ucmVhZHkgPyBPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bInBhcnRpYWwiXSkocGF0dGVybi5yZWFkeSwgbWF0Y2hlZCkgOiB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9wIl0sCiAgfTsKfQogfSksCiAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJyYXdVU1ciLCBmdW5jdGlvbigpIHsgcmV0dXJuIHJhd1VTVzsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgInVzdyIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdXN3OyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiR01BUEkiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEdNQVBJOyB9KTsKIHZhciB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7CmNvbnN0IHJhd1VTVyA9IGdldFVuc2FmZVdpbmRvdygpOwpjb25zdCB1c3cgPSBnZXRVbnNhZmVXaW5kb3dQcm94eSgpOwpjb25zdCBHTUFQSSA9IGdldEdyZWFzZU1vbmtleUFQSSgpOwpmdW5jdGlvbiBnZXRVbnNhZmVXaW5kb3cgKCkgewogIGxldCB3ID0gbnVsbDsKICB0cnkgewogICAgdyA9IHVuc2FmZVdpbmRvdzsKICB9IGNhdGNoIChlKSB7CiAgICB0cnkgewogICAgICB3ID0gKDAsIGV2YWwpKCd0aGlzJykuZ2xvYmFsOwogICAgfSBjYXRjaCAoZSkgewogICAgfQogIH0KICByZXR1cm4gdyA/IHcgOiAoMCwgZXZhbCkoJ3RoaXMnKS53aW5kb3c7Cn0KZnVuY3Rpb24gZ2V0R3JlYXNlTW9ua2V5QVBJICgpIHsKICBpZiAocmF3VVNXLmdsb2JhbCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGNvbnN0IGdtID0ge307CiAgaWYgKHR5cGVvZiBHTV9vcGVuSW5UYWIgPT09ICdmdW5jdGlvbicpIHsKICAgIGdtLm9wZW5JblRhYiA9IEdNX29wZW5JblRhYjsKICB9IGVsc2UgewogICAgZ20ub3BlbkluVGFiID0gR00ub3BlbkluVGFiOwogIH0KICBpZiAodHlwZW9mIEdNX2dldFZhbHVlID09PSAnZnVuY3Rpb24nKSB7CiAgICBnbS5nZXRWYWx1ZSA9IChuYW1lLCBkZWZhdWx0XykgPT4gewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEdNX2dldFZhbHVlKG5hbWUsIGRlZmF1bHRfKSk7CiAgICB9OwogIH0gZWxzZSB7CiAgICBnbS5nZXRWYWx1ZSA9IEdNLmdldFZhbHVlOwogIH0KICBpZiAodHlwZW9mIEdNX3NldFZhbHVlID09PSAnZnVuY3Rpb24nKSB7CiAgICBnbS5zZXRWYWx1ZSA9IChuYW1lLCB2YWx1ZSkgPT4gewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEdNX3NldFZhbHVlKG5hbWUsIHZhbHVlKSk7CiAgICB9OwogIH0gZWxzZSB7CiAgICBnbS5zZXRWYWx1ZSA9IEdNLnNldFZhbHVlOwogIH0KICBpZiAodHlwZW9mIEdNX2RlbGV0ZVZhbHVlID09PSAnZnVuY3Rpb24nKSB7CiAgICBnbS5kZWxldGVWYWx1ZSA9IChuYW1lKSA9PiB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoR01fZGVsZXRlVmFsdWUobmFtZSkpOwogICAgfTsKICB9IGVsc2UgewogICAgZ20uZGVsZXRlVmFsdWUgPSBHTS5kZWxldGVWYWx1ZTsKICB9CiAgaWYgKHR5cGVvZiBHTV94bWxodHRwUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykgewogICAgZ20ueG1sSHR0cFJlcXVlc3QgPSBHTV94bWxodHRwUmVxdWVzdDsKICB9IGVsc2UgewogICAgZ20ueG1sSHR0cFJlcXVlc3QgPSBHTS54bWxIdHRwUmVxdWVzdDsKICB9CiAgaWYgKHR5cGVvZiBHTV9yZWdpc3Rlck1lbnVDb21tYW5kID09PSAnZnVuY3Rpb24nKSB7CiAgICBnbS5yZWdpc3Rlck1lbnVDb21tYW5kID0gR01fcmVnaXN0ZXJNZW51Q29tbWFuZDsKICB9IGVsc2UgewogICAgZ20ucmVnaXN0ZXJNZW51Q29tbWFuZCA9IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJub3AiXTsKICB9CiAgaWYgKHR5cGVvZiBHTV9nZXRSZXNvdXJjZVVSTCA9PT0gJ2Z1bmN0aW9uJykgewogICAgZ20uZ2V0UmVzb3VyY2VVcmwgPSAocmVzb3VyY2VOYW1lKSA9PiB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoR01fZ2V0UmVzb3VyY2VVUkwocmVzb3VyY2VOYW1lKSk7CiAgICB9OwogIH0gZWxzZSBpZiAodHlwZW9mIEdNID09PSAnb2JqZWN0JyAmJiBHTSAmJiBHTS5nZXRSZXNvdXJjZVVybCkgewogICAgZ20uZ2V0UmVzb3VyY2VVcmwgPSBHTS5nZXRSZXNvdXJjZVVybDsKICB9CiAgcmV0dXJuIGdtOwp9CmNvbnN0IE1BR0lDX0tFWSA9ICdfX2Fkc2J5cGFzc2VyX3JldmVyc2VfcHJveHlfXyc7CmZ1bmN0aW9uIGdldFVuc2FmZVdpbmRvd1Byb3h5ICgpIHsKICBjb25zdCBpc0ZpcmVmb3ggPSB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnOwogIGNvbnN0IGlzV2ViRXh0ZW5zaW9uID0gdHlwZW9mIGNsb25lSW50byA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGV4cG9ydEZ1bmN0aW9uID09PSAndW5kZWZpbmVkJzsKICBpZiAoIWlzRmlyZWZveCB8fCBpc1dlYkV4dGVuc2lvbikgewogICAgcmV0dXJuIHJhd1VTVzsKICB9CiAgY29uc3QgZGVjb3JhdG9yID0gewogICAgc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGtleSA9PT0gTUFHSUNfS0VZKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmICh0YXJnZXQgPT09IHVuc2FmZVdpbmRvdyAmJiBrZXkgPT09ICdvcGVuJykgewogICAgICAgIGNvbnN0IGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTsKICAgICAgICBkLnZhbHVlID0gY2xvbmUoZnVuY3Rpb24gKCkgewogICAgICAgICAgY29uc3QgcnYgPSB2YWx1ZSgpOwogICAgICAgICAgcmV0dXJuIGNsb25lSW50byhydiwgdW5zYWZlV2luZG93KTsKICAgICAgICB9KTsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGQpOwogICAgICB9IGVsc2UgewogICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUodmFsdWUpOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIGdldCAodGFyZ2V0LCBrZXkpIHsKICAgICAgaWYgKGtleSA9PT0gTUFHSUNfS0VZKSB7CiAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgfQogICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtrZXldOwogICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlOwogICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgKHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZSAhPT0gJ29iamVjdCcpKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGRlY29yYXRvcik7CiAgICB9LAogICAgYXBwbHkgKHRhcmdldCwgc2VsZiwgYXJncykgewogICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7CiAgICAgIGlmICh0YXJnZXQgPT09IHVuc2FmZVdpbmRvdy5PYmplY3QuZGVmaW5lUHJvcGVydHkpIHsKICAgICAgICBhcmdzWzBdID0gYXJnc1swXVtNQUdJQ19LRVldOwogICAgICB9CiAgICAgIGlmICh0YXJnZXQgPT09IHVuc2FmZVdpbmRvdy5GdW5jdGlvbi5hcHBseSkgewogICAgICAgIHNlbGYgPSBzZWxmW01BR0lDX0tFWV07CiAgICAgICAgYXJnc1sxXSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3NbMV0pOwogICAgICB9CiAgICAgIGlmICh0YXJnZXQgPT09IHVuc2FmZVdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKSB7CiAgICAgICAgc2VsZiA9IHNlbGZbTUFHSUNfS0VZXTsKICAgICAgfQogICAgICBpZiAodGFyZ2V0ID09PSB1bnNhZmVXaW5kb3cuZG9jdW1lbnQud3JpdGUpIHsKICAgICAgICBzZWxmID0gc2VsZltNQUdJQ19LRVldOwogICAgICB9CiAgICAgIGNvbnN0IHVzYXJncyA9IGNsb25lKGFyZ3MpOwogICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHNlbGYsIHVzYXJncyk7CiAgICB9LAogICAgY29uc3RydWN0ICh0YXJnZXQsIGFyZ3MpIHsKICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpOwogICAgICBhcmdzLnVuc2hpZnQodW5kZWZpbmVkKTsKICAgICAgY29uc3QgdXNhcmdzID0gY2xvbmUoYXJncyk7CiAgICAgIGNvbnN0IGJpbmQgPSB1bnNhZmVXaW5kb3cuRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7CiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkodGFyZ2V0LCB1c2FyZ3MpKTsKICAgIH0sCiAgfTsKICByZXR1cm4gbmV3IFByb3h5KHVuc2FmZVdpbmRvdywgZGVjb3JhdG9yKTsKfQpmdW5jdGlvbiBjbG9uZSAoc2FmZSkgewogIGlmIChzYWZlID09PSBudWxsIHx8ICEoc2FmZSBpbnN0YW5jZW9mIE9iamVjdCkpIHsKICAgIHJldHVybiBzYWZlOwogIH0KICBpZiAoc2FmZSA9PT0gdW5zYWZlV2luZG93KSB7CiAgICByZXR1cm4gc2FmZTsKICB9CiAgaWYgKHNhZmUgaW5zdGFuY2VvZiBTdHJpbmcpIHsKICAgIHJldHVybiBzYWZlLnRvU3RyaW5nKCk7CiAgfQogIGlmIChzYWZlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgIHJldHVybiBleHBvcnRGdW5jdGlvbihzYWZlLCB1bnNhZmVXaW5kb3csIHsKICAgICAgYWxsb3dDcm9zc09yaWdpbkFyZ3VtZW50czogdHJ1ZSwKICAgIH0pOwogIH0KICBpZiAoc2FmZSBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICBjb25zdCB1bnNhZmUgPSBuZXcgdW5zYWZlV2luZG93LkFycmF5KCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNhZmUubGVuZ3RoOyArK2kpIHsKICAgICAgdW5zYWZlLnB1c2goY2xvbmUoc2FmZVtpXSkpOwogICAgfQogICAgcmV0dXJuIHVuc2FmZTsKICB9CiAgY29uc3QgdW5zYWZlID0gbmV3IHVuc2FmZVdpbmRvdy5PYmplY3QoKTsKICBPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImZvckVhY2giXSkoc2FmZSwgKHYsIGspID0+IHsKICAgIHVuc2FmZVtrXSA9IGNsb25lKHYpOwogIH0pOwogIHJldHVybiB1bnNhZmU7Cn0KIH0pLAogKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiZHVtcENvbmZpZyIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZHVtcENvbmZpZzsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgImxvYWRDb25maWciLCBmdW5jdGlvbigpIHsgcmV0dXJuIGxvYWRDb25maWc7IH0pOwogdmFyIHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKIHZhciB1dGlsX2Rpc3BhdGNoZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7CiB2YXIgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKY29uc3QgTUFOSUZFU1QgPSBbCiAgewogICAga2V5OiAndmVyc2lvbicsCiAgICBkZWZhdWx0XzogMCwKICAgIHZlcmlmeSAodikgewogICAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInICYmIHYgPj0gMDsKICAgIH0sCiAgICBub3JtYWxpemU6IHRvTnVtYmVyLAogIH0sCiAgewogICAga2V5OiAnYWxpZ25fY2VudGVyJywKICAgIGRlZmF1bHRfOiB0cnVlLAogICAgdmVyaWZ5OiBpc0Jvb2xlYW4sCiAgICBub3JtYWxpemU6IHRvQm9vbGVhbiwKICB9LAogIHsKICAgIGtleTogJ2NoYW5nZV9iYWNrZ3JvdW5kJywKICAgIGRlZmF1bHRfOiB0cnVlLAogICAgdmVyaWZ5OiBpc0Jvb2xlYW4sCiAgICBub3JtYWxpemU6IHRvQm9vbGVhbiwKICB9LAogIHsKICAgIGtleTogJ3JlZGlyZWN0X2ltYWdlJywKICAgIGRlZmF1bHRfOiB0cnVlLAogICAgdmVyaWZ5OiBpc0Jvb2xlYW4sCiAgICBub3JtYWxpemU6IHRvQm9vbGVhbiwKICB9LAogIHsKICAgIGtleTogJ3NjYWxlX2ltYWdlJywKICAgIGRlZmF1bHRfOiB0cnVlLAogICAgdmVyaWZ5OiBpc0Jvb2xlYW4sCiAgICBub3JtYWxpemU6IHRvQm9vbGVhbiwKICB9LAogIHsKICAgIGtleTogJ2xvZ19sZXZlbCcsCiAgICBkZWZhdWx0XzogMSwKICAgIHZlcmlmeSAodikgewogICAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInICYmIHYgPj0gMCAmJiB2IDw9IDI7CiAgICB9LAogICAgbm9ybWFsaXplOiB0b051bWJlciwKICB9LApdOwpjb25zdCBQQVRDSEVTID0gWwogIGFzeW5jICgpID0+IHsKICAgIGNvbnN0IGFsaWduQ2VudGVyID0gYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLmdldFZhbHVlKCdhbGlnbl9jZW50ZXInKTsKICAgIGNvbnN0IGNoYW5nZUJhY2tncm91bmQgPSBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uZ2V0VmFsdWUoJ2NoYW5nZV9iYWNrZ3JvdW5kJyk7CiAgICBjb25zdCBzY2FsZUltYWdlID0gYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLmdldFZhbHVlKCdzY2FsZV9pbWFnZScpOwogICAgY29uc3QgcmVkaXJlY3RJbWFnZSA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5nZXRWYWx1ZSgncmVkaXJlY3RfaW1hZ2UnKTsKICAgIGNvbnN0IGFjID0gdHlwZW9mIGFsaWduQ2VudGVyID09PSAnYm9vbGVhbic7CiAgICBpZiAodHlwZW9mIGNoYW5nZUJhY2tncm91bmQgIT09ICdib29sZWFuJykgewogICAgICBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uc2V0VmFsdWUoJ2NoYW5nZV9iYWNrZ3JvdW5kJywgYWMgPyBhbGlnbkNlbnRlciA6IHRydWUpOwogICAgfQogICAgaWYgKHR5cGVvZiBzY2FsZUltYWdlICE9PSAnYm9vbGVhbicpIHsKICAgICAgYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLnNldFZhbHVlKCdzY2FsZV9pbWFnZScsIGFjID8gYWxpZ25DZW50ZXIgOiB0cnVlKTsKICAgIH0KICAgIGlmICghYWMpIHsKICAgICAgYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLnNldFZhbHVlKCdhbGlnbl9jZW50ZXInLCB0cnVlKTsKICAgIH0KICAgIGlmICh0eXBlb2YgcmVkaXJlY3RJbWFnZSAhPT0gJ2Jvb2xlYW4nKSB7CiAgICAgIGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5zZXRWYWx1ZSgncmVkaXJlY3RfaW1hZ2UnLCB0cnVlKTsKICAgIH0KICB9LAogIGFzeW5jICgpID0+IHsKICAgIGNvbnN0IGV4dGVybmFsU2VydmVyU3VwcG9ydCA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5nZXRWYWx1ZSgnZXh0ZXJuYWxfc2VydmVyX3N1cHBvcnQnKTsKICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxTZXJ2ZXJTdXBwb3J0ICE9PSAnYm9vbGVhbicpIHsKICAgICAgYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLnNldFZhbHVlKCdleHRlcm5hbF9zZXJ2ZXJfc3VwcG9ydCcsIGZhbHNlKTsKICAgIH0KICB9LAogIGFzeW5jICgpID0+IHsKICAgIGNvbnN0IGxvZ0xldmVsID0gYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLmdldFZhbHVlKCdsb2dfbGV2ZWwnKTsKICAgIGlmICh0eXBlb2YgbG9nTGV2ZWwgIT09ICdudW1iZXInKSB7CiAgICAgIGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5zZXRWYWx1ZSgnbG9nX2xldmVsJywgMSk7CiAgICB9CiAgfSwKICBhc3luYyAoKSA9PiB7CiAgICBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uZGVsZXRlVmFsdWUoJ2V4dGVybmFsX3NlcnZlcl9zdXBwb3J0Jyk7CiAgfSwKXTsKZnVuY3Rpb24gaXNCb29sZWFuICh2KSB7CiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnYm9vbGVhbic7Cn0KZnVuY3Rpb24gdG9Cb29sZWFuICh2KSB7CiAgcmV0dXJuICEhdjsKfQpmdW5jdGlvbiB0b051bWJlciAodikgewogIHJldHVybiBwYXJzZUludCh2LCAxMCk7Cn0KYXN5bmMgZnVuY3Rpb24gc2VuaXR5Q2hlY2sgKCkgewogIGxldCB2ZXJpZnlSZXN1bHRzID0gTUFOSUZFU1QubWFwKGFzeW5jIChkZXNjcmlwdG9yKSA9PiB7CiAgICBjb25zdCBydiA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5nZXRWYWx1ZShkZXNjcmlwdG9yLmtleSk7CiAgICByZXR1cm4gZGVzY3JpcHRvci52ZXJpZnkocnYpOwogIH0pOwogIHZlcmlmeVJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbCh2ZXJpZnlSZXN1bHRzKTsKICBjb25zdCBvayA9IE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZXZlcnkiXSkodmVyaWZ5UmVzdWx0cywgdiA9PiB2KTsKICBpZiAoIW9rKSB7CiAgICBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uc2V0VmFsdWUoJ3ZlcnNpb24nLCAwKTsKICB9Cn0KYXN5bmMgZnVuY3Rpb24gbWlncmF0ZSAoKSB7CiAgbGV0IGN1cnJlbnRWZXJzaW9uID0gYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLmdldFZhbHVlKCd2ZXJzaW9uJyk7CiAgaWYgKGN1cnJlbnRWZXJzaW9uICE9PSAwICYmICFjdXJyZW50VmVyc2lvbikgewogICAgdGhyb3cgbmV3IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJBZHNCeXBhc3NlckVycm9yIl0oJ2ludmFsaWQgdmVyc2lvbicpOwogIH0KICB3aGlsZSAoY3VycmVudFZlcnNpb24gPCBQQVRDSEVTLmxlbmd0aCkgewogICAgUEFUQ0hFU1tjdXJyZW50VmVyc2lvbl0oKTsKICAgICsrY3VycmVudFZlcnNpb247CiAgfQogIGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5zZXRWYWx1ZSgndmVyc2lvbicsIGN1cnJlbnRWZXJzaW9uKTsKfQphc3luYyBmdW5jdGlvbiBsb2FkQ29uZmlnICgpIHsKICBhd2FpdCBzZW5pdHlDaGVjaygpOwogIGF3YWl0IG1pZ3JhdGUoKTsKICBPYmplY3QodXRpbF9kaXNwYXRjaGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bInJlZ2lzdGVyIl0pKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15hZHNieXBhc3NlclwuZ2l0aHViXC5pbyQvLAogICAgICBwYXRoOiAvXlwvY29uZmlndXJlXC5odG1sJC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBhd2FpdCB3YWl0Rm9yUGFnZSgpOwogICAgICB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bInVzdyJdLmNvbW1pdCA9IGFzeW5jIChkYXRhKSA9PiB7CiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHsKICAgICAgICAgIGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5zZXRWYWx1ZShrLCB2KTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1sidXN3Il0ucmVuZGVyKHsKICAgICAgICB2ZXJzaW9uOiBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uZ2V0VmFsdWUoJ3ZlcnNpb24nKSwKICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICBhbGlnbl9jZW50ZXI6IHsKICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JywKICAgICAgICAgICAgdmFsdWU6IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5nZXRWYWx1ZSgnYWxpZ25fY2VudGVyJyksCiAgICAgICAgICAgIGxhYmVsOiAnQWxpZ24gQ2VudGVyJywKICAgICAgICAgICAgaGVscDogJ0FsaWduIGltYWdlIHRvIHRoZSBjZW50ZXIgaWYgcG9zc2libGUuIChkZWZhdWx0OiBlbmFibGVkKScsCiAgICAgICAgICB9LAogICAgICAgICAgY2hhbmdlX2JhY2tncm91bmQ6IHsKICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JywKICAgICAgICAgICAgdmFsdWU6IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5nZXRWYWx1ZSgnY2hhbmdlX2JhY2tncm91bmQnKSwKICAgICAgICAgICAgbGFiZWw6ICdDaGFuZ2UgQmFja2dyb3VuZCcsCiAgICAgICAgICAgIGhlbHA6ICdVc2UgRmlyZWZveC1saWtlIGltYWdlIGJhY2tncm91bmQgaWYgcG9zc2libGUuIChkZWZhdWx0OiBlbmFibGVkKScsCiAgICAgICAgICB9LAogICAgICAgICAgcmVkaXJlY3RfaW1hZ2U6IHsKICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JywKICAgICAgICAgICAgdmFsdWU6IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siR01BUEkiXS5nZXRWYWx1ZSgncmVkaXJlY3RfaW1hZ2UnKSwKICAgICAgICAgICAgbGFiZWw6ICdSZWRpcmVjdCBJbWFnZScsCiAgICAgICAgICAgIGhlbHA6IFsKICAgICAgICAgICAgICAnRGlyZWN0bHkgb3BlbiBpbWFnZSBsaW5rIGlmIHBvc3NpYmxlLiAoZGVmYXVsdDogZW5hYmxlZCknLAogICAgICAgICAgICAgICdJZiBkaXNhYmxlZCwgcmVkaXJlY3Rpb24gd2lsbCBvbmx5IHdvcmtzIG9uIGxpbmsgc2hvcnRlbmVyIHNpdGVzLicsCiAgICAgICAgICAgIF0uam9pbignPGJyLz5cbicpLAogICAgICAgICAgfSwKICAgICAgICAgIHNjYWxlX2ltYWdlOiB7CiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsCiAgICAgICAgICAgIHZhbHVlOiBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uZ2V0VmFsdWUoJ3NjYWxlX2ltYWdlJyksCiAgICAgICAgICAgIGxhYmVsOiAnU2NhbGUgSW1hZ2UnLAogICAgICAgICAgICBoZWxwOiAnV2hlbiBpbWFnZSBsb2FkZWQsIHNjYWxlIGl0IHRvIGZpdCB3aW5kb3cgaWYgcG9zc2libGUuIChkZWZhdWx0OiBlbmFibGVkKScsCiAgICAgICAgICB9LAogICAgICAgICAgbG9nX2xldmVsOiB7CiAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgICAgICB2YWx1ZTogYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJHTUFQSSJdLmdldFZhbHVlKCdsb2dfbGV2ZWwnKSwKICAgICAgICAgICAgbWVudTogWwogICAgICAgICAgICAgIFswLCAnMCAocXVpZXQpJ10sCiAgICAgICAgICAgICAgWzEsICcxIChkZWZhdWx0KSddLAogICAgICAgICAgICAgIFsyLCAnMiAodmVyYm9zZSknXSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgbGFiZWw6ICdMb2cgTGV2ZWwnLAogICAgICAgICAgICBoZWxwOiBbCiAgICAgICAgICAgICAgJ0xvZyBsZXZlbCBpbiBkZXZlbG9wZXIgY29uc29sZS4gKGRlZmF1bHQ6IDEpJywKICAgICAgICAgICAgICAnMCB3aWxsIG5vdCBwcmludCBhbnl0aGluZyBpbiBjb25zb2xlLicsCiAgICAgICAgICAgICAgJzEgd2lsbCBvbmx5IHByaW50IGxvZ3Mgb24gYWZmZWN0ZWQgc2l0ZXMuJywKICAgICAgICAgICAgICAnMiB3aWxsIHByaW50IG9uIGFueSBzaXRlcy4nLAogICAgICAgICAgICBdLmpvaW4oJzxici8+XG4nKSwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgfSk7CiAgICB9LAogIH0pOwp9CmZ1bmN0aW9uIHdhaXRGb3JQYWdlICgpIHsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgIGNvbnN0IGkgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgIGlmICh1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bInVzdyJdLnJlbmRlcikgewogICAgICAgIGNsZWFySW50ZXJ2YWwoaSk7CiAgICAgICAgcmVzb2x2ZSgpOwogICAgICB9CiAgICB9LCA1MCk7CiAgfSk7Cn0KYXN5bmMgZnVuY3Rpb24gZHVtcENvbmZpZyAoKSB7CiAgbGV0IHJ2ID0gTUFOSUZFU1QubWFwKGFzeW5jIChkZXNjcmlwdG9yKSA9PiB7CiAgICByZXR1cm4gW2Rlc2NyaXB0b3Iua2V5LCBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkdNQVBJIl0uZ2V0VmFsdWUoZGVzY3JpcHRvci5rZXkpXTsKICB9KTsKICBydiA9IGF3YWl0IFByb21pc2UuYWxsKHJ2KTsKICBjb25zdCBvID0ge307CiAgZm9yIChjb25zdCBbaywgdl0gb2YgcnYpIHsKICAgIG9ba10gPSB2OwogIH0KICByZXR1cm4gbzsKfQogfSksCiAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJkZWJ1ZyIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZGVidWc7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJpbmZvIiwgZnVuY3Rpb24oKSB7IHJldHVybiBpbmZvOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAid2FybiIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gd2FybjsgfSk7CiB2YXIgdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwpjb25zdCBxdWlldCA9IGZhbHNlOwpmdW5jdGlvbiBsb2cgKG1ldGhvZCwgYXJncykgewogIGlmIChxdWlldCkgewogICAgcmV0dXJuOwogIH0KICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7CiAgaWYgKE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siaXNTdHJpbmciXSkoYXJnc1swXSkpIHsKICAgIGFyZ3NbMF0gPSAnQWRzQnlwYXNzZXI6ICcgKyBhcmdzWzBdOwogIH0gZWxzZSB7CiAgICBhcmdzLnVuc2hpZnQoJ0Fkc0J5cGFzc2VyOicpOwogIH0KICBjb25zdCBmID0gY29uc29sZVttZXRob2RdOwogIGlmICh0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJykgewogICAgZi5hcHBseShjb25zb2xlLCBhcmdzKTsKICB9Cn0KZnVuY3Rpb24gZGVidWcgKCkgewogIGxvZygnZGVidWcnLCBhcmd1bWVudHMpOwp9CmZ1bmN0aW9uIGluZm8gKCkgewogIGxvZygnaW5mbycsIGFyZ3VtZW50cyk7Cn0KZnVuY3Rpb24gd2FybiAoKSB7CiAgbG9nKCd3YXJuJywgYXJndW1lbnRzKTsKfQogfSksCiAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogdmFyIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eYWtvYW1cLm5ldCQvLAogICAgcGF0aDogL15cL2Rvd25sb2FkXC8oW14vXSspXC8vLAogIH0sCiAgYXN5bmMgc3RhcnQgKG0pIHsKICAgIGxldCBkYXRhID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnBvc3QobG9jYXRpb24uaHJlZiwgbS5wYXRoWzFdKTsKICAgIHRyeSB7CiAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FybignSlNPTiBlcnJvcjonLCBlKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGRhdGEuZGlyZWN0X2xpbmspOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT9jb29scm9tXC5jb20kLywKICAgIHBhdGg6IC9eXC9kbHBvcFwucGhwJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBtYXRjaGVzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC88Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iKFteIl0rKSI+Lyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobWF0Y2hlc1sxXSk7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL14od3d3XC4pP2RsLXByb3RlY3RcLmNvbSQvLAogICAgICBwYXRoOiAvXC9bQS1aMC05XSsvLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgaWYgKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjY2FwdGNoYScpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IGYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnZm9ybVtuYW1lPWNjZXJ1cmVdJyk7CiAgICAgIGlmIChmKSB7CiAgICAgICAgY29uc3QgaUluID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2lucHV0W2lkPWluXScpOwogICAgICAgIGlmIChpSW4udmFsdWUpIHsKICAgICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDYwMCk7CiAgICAgICAgICBmLnN1Ym1pdCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBbLCAsIHBdID0gYXdhaXQgd2FpdERPTShpSW4sIHsKICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICAgIH0sIChtdXRhdGlvbikgPT4gewogICAgICAgICAgICBpZiAoIW11dGF0aW9uLnRhcmdldC52YWx1ZSB8fCBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lICE9PSAndmFsdWUnKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ub25lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlJbi52YWx1ZSA9ICdUcmFja2luZyB0b28gbXVjaCBodXJ0cyB1c2Vyc1wnIHByaXZhY3knOwogICAgICAgICAgICBpZiAoIWNhbkZhc3RSZWRpcmVjdCgpKSB7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg2MDApOwogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAocCkgewogICAgICAgICAgICBhd2FpdCBwOwogICAgICAgICAgICBmLnN1Ym1pdCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgbCA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kJCgnI3NsaW5rcyA+IGEnKTsKICAgICAgaWYgKGwubGVuZ3RoID09PSAxKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGxbMF0uaHJlZik7CiAgICAgIH0KICAgIH0sCiAgfSk7CiAgZnVuY3Rpb24gY2FuRmFzdFJlZGlyZWN0ICgpIHsKICAgIHJldHVybiAhX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2Zvcm1bbmFtZT1jY2VydXJlXScpLm9uc3VibWl0ICYmICFfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnZm9ybVtuYW1lPWNjZXJ1cmVdIGlucHV0W25hbWU9cHdkXScpOwogIH0KICBmdW5jdGlvbiB3YWl0RE9NIChlbGVtZW50LCBjb25maWcsIGZuKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7CiAgICAgICAgY29uc3QgW2ssIHYsIHJdID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmZpbmQobXV0YXRpb25zLCBmbik7CiAgICAgICAgaWYgKGsgIT09IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ub25lKSB7CiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgICAgICByZXNvbHZlKFtrLCB2LCByXSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9KTsKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCBjb25maWcpOwogICAgfSk7CiAgfQp9KSgpOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eZWxzZmlsZVwub3JnJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBkb3duID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJyNidG5fZG93bmxvYWQnKTsKICAgIGlmIChkb3duKSB7CiAgICAgIGRvd24uY2xpY2soKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgY291bnRkb3duID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNmcm1kbGNlbnRlcicpOwogICAgY29uc3QgbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHsKICAgICAgY29uc3Qgc3VibWl0ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2lucHV0W3R5cGU9InN1Ym1pdCJdW25hbWU9Im1ldGhvZF9mcmVlIl0nKTsKICAgICAgaWYgKHN1Ym1pdCkgewogICAgICAgIHN1Ym1pdC5jbGljaygpOwogICAgICB9CiAgICB9KTsKICAgIG8ub2JzZXJ2ZShjb3VudGRvd24sIHsKICAgICAgY2hpbGRMaXN0OiB0cnVlCiAgICB9KTsKICAgIGxldCBzY3JpcHQgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoLy4qZXZhbFwoZnVuY3Rpb25cKHAsYSxjLGssZSxkXCkuKi8pOwogICAgaWYgKHNjcmlwdC5sZW5ndGggPiAwKSB7CiAgICAgIHNjcmlwdCA9IHNjcmlwdFswXS5yZXBsYWNlKCd8fGltcG9ydGFudCcsICd8MHxpbXBvcnRhbnQnKTsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmV2aWwoc2NyaXB0KTsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/ZW1iZWR1cGxvYWRcLmNvbSQvLAogICAgcGF0aDogL15cLyQvLAogICAgcXVlcnk6IC9eXD9cd3syfT1cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGRvd25sb2FkUGFnZSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuY2F0ZWdvcmllcyBhW3RhcmdldD1fYmxhbmtdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZG93bmxvYWRQYWdlKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnd3d1wuZmlsZXByb2plY3RcLmNvbVwuYnIkLywKICAgIHBhdGg6IC9eXC9maWxlc1wvKy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBtID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC88YSBpZD0iZG93biIgaHJlZj0iKFteIl0rKSI+Lyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobVsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXih3d3dcLik/aW5kaXNoYXJlXC4ob3JnfG1lKSQvLAogICAgICAvXmJkdXBsb2FkXC4oaW5mb3xhc2lhKSQvLAogICAgICAvXnVwZ3JhbmRcLnNpdGUkLywKICAgICAgL14zemZpbGVcLm5ldCQvLAogICAgICAvXnVwbG9hZHJhclwuY29tJC8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYnRuID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2J1dHRvbiNkb3dubG9hZGJ0bi5kb3dubG9hZGJ0bicpOwogICAgYnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTsKICAgIGJ0bi5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW5zdXJhbmNlLXdhaWZ1XC5jZiQvLAogICAgcXVlcnk6IC91PSguKykkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZm9ybScpOwogICAgY29uc3QgYXJncyA9IHt9OwogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmZvckVhY2goZiwgKHYpID0+IHsKICAgICAgYXJnc1t2Lm5hbWVdID0gdi52YWx1ZTsKICAgIH0pOwogICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucG9zdChmLmdldEF0dHJpYnV0ZSgnYWN0aW9uJyksIGFyZ3MpOwogICAgY29uc3QgbCA9IHJlc3BvbnNlLm1hdGNoKC93aW5kb3dcLmxvY2F0aW9uXC5ocmVmLicoW14nXSspJzsvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/amhlYmVyZ1wubmV0JC8sCiAgICBwYXRoOiAvXlwvY2FwdGNoYVwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuZGwtYnV0dG9uJykuY2xpY2soKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/amhlYmVyZ1wubmV0JC8sCiAgICBwYXRoOiAvXlwvcmVkaXJlY3RcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlQWxsVGltZXIoKTsKICAgIGNvbnN0IG1hdGNoZXMgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoLydzbHVnJzpccyonKFteJ10rKScsXHMqJ2hvc3Rlcic6XHMqJyhbXiddKyknLyk7CiAgICBjb25zdCBzbHVnID0gbWF0Y2hlc1sxXTsKICAgIGNvbnN0IGhvc3RlciA9IG1hdGNoZXNbMl07CiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5wb3N0KCcvZ2V0L2xpbmsvJywgewogICAgICBzbHVnLAogICAgICBob3N0ZXIsCiAgICB9KTsKICAgIGNvbnN0IHJlc3BKU09OID0gSlNPTi5wYXJzZShyZXNwb25zZSk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocmVzcEpTT04udXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXm1pcnJvcmFjZVwuY29tJC8sCiAgICBwYXRoOiAvXlwvbVwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IG1hID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2EudWstYnV0dG9uLnVrLWJ1dHRvbi1sYXJnZS51ay1idXR0b24tcHJpbWFyeScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG1hLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL14od3d3XC4pP21pcnJvcmNyZWF0b3JcLmNvbSQvLAogICAgICAvXih3d3dcLik/bWlycm9yZWRcLnRvJC8sCiAgICBdLAogICAgcGF0aDogL15cL2Rvd25saW5rXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuY29sLXNtLmNlbnRlcmVkLmhpZ2hsaWdodCBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKHd3d1wuKT9taXJyb3JjcmVhdG9yXC5jb20kLywKICAgICAgL14od3d3XC4pP21pcnJvcmVkXC50byQvLAogICAgXSwKICAgIHBhdGg6IC9eXC9maWxlc1wvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjZGxfZm9ybScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICBjb25zdCByZXMgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3Jlc3VsdCcpOwogICAgcmVzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgY29uc3QgbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHsKICAgICAgaWYgKHJlcy5zdHlsZS5kaXNwbGF5ICE9PSAnYmxvY2snKSB7CiAgICAgICAgcmVzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOyAKICAgICAgfQogICAgfSk7CiAgICBvLm9ic2VydmUocmVzLCB7CiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsCiAgICB9KTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDEwMDApOwogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5zdGFydCgpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ebXVsdGlmaWxlbWlycm9yXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IG0gPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2xjb2RlIGZvcm0gYnV0dG9uJyk7CiAgICBtLmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLm11bHRpdXBmaWxlXC5jb20kLywKICAgIHBhdGg6IC9eXC9mXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjeXcwJyk7CiAgICBmLnN1Ym1pdCgpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ebXlsaW5rZ2VuXC5jb20kLywKICAgIHBhdGg6IC9eXC9wXC8oLispJC8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKCcvZy8nICsgbS5wYXRoWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXm15bGlua2dlblwuY29tJC8sCiAgICBwYXRoOiAvXlwvZ1wvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI21haW4tY29udGVudCBhLmJ0bi5idG4tZGVmYXVsdCcpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXm9wZW5sb2FkXC4oY298aW98bGlua3xwdykkLywKICAgICAgL15vcGVubG9lZFwuKGNvKSQvLAogICAgICAvXm9sb2FkXC4oYml6fGNjfGNsb3VkfGNsdWJ8ZG93bmxvYWR8ZnVufGluZm98bGlmZXxsaXZlfG5ldHdvcmt8cHJlc3N8c2VydmljZXN8c2l0ZXxzcGFjZSkkLywKICAgICAgL15vbG9hZFwuKHN0cmVhbXx0dnx3ZWJzaXRlfHdpbikkLywKICAgICAgL15vbGFkYmxvY2tcLihtZXxzZXJ2aWNlc3x4eXopJC8sCiAgICBdLAogICAgcGF0aDogL15cL2ZcLy4qLywKICB9LAogIGFzeW5jIHN0YXJ0ICgpIHsKICAgIGlmIChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LmFkYmxvY2sgIT09IGZhbHNlKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuYWRibG9jayA9IGZhbHNlOwogICAgfQogICAgaWYgKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuYWRibG9jazIgIT09IGZhbHNlKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuYWRibG9jazIgPSBmYWxzZTsKICAgIH0KICAgIGlmIChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LnBvcEFkc0xvYWRlZCAhPT0gdHJ1ZSkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LnBvcEFkc0xvYWRlZCA9IHRydWU7CiAgICB9CiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg1MDApOwogICAgY29uc3QgdGltZXIgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2Rvd25sb2FkVGltZXInKTsKICAgIHRpbWVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICBjb25zdCBkbEN0biA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjcmVhbGRsJyk7CiAgICBkbEN0bi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7CiAgICBjb25zdCBkbEJ0biA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdhJywgZGxDdG4pOwogICAgY29uc3QgZVBhdGggPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI0R0c0Jsa1ZGUXgnKTsKICAgIGRsQnRuLmhyZWYgPSAnL3N0cmVhbS8nICsgZVBhdGgudGV4dENvbnRlbnQ7CiAgICBjb25zdCB2aWRlb0N0biA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcudmlkZW9jb250YWluZXInKTsKICAgIGlmICh2aWRlb0N0bikgewogICAgICBjb25zdCBvdmVybGF5ID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyN2aWRlb292ZXJsYXknLCB2aWRlb0N0bik7CiAgICAgIG92ZXJsYXkuY2xpY2soKTsKICAgICAgZGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7CiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgICAgaWZyYW1lLnNyYyA9IGRsQnRuLmhyZWY7CiAgICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpOwogICAgICB9KTsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmluZm8oYCR7d2luZG93LmxvY2F0aW9ufSAtPiAke2RsQnRuLmhyZWZ9YCk7CiAgICAgIGRsQnRuLmNsaWNrKCk7CiAgICB9IGVsc2UgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZGxCdG4uaHJlZik7CiAgICB9CiAgfQp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/cHV0bG9ja2VyXC5jb20kLywKICAgIHBhdGg6IC9eXC9maWxlXC9bMC05QS1GXSskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGMgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2NvbmZpcm1fZm9ybScpOwogICAgYy5zdWJtaXQoKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnVwbG9hZGhhdmVuXC5jb20kLywKICAgIHBhdGg6IC9eXC9kb3dubG9hZFwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwMDApOwogICAgY29uc3QgZiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuY29udGFjdEZvcm0gI2Rvd25sb2FkTm93QnRuLmJ0bi5idG4tcHJpbWFyeScpOwogICAgZi5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT91cG1pcnJvclwuaW5mbyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNldENvb2tpZSgndXNlcicsICdwcHAnKTsKICAgIGlmIChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI2NvdW50RG93blRleHQnKSkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZG9jdW1lbnQubG9jYXRpb24udG9TdHJpbmcoKSk7CiAgICB9CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3ZpZHRvXC5tZSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjYnRuX2Rvd25sb2FkJykuZm9ybTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDYgKiAxMDAwKTsKICAgIGYuc3VibWl0KCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL156dXBsb2FkXC5tZSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgeiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdidXR0b24jbGlua19idXR0b24nKTsKICAgIHoucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpOwogICAgei5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eMDFcLm5sJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBmID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2lmcmFtZSNyZWRpcmVjdGZyYW1lJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZi5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eMTBjb1wuKGJpenx4eXp8Y298bWUpJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBkID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5nbycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGQuZGF0YXNldC5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/KDFiZXwxZGwpXC5iaXokLywKICAgIHBhdGg6IC9eXC96XC5waHAkLywKICAgIHF1ZXJ5OiAvXlw/KC4rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG0ucXVlcnlbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKDFiZXwxZGwpXC5iaXokLywKICAgIHBhdGg6IC9eXC9banRdXC5waHAkLywKICAgIHF1ZXJ5OiAvXlw/cz0vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuai1saW5rJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXjFpbmtcLihjY3xpbmZvKSQvLAogICAgcGF0aDogL15cL1x3KyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IHVybCA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignW25hbWU9a2V5d29yZHNdJykuY29udGVudDsKICAgIGNvbnN0IHVybENoZWNrID0gdXJsLm1hdGNoKC9eaHR0cHM/OlwvXC8vKTsKICAgIGlmICghdXJsQ2hlY2spIHsKICAgICAgdXJsID0gJ2h0dHA6Ly8nICsgdXJsOwogICAgfQogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pPzF0aW55XC5uZXQkLywKICAgIHBhdGg6IC9cL1x3Ky8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBkaXJlY3RVcmwgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL3dpbmRvd1wubG9jYXRpb249JyhbXiddKyknOy8pOwogICAgaWYgKCFkaXJlY3RVcmwpIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzY3JpcHQgY29udGVudCBjaGFuZ2VkJyk7CiAgICB9CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZGlyZWN0VXJsWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXjF2XC50byQvLAogICAgcGF0aDogL15cL3RcL1thLXpBLVowLTkvPV0rLywKICB9LAogIGFzeW5jIHN0YXJ0ICgpIHsKICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKCcvdC8nLCAnL3NhbGllbmRvLycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHBhdGgpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT80ZnVuXC50dyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjb3JpZ2luYWxfdXJsJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaS52YWx1ZSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15hZDJsaW5rc1wuY29tJC8sCiAgICBwYXRoOiAvXlwvXHctLiskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLCB7CiAgICAgIHBvc3Q6IHsKICAgICAgICBpbWFnZTogJ1NraXAgQWQuJywKICAgICAgfSwKICAgIH0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eYWQ0XC5mciQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICBjb25zdCBzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC8ic3JjIiwgIihbXiJdKykiLyk7CiAgICBpZiAoIXMpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhcm4oJ2NoYW5nZWQnKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHNbMV0pOwogIH0sCn0pOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eYWQ3XC5iaXokLywKICAgICAgcGF0aDogL15cL1xkK1wvKC4qKSQvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0IChtKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgICBsZXQgcmVkaXJlY3RMaW5rID0gbS5wYXRoWzFdOwogICAgICBpZiAoIXJlZGlyZWN0TGluay5tYXRjaCgvXmh0dHBzPzpcL1wvLykpIHsKICAgICAgICByZWRpcmVjdExpbmsgPSAnaHR0cDovLycgKyByZWRpcmVjdExpbms7CiAgICAgIH0KICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHJlZGlyZWN0TGluayk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eYWQ3XC5iaXokLywKICAgICAgcGF0aDogL15cL1x3KyQvLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICAgIGNvbnN0IHNjcmlwdCA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygnY29uc3Qgcl91cmwnKTsKICAgICAgbGV0IHVybCA9IHNjcmlwdC5tYXRjaCgvJnVybD0oW14mXSspLyk7CiAgICAgIHVybCA9IHVybFsxXTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgICB9LAogIH0pOwp9KSgpOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXih3d3dcLik/YWRiXC51ZyQvLAogICAgICAgIC9eKHd3d1wuKT9seW5rXC5teSQvLAogICAgICAgIC9eKHd3d1wuKT9hZHlvdVwuKGNvfG1lKSQvLAogICAgICBdLAogICAgICBwYXRoOiAvXig/IVwvKD86cHJpdmFjeXx0ZXJtc3xjb250YWN0KFwvLiopP3wjLiopPyQpLiokLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgICBjb25zdCBtID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC90b3BcLmxvY2F0aW9uXC5ocmVmPSIoW14iXSspIi8pOwogICAgICBpZiAobSkgewogICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhtWzFdKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgYXJncyA9IGF3YWl0IGdldEFyZ3VtZW50cygpOwogICAgICB0cnlMaW5rKGFyZ3MpOwogICAgfSwKICB9KTsKICBmdW5jdGlvbiBnZXRBcmd1bWVudHMgKCkgewogICAgY29uc3QgUEFUVEVSTiA9IC9ce1xzKl9hcmdzW159XStcfVtefV0rXH0vOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IG0gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoUEFUVEVSTik7CiAgICAgIGlmIChtKSB7CiAgICAgICAgcmVzb2x2ZShtKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7CiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7CiAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHsKICAgICAgICAgICAgaWYgKG5vZGUubG9jYWxOYW1lID09PSAnc2NyaXB0JykgewogICAgICAgICAgICAgIGNvbnN0IG0gPSBub2RlLnRleHRDb250ZW50Lm1hdGNoKFBBVFRFUk4pOwogICAgICAgICAgICAgIGlmIChtKSB7CiAgICAgICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICByZXNvbHZlKG0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgIH0pOwogICAgfSkudGhlbigobSkgPT4gewogICAgICByZXR1cm4gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmV2aWwoYCgke21bMF19KWApOwogICAgfSk7CiAgfQogIGZ1bmN0aW9uIHRyeUxpbmsgKGFyZ3MpIHsKICAgIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICcvc2tpcF90aW1lcic7CiAgICBjb25zdCBpID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucG9zdCh1cmwsIGFyZ3MpLnRoZW4oKHRleHQpID0+IHsKICAgICAgICBjb25zdCBqaiA9IEpTT04ucGFyc2UodGV4dCk7CiAgICAgICAgaWYgKCFqai5lcnJvcnMgJiYgamoubWVzc2FnZXMpIHsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaSk7CiAgICAgICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoamoubWVzc2FnZXMudXJsKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwgMTAwMCk7CiAgfQp9KSgpOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eYWRmXC5seSQvLAogICAgICBwYXRoOiAvXlwvcmVkaXJlY3RpbmdcLyguKykkLywKICAgIH0sCiAgICBhc3luYyBzdGFydCAobSkgewogICAgICBjb25zdCB1cmwgPSBhdG9iKG0ucGF0aFsxXSk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh1cmwpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBwYXRoOiAvXC9sb2NrZWQkLywKICAgICAgcXVlcnk6IC91cmw9KFteJl0rKS8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKG0pIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlc2V0Q29va2llcygpOwogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2V0Q29va2llKCdGTFlTRVNTSUQnLCBnZW5lcmF0ZVJhbmRvbVNlc3Npb25Db29raWUoNDApKTsKICAgICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KG0ucXVlcnlbMV0pOwogICAgICBpZiAodXJsLm1hdGNoKC9eaHR0cC8pKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGRvY3VtZW50LnJlZmVycmVyKTsKICAgICAgfQogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBwYXRoOiAvcHVzaHJlZGlyZWN0LywKICAgICAgcXVlcnk6IC8uKmRlc3Q9KFteJl0rKS8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKG0pIHsKICAgICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KG0ucXVlcnlbMV0pOwogICAgICBpZiAodXJsLm1hdGNoKC9eaHR0cC8pKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgICAgIH0KICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgcXVlcnk6IC9scD1hZGZseV9hbGxvdyYuKmhyZWY9KFteJl0rKS8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKG0pIHsKICAgICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KG0ucXVlcnlbMV0pOwogICAgICBpZiAodXJsLm1hdGNoKC9eaHR0cC8pKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgICAgIH0KICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGUgKCkgewogICAgICBjb25zdCBoID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2h0bWxbaWQ9Im1haW5faHRtbCJdJyk7CiAgICAgIGlmIChoKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCiAgICBhc3luYyBzdGFydCAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuZG9jdW1lbnQud3JpdGUgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9wOwogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LmJ0b2EgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9wOwogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZXRDb29raWUoJ0ZMWVNFU1NJRCcsIGdlbmVyYXRlUmFuZG9tU2Vzc2lvbkNvb2tpZSg0MCkpOwogICAgICBjb25zdCBjbG9zZSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCdkaXZbb25jbGljaz0iY2xvc2VfYmFyKCk7Il0nKTsKICAgICAgaWYgKGNsb3NlKSB7CiAgICAgICAgY2xvc2UuY2xpY2soKTsKICAgICAgfQogICAgICBsZXQgcnYgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uZ2V0KGxvY2F0aW9uLmhyZWYsICcnLCB7CiAgICAgICAgJ09yaWdpbic6IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ub25lLAogICAgICAgICdSZWZlcmVyJzogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLm5vbmUsCiAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9uZSwKICAgICAgfSk7CiAgICAgIHJ2ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnRvRE9NKHJ2KTsKICAgICAgcnYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL3ZhciB5c21tID0gJyhbXiddKyknLywgcnYpOwogICAgICBydiA9IHJ2WzFdOwogICAgICBydiA9IGRlY29kZVRva2VuKHJ2KTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHJ2KTsKICAgIH0sCiAgfSk7CiAgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21TZXNzaW9uQ29va2llIChsZW5ndGgpIHsKICAgIGNvbnN0IHJ2ID0gW107CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIHJ2LnB1c2goTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuY2hhckF0KDIpKTsKICAgIH0KICAgIHJldHVybiBydi5qb2luKCcnKTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlVG9rZW4gKHRva2VuKSB7CiAgICBsZXQgYSA9ICcnOwogICAgbGV0IGIgPSAnJzsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyArK2kpIHsKICAgICAgaWYgKGkgJSAyID09PSAwKSB7CiAgICAgICAgYSA9IGEgKyB0b2tlbi5jaGFyQXQoaSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYiA9IHRva2VuLmNoYXJBdChpKSArIGI7CiAgICAgIH0KICAgIH0KICAgIHRva2VuID0gYSArIGI7CiAgICBhID0gdG9rZW4uc3BsaXQoJycpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7CiAgICAgIGlmICgvXGQvLnRlc3QoYVtpXSkpIHsKICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBhLmxlbmd0aDsgKytqKSB7CiAgICAgICAgICBpZiAoL1xkLy50ZXN0KGFbal0pKSB7CiAgICAgICAgICAgIGIgPSBhW2ldIF4gYVtqXTsKICAgICAgICAgICAgaWYgKGIgPCAxMCkgewogICAgICAgICAgICAgIGFbaV0gPSBiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBqOwogICAgICAgICAgICBqID0gYS5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICB0b2tlbiA9IGEuam9pbignJyk7CiAgICB0b2tlbiA9IGF0b2IodG9rZW4pOwogICAgdG9rZW4gPSB0b2tlbi5zdWJzdHJpbmcoMTYpOwogICAgdG9rZW4gPSB0b2tlbi5zdWJzdHJpbmcoMCwgdG9rZW4ubGVuZ3RoIC0gMTYpOwogICAgaWYgKGxvY2F0aW9uLmhhc2gpIHsKICAgICAgdG9rZW4gKz0gbG9jYXRpb24uaGFzaDsKICAgIH0KICAgIHJldHVybiB0b2tlbjsKICB9Cn0pKCk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9hZGZvYy51cy8qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmJvZHk7CiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4gewogICAgICAgIGxldCBvID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJyNzaG93U2tpcCcpOwogICAgICAgIGlmIChvKSB7CiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgICAgICBvID0gby5xdWVyeVNlbGVjdG9yKCdhJyk7CiAgICAgICAgICByZXNvbHZlKG8uaHJlZik7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShyb290LCB7CiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICAgIHN1YnRyZWU6IHRydWUsCiAgICAgIH0pOwogICAgfSk7CiAgICBjb25zdCB1cmwgPSBhd2FpdCBwcm9taXNlOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP2FkbG90XC51cyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICBjb25zdCBzY3JpcHQgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoJ2Zvcm0nKTsKICAgIGNvbnN0IHAgPSAvbmFtZT0nKFteJ10rKScgdmFsdWU9JyhbXiddKyknL2c7CiAgICBjb25zdCBvcHQgPSB7CiAgICAgIGltYWdlOiAnICcsCiAgICB9OwogICAgbGV0IHRtcCA9IG51bGw7CiAgICB3aGlsZSAoKHRtcCA9IHAuZXhlYyhzY3JpcHQpKSkgewogICAgICBvcHRbdG1wWzFdXSA9IHRtcFsyXTsKICAgIH0KICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluaygnJywgewogICAgICBwYXRoOiBvcHQsCiAgICB9KTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmFkbXlcLmxpbmskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZm9ybS5lZGl0X2xpbmsnKTsKICAgIGYuc3VibWl0KCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP2FoLWluZm9ybWF0aXF1ZVwuY29tJC8sCiAgICBwYXRoOiAvXlwvWmlwVXJsLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3ppcDMgYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15haFwucGUkLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGxldCBzY3JpcHQgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoJ2V2YWwnKTsKICAgICAgc2NyaXB0ID0gZGVjb2RlU2NyaXB0KHNjcmlwdCk7CiAgICAgIHNjcmlwdCA9IGRlY29kZVNjcmlwdChzY3JpcHQpOwogICAgICBzY3JpcHQgPSBkZWNvZGVTY3JpcHQoc2NyaXB0KTsKICAgICAgbGV0IHBhdGggPSBzY3JpcHQubWF0Y2goLyhbXjs9IF0rKT0oW14rIDtdKylcKyJcLiJcKyhbXisgXSspXCsiXC4iXCsoW147IF0rKTsvKTsKICAgICAgaWYgKCFwYXRoKSB7CiAgICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzY3JpcHQgY2hhbmdlZCcpOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvd1twYXRoWzJdXSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uaW5mbygncmVjYXB0Y2hhJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHBhdGggPSBbX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvd1twYXRoWzJdXSwgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvd1twYXRoWzNdXSwgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvd1twYXRoWzRdXV0uam9pbignLicpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgICB9LAogIH0pOwogIGZ1bmN0aW9uIGRlY29kZVNjcmlwdCAoZW5jb2RlZCkgewogICAgbGV0IGEgPSBlbmNvZGVkLm1hdGNoKC9eXHMqO2V2YWxcKCguKylcKTtccyokLyk7CiAgICBhID0gYVsxXTsKICAgIGNvbnN0IGIgPSBhLm1hdGNoKC9eKC4rKVwoJyhbXiddKyknLCcoW14nXSspJywnKFteJ10rKScsJyhbXiddKyknXCkkLyk7CiAgICBjb25zdCBjID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmV2aWwoYCgke2JbMV19KWApOwogICAgcmV0dXJuIGMoYlsyXSwgYlszXSwgYls0XSwgYls1XSk7CiAgfQp9KSgpOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eYWthXC5nciQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdpZnJhbWUjeW91cmxzLWZyYW1lJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobC5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15hbFwubHkkLywKICAgICAgL15hbGx5XC5zaCQvLAogICAgICAvXmFsbHlcLnNob3J0ZW5zXC5jbyQvLAogICAgICAvXihkYXVzZWx8b25sZSlcLmNvJC8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI2h0bWxfZWxlbWVudCcpOwogICAgaWYgKGkpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnI21lc3NhJyk7CiAgICAgIGkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoLyJocmVmIiwiKFteIl0rKSIgXCsgaGFzaFwpXC5yZW1vdmUvKTsKICAgIGlmICghaSkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2Fybignc2l0ZSBjaGFuZ2VkJyk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGkgPSBpWzFdICsgbG9jYXRpb24uaGFzaDsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhpKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKHd3d1wuKT9hbGxrZXlzaG9wXC5jb20kLywKICAgICAgL15jc2hvcnRcLm9yZyQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBtYXRjaGVzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC93aW5kb3dcLmxvY2F0aW9uXC5ocmVmID0gIihbXiJdKykiLyk7CiAgICBtYXRjaGVzID0gbWF0Y2hlc1sxXTsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5udWtlKG1hdGNoZXMpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG1hdGNoZXMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eYXBrbW9kaWZcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdbbmFtZT0iZ2V0dXJsIl0nKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYSk7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgY29uc3QgYWpheFBhdHRlcm4gPSAvXCQucG9zdFwoJyhbXiddKiknW157XSsoXHtccypvcHQ6XHMqJ21ha2VfbG9nJ1tefV0rXH1ccypcfSksL2k7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15iY1wudmMkLywKICAgICAgcGF0aDogL14uKyhodHRwcz86XC9cLy4rKSQvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0IChtKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhtLnBhdGhbMV0gKyBkb2N1bWVudC5sb2NhdGlvbi5zZWFyY2ggKyBkb2N1bWVudC5sb2NhdGlvbi5oYXNoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15iY1wudmMkLywKICAgICAgcGF0aDogL15cLy4rLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgICBjb25zdCB0b2tlbiA9IGZpbmRBSkFYVG9rZW4oKTsKICAgICAgY29uc3QgdGltZSA9IGZha2VBSkFYVG9rZW4oKTsKICAgICAgY29uc3QgdXJsID0gYC9mbHkvYWpheC5waHA/d2RzPSR7dG9rZW4ud2RzfSZ0aW1lPSR7dGltZX1gOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg1MDAwKTsKICAgICAgbGV0IHJ2ID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnBvc3QodXJsLCB7CiAgICAgICAgeGRmOiB7CiAgICAgICAgICBhZmc6IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cudFosCiAgICAgICAgICBiZmc6IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuY1csCiAgICAgICAgICBjZmc6IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuY0gsCiAgICAgICAgICBqa2k6IHRva2VuLmpraSwKICAgICAgICAgIGRmZzogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5zVywKICAgICAgICAgIGVmZzogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5zSCwKICAgICAgICB9LAogICAgICAgIG9qazogdG9rZW4ub2prLAogICAgICB9KTsKICAgICAgcnYgPSBKU09OLnBhcnNlKHJ2KTsKICAgICAgaWYgKHJ2LmVycm9yKSB7CiAgICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdhdXRoIGVycm9yJyk7CiAgICAgIH0KICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHJ2Lm1lc3NhZ2UudXJsKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogWwogICAgICAgIC9ebXlsaW5rXC51cyQvLAogICAgICAgIC9eeGFmb3hcLmNvbSQvLAogICAgICAgIC9eenBvelwubmV0JC8sCiAgICAgICAgL153d3dcLmFkamV0XC5ldSQvLAogICAgICBdLAogICAgICBwYXRoOiAvXlwvLisvLAogICAgfSwKICAgIHJlYWR5OiBydW4sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL155c2VhclwuY2gkLywKICAgICAgcGF0aDogL15cLy4rLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGEgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnZGl2LmZseV9oZWFkIGEuY2xvc2UnKTsKICAgICAgY29uc3QgZiA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCdpZnJhbWUuZmx5X2ZyYW1lJyk7CiAgICAgIGlmIChhICYmIGYpIHsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZi5zcmMpOwogICAgICB9IGVsc2UgewogICAgICAgIGF3YWl0IHJ1bigpOwogICAgICB9CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eYWQ1XC5ldSQvLAogICAgICBwYXRoOiAvXlwvW14uXSskLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgICBjb25zdCBzID0gc2VhcmNoU2NyaXB0KHRydWUpOwogICAgICBsZXQgbSA9IHMuc2NyaXB0Lm1hdGNoKC8oPGZvcm0gbmFtZT0iZm9ybTEibWV0aG9kPSJwb3N0Ii4qKD8hPFxcZm9ybT4pPFwvZm9ybT4pLyk7CiAgICAgIGlmICghbSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBtID0gbVsxXTsKICAgICAgY29uc3QgdHogPSAtKG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwKTsKICAgICAgbSA9IG0ucmVwbGFjZSgnXCcrdGltZXpvbmUrXCcnLCB0eik7CiAgICAgIGNvbnN0IGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgZC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ0Fkc0J5cGFzc2VyRlRXJyk7CiAgICAgIGQuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5Om5vbmU7Jyk7CiAgICAgIGQuaW5uZXJIVE1MID0gbTsKICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkKTsKICAgICAgT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNBZHNCeXBhc3NlckZUVyA+IGZvcm1bbmFtZT1mb3JtMV0nKS5zdWJtaXQoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL150cjVcLmluJC8sCiAgICAgIHBhdGg6IC9eXC8uKy8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBhd2FpdCBydW4odHJ1ZSk7CiAgICB9LAogIH0pOwogIGZ1bmN0aW9uIGRlY29tcHJlc3MgKHNjcmlwdCwgdW56aXApIHsKICAgIGlmICghdW56aXApIHsKICAgICAgcmV0dXJuIHNjcmlwdDsKICAgIH0KICAgIGxldCBtYXRjaGVzID0gc2NyaXB0Lm1hdGNoKC9ldmFsKC4qKS8pOwogICAgaWYgKCFtYXRjaGVzKSB7CiAgICAgIHRocm93IG5ldyBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uQWRzQnlwYXNzZXJFcnJvcignbm8gc2NyaXB0IG1hdGNoZXMgL2V2YWwoLiopLycpOwogICAgfQogICAgbWF0Y2hlcyA9IG1hdGNoZXNbMV07CiAgICBzY3JpcHQgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uZXZpbChtYXRjaGVzKTsKICAgIHJldHVybiBzY3JpcHQ7CiAgfQogIGZ1bmN0aW9uIHNlYXJjaFNjcmlwdCAodW56aXApIHsKICAgIGxldCBjb250ZW50ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKCdtYWtlX2xvZycpOwogICAgaWYgKGNvbnRlbnQpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBkaXJlY3Q6IGZhbHNlLAogICAgICAgIHNjcmlwdDogZGVjb21wcmVzcyhjb250ZW50LCB1bnppcCksCiAgICAgIH07CiAgICB9CiAgICBjb250ZW50ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKCdjbGlja19sb2cnKTsKICAgIGlmIChjb250ZW50KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGlyZWN0OiB0cnVlLAogICAgICAgIHNjcmlwdDogZGVjb21wcmVzcyhjb250ZW50LCB1bnppcCksCiAgICAgIH07CiAgICB9CiAgICB0aHJvdyBuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IoJ3NjcmlwdCBjaGFuZ2VkJyk7CiAgfQogIGZ1bmN0aW9uIGtub2NrU2VydmVyIChzY3JpcHQsIGRpcnR5Rml4KSB7CiAgICBjb25zdCBtYXRjaGVzID0gc2NyaXB0Lm1hdGNoKGFqYXhQYXR0ZXJuKTsKICAgIGlmICghbWF0Y2hlcykgewogICAgICB0aHJvdyBuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IoJyhpbiBrbm9jayBzZXJ2ZXIpIG5vIHNjcmlwdCBtYXRjaGVzICQucG9zdCcpOwogICAgfQogICAgY29uc3QgbWFrZV91cmwgPSBtYXRjaGVzWzFdOwogICAgY29uc3QgbWFrZV9vcHRzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmV2aWwoYCgke21hdGNoZXNbMl19KWApOwogICAgY29uc3QgaSA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnBvc3QobWFrZV91cmwsIG1ha2Vfb3B0cykudGhlbihmdW5jdGlvbiAodGV4dCkgewogICAgICAgIGlmIChkaXJ0eUZpeCkgewogICAgICAgICAgdGV4dCA9IHRleHQubWF0Y2goL1x7LitcfS8pWzBdOwogICAgICAgIH0KICAgICAgICBjb25zdCBqaiA9IEpTT04ucGFyc2UodGV4dCk7CiAgICAgICAgaWYgKGpqLm1lc3NhZ2UpIHsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaSk7CiAgICAgICAgICByZXR1cm4gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGpqLm1lc3NhZ2UudXJsKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwgMTAwMCk7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIHJ1biAoZGlydHlGaXgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgbGV0IHJlc3VsdCA9IHNlYXJjaFNjcmlwdCh0cnVlKTsKICAgIGlmICghcmVzdWx0LmRpcmVjdCkgewogICAgICBrbm9ja1NlcnZlcihyZXN1bHQuc2NyaXB0LGRpcnR5Rml4KTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdCA9IHJlc3VsdC5zY3JpcHQubWF0Y2goL3RvcFwubG9jYXRpb25cLmhyZWY9JyhbXiddKyknLyk7CiAgICAgIGlmICghcmVzdWx0KSB7CiAgICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzY3JpcHQgY2hhbmdlZCcpOwogICAgICB9CiAgICAgIHJlc3VsdCA9IHJlc3VsdFsxXTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHJlc3VsdCk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGZpbmRBSkFYVG9rZW4gKCkgewogICAgY29uc3QgcnYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoJy9mbHkvYWpheC5waHAnKTsKICAgIGlmICghcnYpIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzY3JpcHQgY2hhbmdlZCcpOwogICAgfQogICAgbGV0IHdkcyA9IHJ2Lm1hdGNoKC9cP3dkcz0oW14mXSspLyk7CiAgICBpZiAoIXdkcykgewogICAgICB0aHJvdyBuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IoJ3NjcmlwdCBjaGFuZ2VkJyk7CiAgICB9CiAgICB3ZHMgPSB3ZHNbMV07CiAgICBsZXQgamtpID0gcnYubWF0Y2goL2praTpccyonKFteJ10rKScvKTsKICAgIGlmICghamtpKSB7CiAgICAgIHRocm93IG5ldyBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uQWRzQnlwYXNzZXJFcnJvcignc2NyaXB0IGNoYW5nZWQnKTsKICAgIH0KICAgIGpraSA9IGpraVsxXTsKICAgIGxldCBvamsgPSBydi5tYXRjaCgvb2prOlxzKicoW14nXSspJy8pOwogICAgaWYgKCFvamspIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzY3JpcHQgY2hhbmdlZCcpOwogICAgfQogICAgb2prID0gb2prWzFdOwogICAgcmV0dXJuIHsKICAgICAgd2RzOiB3ZHMsCiAgICAgIGpraTogamtpLAogICAgICBvams6IG9qaywKICAgIH07CiAgfQogIGZ1bmN0aW9uIGZha2VBSkFYVG9rZW4gKCkgewogICAgY29uc3Qgc2tpcEFkID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2Rpdi5mbHlfaGVhZCBzcGFuI3JlZGlyZWN0aW4nKS5wYXJlbnRFbGVtZW50OwogICAgY29uc3QgbWFyZ2luID0gNjsKICAgIGNvbnN0IGZha2VQYWdlWCA9IHNraXBBZC5vZmZzZXRMZWZ0ICsgbWFyZ2luICsgNTAgKyAoTWF0aC5yYW5kb20oKSAqIDEwKTsKICAgIGNvbnN0IGZha2VQYWdlWSA9IHNraXBBZC5vZmZzZXRUb3AgKyBtYXJnaW4gKyAxNSArIChNYXRoLnJhbmRvbSgpICogMSk7CiAgICBjb25zdCBwbyA9IGZha2VQYWdlWCArICcsJyArIGZha2VQYWdlWTsKICAgIGNvbnN0IHBvc1ggPSBqUXVlcnlPZmZzZXQoc2tpcEFkKS5sZWZ0ICsgbWFyZ2luOwogICAgY29uc3QgcG9zWSA9IGpRdWVyeU9mZnNldChza2lwQWQpLnRvcCArIG1hcmdpbjsKICAgIGNvbnN0IHBvcyA9IChmYWtlUGFnZVggLSBwb3NYKSArICcsJyArIChmYWtlUGFnZVkgLSBwb3NZKTsKICAgIGNvbnN0IHRzdGFfID0gTWF0aC5mbG9vcigoNSArIE1hdGgucmFuZG9tKCkpICogMTAwMCk7CiAgICBjb25zdCB0aW1lID0gcG8gKyAnOicgKyBwb3MgKyAnOicgKyB0c3RhXzsKICAgIHJldHVybiB0aW1lOwogIH0KICBmdW5jdGlvbiBqUXVlcnlPZmZzZXQgKGVsZW1lbnQpIHsKICAgIGNvbnN0IHIgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgcmV0dXJuIHsKICAgICAgdG9wOiByLnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLAogICAgICBsZWZ0OiByLmxlZnQgKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsCiAgICB9OwogIH0KfSkoKTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/YmlnbGlzdG9md2Vic2l0ZXNcLmNvbSQvLAogICAgcGF0aDogL15cL2dvXC8oXHcrXC5cdyspJC8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKCdodHRwOi8vJyArIG0ucGF0aFsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly93d3cuYmlsZC5tZS9iaWxkLnBocD9maWxlPSonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI0JpbGQnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhpLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9iaWxkci5uby92aWV3LyonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaW1nLmJpbGRlJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IFsKICAgIHsKICAgICAgaG9zdDogL14od3d3XC4pPyhbYS16QS1aMC05XStcLik/YmluYm94XC5pbyQvLAogICAgICBwYXRoOiAvXC9vXC8oW2EtekEtWjAtOV0rKS8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXmdzbXpvbmVcLnNpdGUkLywKICAgICAgcGF0aDogL1wvZ29cLyhbYS16QS1aMC05XSspLywKICAgIH0sCiAgXSwKICBhc3luYyBzdGFydCAobSkgewogICAgY29uc3QgZGlyZWN0X2xpbmsgPSB3aW5kb3cuYXRvYihtLnBhdGhbMV0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGRpcmVjdF9saW5rKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmJsb2dcLmxhbmd3XC53ZWJcLmlkJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5nZXRDb29raWUoJ3dwYl92aXNpdF90aW1lJykpKTsKICAgIGlmICh1cmwubWF0Y2goL15odHRwLykpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlc2V0Q29va2llcygpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmJsdWVtZWRpYWZpbGVzXC5jb20kLywKICAgIHBhdGg6IC9eXC9jcmVhdGluZ2xpbmtzLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGIgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL0ZpbmlzaE1lc3NhZ2UgPSAnPGEgaHJlZj0iKFteIl0rKSIgPi8pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGJbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eY2F0Y3V0XC5uZXQkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBhID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9kZWNvZGVVUklDb21wb25lbnRcKCcoW14nXSspJ1wpLyk7CiAgICBhID0gZGVjb2RlVVJJQ29tcG9uZW50KGFbMV0pOwogICAgYSA9IG5ldyBVUkwoYSk7CiAgICBhID0gYS5zZWFyY2hQYXJhbXMuZ2V0KCdhJyk7CiAgICBhID0gYXRvYihhKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/Y2xpXC5ncyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdhLlJlZGlyZWN0TGluaycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15jbGtcLmltJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgIGNvbnN0IG1hdGNoZXMgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL1wkXCgiXC5jb3VudGRvd24iXClcLmF0dHJcKCJocmVmIiwiKFteIl0rKSJcKS8pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG1hdGNoZXNbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eY29jb2xlZWNoXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLmJ0bi5idG4tYmxvY2suYnRuLXN1Y2Nlc3MnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhLmhyZWYpOwogIH0sCn0pOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXihjb2VnfGRpc2luZ2thdClcLmluJC8sCiAgICAgICAgL153d3dcLih0ZWxvbmRhc211fHNpb3Rvbmd8c2loZXJwKVwuY29tJC8sCiAgICAgICAgL153d3dcLmdyZWdldFwuc3BhY2UkLywKICAgICAgXSwKICAgICAgcGF0aDogL15cLy4rJC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKG0pIHsKICAgICAgY29uc3QgbWFwcGVyID0gaG9zdE1hcHBlcihtLmhvc3RbMF0pOwogICAgICBjb25zdCBiNjQgPSBtYXBwZXIoKS5tYXRjaCgvXD9yPShbXHcvXSs9ezAsMn0pLyk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhdG9iKGI2NFsxXSkpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXnNpcGt1clwubmV0JC8sCiAgICAgIHBhdGg6IFsKICAgICAgICAvXlwvXHcrJC8sCiAgICAgICAgL15cL21lbnVqdWxpbmtcLy8sCiAgICAgIF0sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBsZXQgZCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjdGVzdGFwayA+IGRpdicpOwogICAgICBkID0gZC5vbmNsaWNrLnRvU3RyaW5nKCk7CiAgICAgIGQgPSBkLm1hdGNoKC93aW5kb3dcLm9wZW5cKCcoW14nXSspJy8pOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZFsxXSk7CiAgICB9LAogIH0pOwogIGZ1bmN0aW9uIGhvc3RNYXBwZXIgKGhvc3QpIHsKICAgIHN3aXRjaCAoaG9zdCkgewogICAgY2FzZSAnZGlzaW5na2F0LmluJzoKICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2EuYnRuLWJsb2NrLnJlZGlyZWN0Jyk7CiAgICAgICAgcmV0dXJuIGEuaHJlZjsKICAgICAgfTsKICAgIGNhc2UgJ2NvZWcuaW4nOgogICAgY2FzZSAnd3d3LnRlbG9uZGFzbXUuY29tJzoKICAgIGNhc2UgJ3d3dy5zaW90b25nLmNvbSc6CiAgICBjYXNlICd3d3cuc2loZXJwLmNvbSc6CiAgICBjYXNlICd3d3cuZ3JlZ2V0LnNwYWNlJzoKICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5kb3dubG9hZC1saW5rIGEnKTsKICAgICAgICByZXR1cm4gYS5ocmVmOwogICAgICB9OwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfQp9KSgpOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL14oPzooXHcrKVwuKT9jb2ludXJsXC5jb20kLywKICAgICAgL14oPzooXHcrKVwuKT9jdXJcLmx2JC8sCiAgICBdLAogICAgcGF0aDogL15cLyhbLVx3XSspJC8sCiAgfSwKICBhc3luYyByZWFkeSAobSkgewogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICBjb25zdCBob3N0ID0gJ2h0dHA6Ly9jdXIubHYvcmVkaXJlY3RfY3VybHYucGhwJzsKICAgIGNvbnN0IHBhcmFtID0gbS5ob3N0WzFdID09PSB1bmRlZmluZWQgPyB7CiAgICAgIGNvZGU6IG0ucGF0aFsxXSwKICAgIH0gOiB7CiAgICAgIHpvbmU6IG0uaG9zdFsxXSwKICAgICAgbmFtZTogbS5wYXRoWzFdLAogICAgfTsKICAgIGNvbnN0IG1haW5GcmFtZUNvbnRlbnQgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uZ2V0KGhvc3QsIHBhcmFtKTsKICAgIGxldCBkb2NNYWluRnJhbWUgPSBudWxsOwogICAgdHJ5IHsKICAgICAgZG9jTWFpbkZyYW1lID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnRvRE9NKG1haW5GcmFtZUNvbnRlbnQpOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IoJ21haW4gZnJhbWUgY2hhbmdlZCcpOwogICAgfQogICAgY29uc3QgckV4dHJhY3RMaW5rID0gL29uY2xpY2s9Im9wZW5fdXJsXCgnKFteJ10rKScsXHMqJ2dvJ1wpLzsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5mb3JFYWNoKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kJCgnaWZyYW1lJywgZG9jTWFpbkZyYW1lKSwgKGN1cnJGcmFtZSkgPT4gewogICAgICBjb25zdCBjdXJyRnJhbWVBZGRyID0gY3VyckZyYW1lLmdldEF0dHJpYnV0ZSgnc3JjJyk7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5nZXQoY3VyckZyYW1lQWRkcikudGhlbigoY3VyckZyYW1lQ29udGVudCkgPT4gewogICAgICAgIGNvbnN0IGFSZWFsTGluayA9IHJFeHRyYWN0TGluay5leGVjKGN1cnJGcmFtZUNvbnRlbnQpOwogICAgICAgIGlmIChhUmVhbExpbmsgPT09IHVuZGVmaW5lZCB8fCBhUmVhbExpbmtbMV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCByZWFsTGluayA9IGFSZWFsTGlua1sxXTsKICAgICAgICByZXR1cm4gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHJlYWxMaW5rKTsKICAgICAgfSk7CiAgICB9KTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmNvbXlvbmV0XC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGlucHV0ID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2lucHV0W25hbWU9ImVudGVyIl0nKTsKICAgIGlucHV0LmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15jcm9ja29saW5rc1wuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBjID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5oZWFkID4gZGl2Om50aC1jaGlsZCgzKSA+IC5za2lwJyk7CiAgICBjLmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15kYXduc3RhdGlvblwuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyN0aWRha2FrYW5zZWxhbWFueWEgPiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmR1cmxcLm1lJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2FbY2xhc3M9InByb2NlZWRCdG4iXScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXmVhc3l1cmxcLm5ldCQvLAogICAgICAvXihhdHV8Y2xpY2t0aHJ1fHJlZGlyZWN0c3xyZWFkdGhpcylcLmNhJC8sCiAgICAgIC9eZ29zaHJpbmtcLmNvbSQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZnJhbWVbbmFtZT1tYWluXScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGYuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKHd3d1wuKT9zaGlua1wubWUkLywKICAgICAgL14oc2hvbnxsaWtuKVwueHl6JC8sCiAgICAgIC9eZmFzXC5saSQvLAogICAgICAvXih3d3dcLik/Y3JvY29cLihtZXxzaXRlKSQvLAogICAgICAvXmNwbWxpbmtcLm5ldCQvLAogICAgXSwKICAgIHBhdGg6IC9eXC9bXHctXSskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGlmICghX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJyNjYXB0Y2hhJykpIHsKICAgICAgbGV0IGYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI3NraXAnKTsKICAgICAgaWYgKGYpIHsKICAgICAgICBmLnN1Ym1pdCgpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBmID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNidG4tbWFpbicpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZi5ocmVmKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnZGl2W2NsYXNzJD1PdmVybGF5XScpOwogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLmJsb2NrKChub2RlKSA9PiB7CiAgICAgIGlmIChub2RlLmNsYXNzTmFtZS5tYXRjaCgvT3ZlcmxheSQvKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGlmIChub2RlLmxvY2FsTmFtZSA9PT0gJ2RpdicpIHsKICAgICAgICByZXR1cm4gWwogICAgICAgICAgJzIxNDc0ODM2NDcnLAogICAgICAgICAgJzInLAogICAgICAgIF0uc29tZSgoeikgPT4gewogICAgICAgICAgcmV0dXJuIHogPT09IG5vZGUuc3R5bGUuekluZGV4OwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sIGRvY3VtZW50LmJvZHkpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IFsKICAgIHsKICAgICAgaG9zdDogL15jcG1saW5rXC5uZXQkLywKICAgICAgcGF0aDogL15cL2dvXC9bXHctXSskLywKICAgIH0sCiAgICB7CiAgICAgIGhvc3Q6IC9eKHd3d1wuKT9jcm9jb1wuKG1lfHNpdGUpJC8sCiAgICAgIHBhdGg6IC9eXC9va1wvXHcrJC8sCiAgICB9LAogIF0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2J0bi1tYWluJyk7CiAgICBjb25zdCBpID0gYS5ocmVmLmxhc3RJbmRleE9mKCdodHRwJyk7CiAgICBhID0gYS5ocmVmLnN1YnN0cihpKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eZmFzXC5saSQvLAogICAgICAvXih3d3dcLik/c2hpbmtcLm1lJC8sCiAgICBdLAogICAgcGF0aDogL15cL2dvXC9cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3NraXAnKTsKICAgIGYuc3VibWl0KCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15maWxlbWVkaWFcLm5ldCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3Qgc2NyaXB0ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC93aW5kb3cubG9jYXRpb24uaHJlZlxzPz1ccz9cKCIoaHR0cC4rPykiXCkvKTsKICAgIGlmIChzY3JpcHQubGVuZ3RoID4gMSkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoc2NyaXB0WzFdKTsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/Zmlsb29wc1wuaW5mbyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjdGV4dCA+IGNlbnRlciBhLCAjdGV4dCA+IGRpdlthbGlnbj1jZW50ZXJdIGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d3xsaW5rcylcLmZpdXh5XC4oY298YnopJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2EuYnRuLmEnKS5ocmVmKTsKICB9Cn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eZ2FtZW1vZFwucHJvJC8sCiAgICBwYXRoOiAvXlwvZG93bmxvYWQtZmlsZVwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGdwID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyN3YWl0LWRvbmUgPiBwID4gYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGdwLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eZ2t1cmxcLnVzJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpZnJhbWUgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2drdXJsLWZyYW1lJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaWZyYW1lLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15nb3RvXC5sb25jYXRcLmluJC8sCiAgICBxdWVyeTogL29wZW49KC4rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgY29uc3QgdXJsID0gYXRvYihhdG9iKG0ucXVlcnlbMV0pKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh1cmwpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15nc3VybFwuKG1lfGluKSQvLAogICAgICAvXihnc3VsfGdldHNsfGdsaW5rcylcLm1lJC8sCiAgICAgIC9eZ3N1clwuaW4kLywKICAgICAgL15nNXVcLnB3JC8sCiAgICAgIC9eZ3VybFwubHkkLywKICAgIF0sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCcjY29udGFpbmVyJyk7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNsaW5rJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYCR7YS5ocmVmfSZhYj0ke19BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cueH1gKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmd1bnRpbmdcLndlYlwuaWQkLywKICAgIHBhdGg6IC9eXC9cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYS5idG4tYmxvY2sucmVkaXJlY3QnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaGVhbHRoeWtrXC5jb20kLywKICAgIHBhdGg6IC9eXC93b3JkcHJlc3NcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBoID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNjb250ZW50IGNlbnRlciBidXR0b24nKTsKICAgIGguY2xpY2soKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmhlbi10YXlcLm5ldCQvLAogICAgcGF0aDogL15cL2dvXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjZG93bmxvYWRfdXJsIGRpdiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaC5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmhvdHNob3J0dXJsXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGZyYW1lID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ZyYW1lW3Njcm9sbGluZz15ZXNdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZnJhbWUuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmlpdlwucGwkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBkID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNjb3VudGluZycpOwogICAgbGV0IHJ2ID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnBvc3QobG9jYXRpb24ucGF0aG5hbWUsIHsKICAgICAgYmxvY2tlcjogMCwKICAgICAgc2FsdDogZC5kYXRhc2V0LnNhbHQsCiAgICB9LCB7CiAgICAgICdYLU9DVE9CRVItUkVRVUVTVC1IQU5ETEVSJzogJ29uQWZ0ZXJTaG9ydGN1dFZpZXcnLAogICAgICAnWC1PQ1RPQkVSLVJFUVVFU1QtUEFSVElBTFMnOiAnc2hvcnRjdXQvbGlua19zaG93JywKICAgIH0pOwogICAgcnYgPSBKU09OLnBhcnNlKHJ2KTsKICAgIGQgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0udG9ET00ocnZbJ3Nob3J0Y3V0L2xpbmtfc2hvdyddKTsKICAgIHJ2ID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2EnLCBkKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhydi5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXml0d1wubWUkLywKICAgIHBhdGg6IC9eXC9yXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuZ28tZm9ybScpOwogICAgZi5zdWJtaXQoKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXml0eVwuaW0kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBmID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJyNtYWluJyk7CiAgICBpZiAoZikgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZi5zcmMpOwogICAgICByZXR1cm47CiAgICB9CiAgICBbLCAsIGZdID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmZpbmQoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQkKCdmcmFtZScpLCAoZnJhbWUpID0+IHsKICAgICAgaWYgKGZyYW1lLnNyYy5pbmRleE9mKCdpbnRlcmhlYWRlci5waHAnKSA8IDApIHsKICAgICAgICByZXR1cm4gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLm5vbmU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZyYW1lLnNyYzsKICAgIH0pOwogICAgaWYgKGYgIT09IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ub25lKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhmKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgZiA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygva3J5cHRlZD0oW14mXSspLyk7CiAgICBpZiAoIWYpIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzaXRlIGNoYW5nZWQnKTsKICAgIH0KICAgIGYgPSBmWzFdOwogICAgY29uc3QgZGF0YSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuZGVzKCdrc25zbG10bWswdjRQZHZpdXNhanF1JywgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5oZXhUb1N0cmluZyhmKSwgMCwgMCk7CiAgICBpZiAoZGF0YSkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoJ2h0dHA6Ly9pdHkuaW0vMTEwNF8yMV81MDg0Nl8nICsgZGF0YSk7CiAgICB9CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP2tpbmdvZnNocmlua1wuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBsID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyN0ZXh0cmVzdWx0ID4gYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGwuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogWwogICAgewogICAgICBob3N0OiAvXnN0XC5rdXJvZ2F6ZVwubmV0JC8sCiAgICAgIHF1ZXJ5OiAvcj0oLispLywKICAgIH0sCiAgICB7CiAgICAgIGhvc3Q6IC9ec1wueXVraXN1YnNcLmNvbSQvLAogICAgICBxdWVyeTogL2xpbms9KC4rKS8sCiAgICB9LAogIF0sCiAgYXN5bmMgc3RhcnQgKG0pIHsKICAgIGNvbnN0IHIgPSBhdG9iKG0ucXVlcnlbMV0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHIpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ec3RcLmt1cm9nYXplXC5uZXQkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYS5yZWRpcmVjdCcpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15kbFwubGF5YXJrYWNhMjFcLnZpcCQvLAogICAgcGF0aDogL15cL2lmcmFtZVwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGx2ID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5jb250ZW50ICNza2lwIGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsdi5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmRsXC5sYXlhcmthY2EyMVwudmlwJC8sCiAgICBwYXRoOiAvXlwvKC4rKVwvLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoJy9pZnJhbWUvdG9wLnBocD9zbHVnPScgKyBtLnBhdGhbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ebGVlY2hhbGxcLmRvd25sb2FkJC8sCiAgICBwYXRoOiAvXlwvZmlsZVwvKFthLXpBLVowLTkvPV0rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGRlY29kZVVSSUNvbXBvbmVudChhdG9iKG0ucGF0aFsxXSkpKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL3d3dy5saWVuc2Nhc2guY29tL2wvKicsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjcmVkaXJfYnRuJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/bGlua1wuaW0kLywKICAgIHBhdGg6IC9eXC9cdyskLywKICB9LAogIGFzeW5jIHN0YXJ0ICgpIHsKICAgIGNvbnN0IHRleHQgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucG9zdChkb2N1bWVudC5sb2NhdGlvbi5ocmVmLCB7CiAgICAgIGltYWdlOiAnQ29udGludWUnLAogICAgfSk7CiAgICBjb25zdCBtID0gdGV4dC5tYXRjaCgvd2luZG93XC5sb2NhdGlvblwucmVwbGFjZVwoJyhbXiddKyknXCkvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhtWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmxpbmtcLnRsJC8sCiAgICBwYXRoOiAvXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IG0gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL2V2YWxcKCguK31cKSlcKS8pOwogICAgbSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ldmlsKGAoJHttWzFdfSlgKTsKICAgIGxldCBsID0gbS5tYXRjaCgvKD86XCRcLmFqYXguK3xocmVmPScpKGh0dHAuK3NraXAuK3xodHRwW14nXSspJyxkYXRhLyk7CiAgICBsID0gbFsxXTsKICAgIGlmICghbC5tYXRjaCgvc2tpcC8pKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgdG9rZW4gPSBtLm1hdGNoKC8nWC1DU1JGLVRPS0VOJzonKFteJ10rKSd9LC8pOwogICAgbGV0IHJsID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnBvc3QobCwgJycsIHsKICAgICAgJ1gtQ1NSRi1UT0tFTic6IHRva2VuWzFdLAogICAgfSk7CiAgICBybCA9IEpTT04ucGFyc2UocmwpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHJsLnVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15saW5rNGFkXC5jb20kLywKICAgIHBhdGg6IC9eXC8oLispJC8sCiAgfSwKICBhc3luYyByZWFkeSAobSkgewogICAgbGV0IGQgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZGl2W2lkXj1tb2R1bGVfXScpOwogICAgZCA9IGQuaWQubWF0Y2goL21vZHVsZV8oXGQrKS8pOwogICAgZCA9IGRbMV07CiAgICBjb25zdCB1cmwgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucG9zdCgnZm9ybS5waHA/YmxvY2tfaWQ9JyArIGQsIHsKICAgICAgY21kOiAnZ2V0X3NvdXJjZScsCiAgICAgIGFjdDogJ3dhaXRpbmcnLAogICAgICBpZDogbS5wYXRoWzFdLAogICAgfSk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICB9LAp9KTsKKGZ1bmN0aW9uKCkgewogIGNvbnN0IGhvc3RSdWxlcyA9IFsKICAgIC9eKChbXHddezh9fHd3dylcLik/KGFsbGFuYWxwYXNzfGRyc3RpY2t5ZmluZ2Vyc3x3aGFja3l2aWR6KVwuY29tJC8sCiAgICAvXigoW1x3XXs4fXx3d3cpXC4pPyhsaW5rYmFiZXN8bGlua2J1Y2tzKVwuY29tJC8sCiAgICAvXigoW1x3XXs4fXx3d3cpXC4pP3RoZXNlYmxvZ3NcLmNvbSQvLAogICAgL153YXJuaW5nLXRoaXMtbGlua2NvZGUtd2lsbC1jZWFzZS13b3JraW5nLXNvb25cLnd3d1wubGlua2J1Y2tzZG5zXC5jb20kLywKICAgIC9eKChbXHddezh9fHd3dylcLik/KGZpbGVzb250aGV8cG9vbnRvd258c2VyaW91c2RlYWxzfHVybGJlYXQpXC5uZXQkLywKICAgIC9eKChbXHddezh9fHd3dylcLik/KHphdG5hd3F5fHJodmdtcml0bXppd2NtKVwubmV0JC8sCiAgICAvXigoW1x3XXs4fXx3d3cpXC4pP2ZyZWVhblwudXMkLywKICAgIC9eKChbXHddezh9fHd3dylcLik/KG1pbml1cmxzfHFxY3xycXF8dGlueWxpbmtzfHl5dilcLmNvJC8sCiAgICAvXigoW1x3XXs4fXx3d3cpXC4pP3lvdWZhcFwubWUkLywKICBdOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IGhvc3RSdWxlcywKICAgICAgcGF0aDogL15cL1x3K1wvdXJsXC8oLispJC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkobSkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlQWxsVGltZXIoKTsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlc2V0Q29va2llcygpOwogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgICAgbGV0IHVybCA9IG0ucGF0aFsxXSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7CiAgICAgIGNvbnN0IG1hdGNoID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9VcmxFbmNvZGVkOiAoW14sXSspLyk7CiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSA9PT0gJ3RydWUnKSB7CiAgICAgICAgdXJsID0gZGVjcnlwdCh1cmwpOwogICAgICB9CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh1cmwpOwogICAgfQogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IGhvc3RSdWxlcywKICAgIH0sCiAgICBhc3luYyBzdGFydCAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuWE1MSHR0cFJlcXVlc3QgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9wOwogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZUFsbFRpbWVyKCk7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZXNldENvb2tpZXMoKTsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZigndmVyaWZ5JykgPj0gMCkgewogICAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgnL3ZlcmlmeScsICcnKTsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IHRva2VuID0gZmluZFRva2VuKGRvY3VtZW50KTsKICAgICAgY29uc3QgdXJsID0gYXdhaXQgc2VuZFJlcXVlc3QodG9rZW4pOwogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ubnVrZSh1cmwpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgcXVlcnk6IC9eKC4qKVs/Jl1fbGJHYXRlPVxkKyQvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0IChtKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZXRDb29raWUoJ19sYkdhdGVQYXNzZWQnLCAndHJ1ZScpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgbS5xdWVyeVsxXSk7CiAgICB9LAogIH0pOwogIGZ1bmN0aW9uIGZpbmRUb2tlbiAoY29udGV4dCkgewogICAgY29uc3Qgc2NyaXB0ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKCcgICAgdmFyIGYgPSB3aW5kb3dbXCdpbml0XCcgKyBcJ0xiXCcgKyBcJ2pzXCcgKyBcJ1wnXScsIGNvbnRleHQpOwogICAgaWYgKCFzY3JpcHQpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhcm4oJ3BhdHRlcm4gY2hhbmdlZCcpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxldCBhZHVybCA9IHNjcmlwdC5tYXRjaCgvQWRVcmxccyo6XHMqJyhbXiddKyknLyk7CiAgICBpZiAoIWFkdXJsKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgYWR1cmwgPSBhZHVybFsxXTsKICAgIGNvbnN0IG0xID0gc2NyaXB0Lm1hdGNoKC9BZFBvcFVybFxzKjpccyonLitcP1tePV0rPShbXHdcZF0rKScvKTsKICAgIGNvbnN0IG0yID0gc2NyaXB0Lm1hdGNoKC9Ub2tlblxzKjpccyonKFtcd1xkXSspJy8pOwogICAgY29uc3QgdG9rZW4gPSBtMVsxXSB8fCBtMlsxXTsKICAgIGxldCBtID0gc2NyaXB0Lm1hdGNoKC89XHMqKFxkKyk7Lyk7CiAgICBsZXQgYWsgPSBwYXJzZUludChtWzFdLCAxMCk7CiAgICBjb25zdCByZSA9IC9cK1xzKihcZCspOy9nOwogICAgbGV0IHRtcCA9IG51bGw7CiAgICB3aGlsZSgobSA9IHJlLmV4ZWMoc2NyaXB0KSkgIT09IG51bGwpIHsKICAgICAgdG1wID0gbVsxXTsKICAgIH0KICAgIGFrICs9IHBhcnNlSW50KHRtcCwgMTApOwogICAgcmV0dXJuIHsKICAgICAgdDogdG9rZW4sCiAgICAgIGFLOiBhaywKICAgICAgYWR1cmw6IGFkdXJsLAogICAgfTsKICB9CiAgYXN5bmMgZnVuY3Rpb24gc2VuZFJlcXVlc3QgKHRva2VuKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uZ2V0KHRva2VuLmFkdXJsKTsKICAgIGRlbGV0ZSB0b2tlbi5hZHVybDsKICAgIHRva2VuLmFfYiA9IGZhbHNlOwogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmluZm8oJ3dhaXRpbmcgdGhlIGludGVydmFsJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg1MDAwKTsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5pbmZvKCdzZW5kaW5nIHRva2VuOiAlbycsIHRva2VuKTsKICAgIGNvbnN0IHRleHQgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uZ2V0KCcvaW50ZXJtaXNzaW9uL2xvYWRUYXJnZXRVcmwnLCB0b2tlbiwgewogICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ub25lLAogICAgICBPcmlnaW46IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5ub25lLAogICAgfSk7CiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSh0ZXh0KTsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5pbmZvKCdyZXNwb25zZTogJW8nLCBkYXRhKTsKICAgIGlmICghZGF0YS5TdWNjZXNzICYmIGRhdGEuRXJyb3JzWzBdID09PSAnSW52YWxpZCB0b2tlbicpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhcm4oJ2dvdCBpbnZhbGlkIHRva2VuJyk7CiAgICAgIHJldHVybiBhd2FpdCByZXRyeSgpOwogICAgfQogICAgaWYgKGRhdGEuQWRCbG9ja1Nwb3R0ZWQpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhcm4oJ2FkYmxvY2sgc3BvdHRlZCcpOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZGF0YS5TdWNjZXNzICYmICFkYXRhLkFkQmxvY2tTcG90dGVkICYmIGRhdGEuVXJsKSB7CiAgICAgIHJldHVybiBkYXRhLlVybDsKICAgIH0KICB9CiAgYXN5bmMgZnVuY3Rpb24gcmV0cnkgKCkgewogICAgY29uc3QgdGV4dCA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5nZXQod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCksIHt9LCB7CiAgICAgICdYLUZvcndhcmRlZC1Gb3InOiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uZ2VuZXJhdGVSYW5kb21JUCgpLAogICAgfSk7CiAgICBjb25zdCBkID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnRvRE9NKHRleHQpOwogICAgY29uc3QgdCA9IGZpbmRUb2tlbihkKTsKICAgIGlmICghdCkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCgxMDAwKTsKICAgICAgcmV0dXJuIGF3YWl0IHJldHJ5KCk7CiAgICB9CiAgICByZXR1cm4gYXdhaXQgc2VuZFJlcXVlc3QodCk7CiAgfQogIGZ1bmN0aW9uIGRlY3J5cHQgKHVybCkgewogICAgdXJsID0gQ29udmVydEZyb21IZXgodXJsKTsKICAgIGxldCB1bnNhZmUgPSBgKCR7RW5jb2RlLnRvU3RyaW5nKCl9KSgiJHt1cmx9IilgOwogICAgdW5zYWZlID0gKDAsIGV2YWwpKHVuc2FmZSk7CiAgICByZXR1cm4gdW5zYWZlOwogIH0KICBmdW5jdGlvbiBDb252ZXJ0RnJvbUhleCAoc3RyKSB7CiAgICBjb25zdCByZXN1bHQgPSBbXTsKICAgIHdoaWxlIChzdHIubGVuZ3RoID49IDIpIHsKICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChzdHIuc3Vic3RyaW5nKDAsIDIpLCAxNikpKTsKICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygyLCBzdHIubGVuZ3RoKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQuam9pbignJyk7CiAgfQogIGNvbnN0IEVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHsKICAgIHZhciBzID0gW10sIGogPSAwLCB4LCByZXMgPSAnJywgayA9IGFyZ3VtZW50cy5jYWxsZWUudG9TdHJpbmcoKS5yZXBsYWNlKC9ccysvZywgJycpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgewogICAgICBzW2ldID0gaTsKICAgIH0KICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7IGkrKykgewogICAgICBqID0gKGogKyBzW2ldICsgay5jaGFyQ29kZUF0KGkgJSBrLmxlbmd0aCkpICUgMjU2OwogICAgICB4ID0gc1tpXTsKICAgICAgc1tpXSA9IHNbal07CiAgICAgIHNbal0gPSB4OwogICAgfQogICAgaSA9IDA7CiAgICBqID0gMDsKICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc3RyLmxlbmd0aDsgeSsrKSB7CiAgICAgIGkgPSAoaSArIDEpICUgMjU2OwogICAgICBqID0gKGogKyBzW2ldKSAlIDI1NjsKICAgICAgeCA9IHNbaV07CiAgICAgIHNbaV0gPSBzW2pdOwogICAgICBzW2pdID0geDsKICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoeSkgXiBzWyhzW2ldICsgc1tqXSkgJSAyNTZdKTsKICAgIH0KICAgIHJldHVybiByZXM7CiAgfTsKfSkoKTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnd3d1wubGlua2RlY29kZVwuY29tJC8sCiAgICBwYXRoOiAvXlwvJC8sCiAgICBxdWVyeTogL15cPyguKykkLywKICB9LAogIGFzeW5jIHJlYWR5IChtKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgIGxldCBsbmsgPSBtLnF1ZXJ5WzFdOwogICAgaWYgKG0ucXVlcnlbMV0ubWF0Y2goL15odHRwcz86XC9cLy8pKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsbmspOwogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgYiA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjcG9wdXAnKTsKICAgIGlmIChiICYmIGIuaHJlZikgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYi5ocmVmKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgYiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjbSA+IC5WaXNpdF9MaW5rJyk7CiAgICBiID0gYi5vbmNsaWNrLnRvU3RyaW5nKCkubWF0Y2goL3dpbmRvd1wub3BlblwoJyhbXiddKyknLyk7CiAgICBpZiAoIWIpIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlcigncGF0dGVybiBjaGFuZ2VkJyk7CiAgICB9CiAgICBsbmsgPSBiWzFdLm1hdGNoKC9cPyhodHRwcz86XC9cLy4qKSQvKTsKICAgIGlmIChsbmspIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGxua1sxXSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhiWzFdKTsKICB9LAp9KTsKKGZ1bmN0aW9uICgpIHsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBbCiAgICAgICAgL14odWxzaGFyZXx1cmxpa2UpXC5uZXQkLywKICAgICAgICAvXmFkdXJsXC5pZCQvLAogICAgICAgIC9eZWFybi1ndWlkZVwuY29tJC8sCiAgICAgICAgL14oY3V0d2l8Y3V0LXd8Y3V0bHxkbXVzKVwuaW4kLywKICAgICAgICAvXih3d3dcLik/anVybFwuaW8kLywKICAgICAgICAvXm1pdGx5XC51cyQvLAogICAgICAgIC9edHVpXC5jbGljayQvLAogICAgICAgIC9ebWV0XC5ieiQvLAogICAgICAgIC9ebGFwYWtcLmxpbmskLywKICAgICAgXSwKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgTm9SZWNhcHRjaGFIYW5kbGVyKCk7CiAgICAgIGF3YWl0IGhhbmRsZXIuY2FsbCgpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBbCiAgICAgICAgL14oZHo0bGlua3xnb2NpdGxpbmt8M3JhYmN1dHxzaG9ydDJ3aW58YWRzcnR8c2hvcnRnbG9iYWx8amFpbmppbnZhbml8YWdyYWRhcnBhbilcLmNvbSQvLAogICAgICAgIC9eKHBheXNob3J0dXJsfHVybHRpcHN8c2hyaW5rZWFybnxpdGlhZHxjdXRzb3VmfGVuZXdzdGFsa3xsbmtzNGFsbHxqZWpha2xhZ3UpXC5jb20kLywKICAgICAgICAvXihlYXJuLXVybHxiaXQtdXJsfGN1dC13aW58bGluay16ZXJvfGN1dC1lYXJufG90dXJsfGdsb3J5LWxpbmt8Y29vbG1pdHRlbnxob3NleHgpXC5jb20kLywKICAgICAgICAvXihlbXBpcmVzaG9ydHxlbXBlYXJufHRhcm53aDJpfHRhYmVpa2h8eW91cnctYXl8cmViN2tvbmxpbmV8ZmFjdHVyYWx8YWtsYTQpXC5jb20kLywKICAgICAgICAvXihzaHJpbmtidWNrfGNsa3BheXxsaW5rc2h0fGhheHJzfGNsaWNrMi11cmx8Y29vbHR4dGdlbnxhcmJhN2NvfHNob3J0bGlua28pXC5jb20kLywKICAgICAgICAvXihwYXJ0cWIyaXxraHJhYmF8YWRscHV8dGFiYWtoZWxvfGFtZW5pdGllZXN8Y29zbWljbW9ueXxpbGlua3Nob3J0eHxhLWVneSlcLmNvbSQvLAogICAgICAgIC9eKGFkdmFuY2Utd2lzaGluZ2pzfGdvdnRzbWFydGpvYnxibG9nZ2luZ3JhamF8dGVjaGt0aXxzeHRzcXVhZHxhZHBheXRtfHB1c3RrYWxhKVwuY29tJC8sCiAgICAgICAgL14odGhlZ3lhYW5pcG9pbnR8ZG93bmxvYWRkb29tfGxpbmtmYXl8NWJyZ2VkaWR8ZWFydGhwaWNsb3ZlcnxhZGlncHx0b21pZW50KVwuY29tJC8sCiAgICAgICAgL14odGVjaG1lbi13b3JsZHxyYXplcmZsaXhzfGdhbWVzaW5kaWFuc3xkaXNsb29rc3xlbGtoYnJlbDdzcnl8b25hYWh8dWx0cmFza29yYSlcLmNvbSQvLAogICAgICAgIC9eKHdyYXAtdzBybGR8b21tYW50cmFtZWRpdGF0aW9ufG1hd2Rva3x0ZWNoZmluZGF8Y2xpeGd8Ym9hcmRnaWZ0fGJlYXN0LWJpcmRzKVwuY29tJC8sCiAgICAgICAgL14odGFsa2l0dGVjaHl8bmV3c2luanVsZXN8a3V0cGF5fG5pa2thcnJ8dmVibGlua3xhbDNhbWFsbHw2YWJhMmRheXxvcGxvdmVyemhvbWUpXC5jb20kLywKICAgICAgICAvXihrb29yYW11YmFzaGlyfGhlYWx0aGZhcnl8anVzdGxpa2V5b2puYXxzYXJrYXJpam9ic3Jlc3VsdHNzfHphbGlwYXl8dGhlZnJlZWNoKVwuY29tJC8sCiAgICAgICAgL14oaGluZGliZWVufHBhc3Rla2FufGU3a2VseWFuYXxlYS1pc2x5fGFyaXN0b2RlcmFzfHNob3J0em9ufHRyYWRpbmctYXJlYXxhbHNlb28pXC5jb20kLywKICAgICAgICAvXih0ZWNodHJlbWVuZG91c3xmcmVlc3BpbndpbnN8dy1yYWplbXx0aW1ldG9rYXxmb29kcHVmZnxsaW5rc29wfGJvbGx5d29vZGRyYW1hbmV3cylcLmNvbSQvLAogICAgICAgIC9eKGxpbmtleGF8YWRtZXd8c2hydGZseXxrdXlsaW5rfGN1dDRsaW5rc3xhZHNraXBtZXxza2lwdXJsc3xlbHktb203fGJyZW5oZWFsdGgpXC5jb20kLywKICAgICAgICAvXihzbWFydGVhc3lzdHVkeXxjeWFoZWFsdGh8ZXJzaGFkYXR8ejJpfHNydGZseXxhcmJhN2twcm98aGVhbHRoLWdvb29kfHN0YXRlZ29zc2lwKVwuY29tJC8sCiAgICAgICAgL14oYmxvZ2dpbmdneWFuYm94fHlvdXJ0ZWNoZ3VpZGVyfGdpZnNpc3wzcmFiLWNhc2h8cGlua2hpbmRpfHdpc2hlczJ8d2Vhd3B8YTViYXJmYXdyaWEpXC5jb20kLywKICAgICAgICAvXihteWtpbmdnb3xsaS1ua3p8d2luNGN1dHxraGFicmF0a3xwcm9ncmFtc2ZyZXxzYWZlbGlua2Jsb2dnZXJ8bGlua3dlYXxvdXJjYXJlZXJibG9nKVwuY29tJC8sCiAgICAgICAgL14obGlua29ybGlua3xtcmZvdXJ0ZWNofGZhYnNkZWFsc3x0ZWNoNHV0b2RheXx1cmxzYW1vfGVhcm53aXRoc2hvcnRsaW5rfHN3aWdneWdvbGQpXC5jb20kLywKICAgICAgICAvXihlYXJubW9uZXl0YWxrfG5ld3VwZGF0ZXNvbmxpbmV8dXB0b29zfGJha2lsaW5rfGdvc3NpcGNvcm5lcnN8c2xlZ2xlfGZ1dHVyZWZvdW5kYXRpb25uZ28pXC5jb20kLywKICAgICAgICAvXihsb29wZGlldHxpbmZvdGF4Y28pXC5jb20kLywKICAgICAgICAvXih2eVwuKT9hZHN2eVwuY29tJC8sCiAgICAgICAgL14od3d3XC4pPyhjbGtwYXlzfGxua2pvYnxlZnNob3J0KVwuY29tJC8sCiAgICAgICAgL15zaHJ0KDh8MTApXC5jb20kLywKICAgICAgICAvXmxpbmtcLmFrdW5vXC5uZXQkLywKICAgICAgICAvXihzYWZlbGlua3V8dGlueWxpbmtzfGxpY2tsaW5rfGxpbmtyZXh8emxzaG9ydGV8dml2YWRzfGNsaWNrYXIpXC5uZXQkLywKICAgICAgICAvXih2bnVybHx2aW5hdXJsfGZveHVybHxzaG9ydDJ3aW58Y2FzaGF0fHNocnRmbHl8c2hvcnR5ZSlcLm5ldCQvLAogICAgICAgIC9eKGxpbms0d2lufGxpbmtzYWR8dG9wdXJsfHhlbWxpbmt8Y3V0YWRsaW5rfGNyYWJjdXR8ZGlyZWN0ZWRsaW5rKVwubmV0JC8sCiAgICAgICAgL14oY2xpa3x0b2tlbmZseXxnZXRsaW5rfHBzbHxwc3N8c2hsbnxscGV8Y2hydHxzenN8bWluaXVybClcLnB3JC8sCiAgICAgICAgL14od3d3XC4pP2x3dFwucHckLywKICAgICAgICAvXih0cmxpbmt8d29saW5rfHRvY2RvfGN1dHVybHxjb3Vuc2VsbGluZ3Jlc3VsdDIwMTZ8aWl0amVlbWFpbmd1aWRlfGhlYWx0aGhpbmRpZ3lhbilcLmluJC8sCiAgICAgICAgL14odXRpbWV0YWJsZXJlc3VsdHxkYWlseS1zYWxlfGxpbmtzem9uZXx2aXJhbHRlY2huaWNhbClcLmluJC8sCiAgICAgICAgL14oYWRiaWx0eXxhZHBvcHx1anZ8dHB4fGFkc3J0fDJmbHl8bGluNjV8c2hvcnQyd2lufHN1YXJhbmtyaXxpbmZvdHJlbmR5KVwubWUkLywKICAgICAgICAvXihhZHZhbmNlZGF1dG9yZXBhaXJ0aXBzfHRha2VpdGZvcnxqZWxhamFoaW50ZXJuZXR8dmlydHVhbGRhdGF8bXVoYW1tYWR5b2dhfHMydylcLm1lJC8sCiAgICAgICAgL14oY2VwbXV6aWtpbmRpcilcLm1lJC8sCiAgICAgICAgL14oc2hpbmt8c2hydGVufGdnLWx8dm51cmx8YmxvZ2dpbmdkZWtofGxuMTF8c2gxMXx0cmFkZWd1cnV8bmV3c2thcnR8a2lkc29ycylcLnh5eiQvLAogICAgICAgIC9eKHRlY2hpbmh1Ynx2aXJhbG5vd3xzaG9waGlwcm98dGVjaG5vY2FudmFzfGdldGZyZXNoY2xvdWR8cHJvZml0c3R1ZHl8aWpvYmFuYW5hKVwueHl6JC8sCiAgICAgICAgL14oYXV0b2NhcnNtYWd6fGdldHBvY2tldHx5YXNpbmV3c3xkdW55YW5ld3N8a29taXVwZGF0ZXN8YWxsYXBwfHNtd2Vic3xuZXdzLXRlY2gpXC54eXokLywKICAgICAgICAvXihva2V8Y3VvbnxjdWlvfGN1ZWV8Y3V1c3xjdXRvfGxpbmt0b3J8Zmx5bGlua3x1aXp8dWlpfGV4ZSlcLmlvJC8sCiAgICAgICAgL15jdSgyfDN8NXw2fDcpXC5pbyQvLAogICAgICAgIC9eKGVsM2lkfGFsbHJlcG9ydHMpXC5zaXRlJC8sCiAgICAgICAgL14xMjNsaW5rXC5jYXJwYXJ0c3ZpZXQ5N1wuc2l0ZSQvLAogICAgICAgIC9eKGNsaWNrMnVybHxsbjQzNXxtZXJkZWthaWQpXC5vbmxpbmUkLywKICAgICAgICAvXih3d3dcLik/YmxvZ2dlcndvcmxkXC5vbmxpbmUkLywKICAgICAgICAvXihwZXR0eXxza2lwc3x0cnxmbGF6KVwubGluayQvLAogICAgICAgIC9ebWVnYXVybFwuKGlufGxpbmspJC8sCiAgICAgICAgL15wYXlza2lwXC4obWV8b3JnKSQvLAogICAgICAgIC9eKDNic3R8Y29pbmxpbmt8aXRpdXJsfGNvc2hpbmt8bGluazVzfGN1cnN8bWFrZXVybHxtb29kZGlzb3JkZXJ8Y3V0bHMpXC5jbyQvLAogICAgICAgIC9eKG1saW5rfGNsMjUwfHhwaWNrbGV8aW5mb3NlaGF0a3UpXC5jbHViJC8sCiAgICAgICAgL14oaWdyYW18Z3JhbXxwaW5naXQpXC5pbSQvLAogICAgICAgIC9eKGNsa3xjbGwpXC4ocHJlc3N8aW5rfHNofGljdSkkLywKICAgICAgICAvXnNob3J0XC5wZSQvLAogICAgICAgIC9eKHVybGNsb3VkfGltYWdlb3B0aW1pemVyKVwudXMkLywKICAgICAgICAvXihpY3V0aXR8ZWFybmJpZ3xjdXRlYXJuKVwuY2EkLywKICAgICAgICAvXihhZHp1cmx8bGluazJsaW5rKVwuY2YkLywKICAgICAgICAvXihrb3lsaW5rc3xidXktaW4tNTk5cnMpXC53aW4kLywKICAgICAgICAvXmxvcHRlXC5wcm8kLywKICAgICAgICAvXih3d3dcLik/cG5kXC50bCQvLAogICAgICAgIC9eKHRueXx0aW55KVwuZWMkLywKICAgICAgICAvXnRsXC50YyQvLAogICAgICAgIC9eZTJzXC5jYyQvLAogICAgICAgIC9ebHlvblwua2ltJC8sCiAgICAgICAgL14obGlua3ZpcHw0c2hvcnQpXC50ayQvLAogICAgICAgIC9ec3RmbHlcLnByZXNzJC8sCiAgICAgICAgL14oYnVzaW5lc3Npc3MyfHRlY2hhbmRyZXZpZXd8eWVzbW92aWVzYXBwfGtwc2N0aHVsYXNpbG9naW4pXC5pbmZvJC8sCiAgICAgICAgL15lYXRpbmdzXC5zdHJlYW0kLywKICAgICAgICAvXjhvXC5lZSQvLAogICAgICAgIC9eYnV5aXRvbmxpbmVcLnN0b3JlJC8sCiAgICAgICAgL14oc2hvcnRlYXJufGVucnQpXC5ldSQvLAogICAgICAgIC9eKDE5MjE2ODEyNTR8Z2VraXx3ZWduZXIpXC50ZWNoJC8sCiAgICAgICAgL14xMjNsaW5rXC4ocHd8dmlwKSQvLAogICAgICAgIC9eKGxvdGVjaG5vY2FufHVwZGF0ZXRyaWJ1bnx0ZW1wbGlua3xlejRsaW5rKVwub3JnJC8sCiAgICAgICAgL150aW55bGlua1wucnVuJC8sCiAgICAgICAgL15idGNcLm1zJC8sCiAgICAgICAgL15lYXJuXC50aGVwbHVzaXRcLnJvJC8sCiAgICAgICAgL15za2lwXC5heiQvLAogICAgICAgIC9eKGR1dGNoeWNvcnB8YWJvdXR0ZWNoKVwuc3BhY2UkLywKICAgICAgICAvXmNsaWNrMnNlZVwuZGVzaSQvLAogICAgICAgIC9ec2hvcnRlZFwuaWQkLywKICAgICAgICAvXnppXC5odCQvLAogICAgICAgIC9eKGZ1bm55cXVpenxtZWRpYWtpdGF8a2FiYXJ2aXJhbClcLmJsb2ckLywKICAgICAgICAvXihzY2llbmNlbGlmZXxjcG00YWxsKVwuZ2EkLywKICAgICAgICAvXnRoaW5cLmF0JC8sCiAgICAgICAgL15zay1pcFwucnUkLywKICAgICAgICAvXnphXC5nbCQvLAogICAgICAgIC9ecm95YWxvd25cLnJldmlldyQvLAogICAgICAgIC9eYmVzdHNjaG9sYWVzaGlwZGVncmVlXC5kYXRlJC8sCiAgICAgICAgL15va29cLnNoJC8sCiAgICAgICAgL15zcGxhc2huZXdzXC5vb28kLywKICAgICAgICAvXmNra1wuYWkkLywKICAgICAgICAvXmZjXC5sYyQvLAogICAgICAgIC9ecGE0bFwuZXN5XC5lcyQvLAogICAgICAgIC9eZ2V0XC51anZcLmFsJC8sCiAgICAgICAgL14odGlwc1wuKT9hdHZcLnB3JC8sCiAgICAgIF0sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBoYW5kbGVyID0gbmV3IFJlY2FwdGNoYUhhbmRsZXIoKTsKICAgICAgYXdhaXQgaGFuZGxlci5jYWxsKCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXndpXC5jciQvLAogICAgICAgIC9ed2ljclwubWUkLywKICAgICAgICAvXmxpbmtzb2ZsaWZlXC5jbyQvLAogICAgICAgIC9ebGlua3NvZlwubGlmZSQvLAogICAgICBdLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBJbnZpc2libGVSZWNhcHRjaGFIYW5kbGVyKCk7CiAgICAgIGF3YWl0IGhhbmRsZXIuY2FsbCgpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBbCiAgICAgICAgL14oY3V0cGFpZHx0bWVhcm58aWN1dGxpbmspXC5jb20kLywKICAgICAgICAvXihjdHVpfGN1dGkpXC5pbiQvLAogICAgICAgIC9eenV0cm94XC5saW5rJC8sCiAgICAgICAgL14od3d3XC4pP3Nocmlua1wudmlwJC8sCiAgICAgICAgL15jdXR3aW5cLih1c3xjb20pJC8sCiAgICAgICAgL14xMjNzaG9ydFwuYml6JC8sCiAgICAgICAgL14odGVjaGNyYXplfGhlYWx0aGluc2lkZXIpXC5vbmxpbmUkLywKICAgICAgXSwKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgTm9uRGlzYWJsZWRSZWNhcHRjaGFIYW5kbGVyKCk7CiAgICAgIGF3YWl0IGhhbmRsZXIuY2FsbCgpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXih3d3dcLik/b3VybFwuaW8kLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgT1VSTEhhbmRsZXIoKTsKICAgICAgYXdhaXQgaGFuZGxlci5jYWxsKCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eKHd3d1wuKT9saW5rZHJvcFwubmV0JC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBoYW5kbGVyID0gbmV3IExpbmtEcm9wSGFuZGxlcigpOwogICAgICBhd2FpdCBoYW5kbGVyLmNhbGwoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL153d3dcLnNob3J0bHlcLnh5eiQvLAogICAgICBwYXRoOiAvXlwvbGluayQvLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBTaG9ydGx5SGFuZGxlcigpOwogICAgICBhd2FpdCBoYW5kbGVyLmNhbGwoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogWwogICAgICAgIC9eKGN1dC11cmxzfGxpbmNsaWt8cHJlbWl1bXplbnxieTZka3xtaWt5bW9vbnN8bWFuMnBybylcLmNvbSQvLAogICAgICAgIC9eKGxpbms0d2lufGxvYWR1cmx8Y3V0NGxpbmt8cmFvbGlua3xhZHNob3J0ZSlcLmNvbSQvLAogICAgICAgIC9ec2hvcnRcLnBhc3Rld21hXC5jb20kLywKICAgICAgICAvXmxpbmtmbHlcLmdhb3NtZWRpYVwuY29tJC8sCiAgICAgICAgL14od3d3XC4pP3ZpcmFsdWtrXC5jb20kLywKICAgICAgICAvXih3d3dcLik/bmlhZ29zaG9ydFwuY29tJC8sCiAgICAgICAgL153d3dcLndvcmxkaGFja1wubmV0JC8sCiAgICAgICAgL14oZWtsaW5rKVwubmV0JC8sCiAgICAgICAgL14odXJsZXxhZHNob3J0KVwuY28kLywKICAgICAgICAvXih3ZWVmeXxhZGJ1bGx8emVpenxsaW5rNHxhZGNvaW4pXC5tZSQvLAogICAgICAgIC9eKGFkYmlsdHl8dGFpdmUpXC5pbiQvLAogICAgICAgIC9eKHR3aWt8YWRzbGluaylcLnB3JC8sCiAgICAgICAgL14oY3Vyc3xjcnVzfDRjdXR8dTJzfGwycylcLmlvJC8sCiAgICAgICAgL15kenVybFwubWwkLywKICAgICAgICAvXnBldHR5XC5saW5rJC8sCiAgICAgICAgL15zaG9ydGFkXC5jZiQvLAogICAgICAgIC9eMTIzbGlua1wuKGlvfGNvfHByZXNzfHBybykkLywKICAgICAgICAvXmdpdFwudGMkLywKICAgICAgICAvXihhZGZ1fGxpbmt1KVwudXMkLywKICAgICAgICAvXnNob3J0aXRcLmNhJC8sCiAgICAgICAgL15zcGFtbGlua1wub3JnJC8sCiAgICAgICAgL15yb3l1cmxzXC5iaWQkLywKICAgICAgICAvXigxKT9pZHNseVwuKGNvbXxiaWR8bmV0fG9yZykkLywKICAgICAgXSwKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgU3RhZ2VkSGFuZGxlcigpOwogICAgICBhd2FpdCBoYW5kbGVyLmNhbGwoKTsKICAgIH0sCiAgfSk7CiAgY2xhc3MgQWJzdHJhY3RIYW5kbGVyIHsKICAgIGNvbnN0cnVjdG9yICgpIHsKICAgICAgdGhpcy5fb3ZlcmxheVNlbGVjdG9yID0gWwogICAgICAgICdbY2xhc3MkPSJPdmVybGF5Il0nLAogICAgICAgICcjX19yYW5kb21fY2xhc3NfbmFtZV9fJywKICAgICAgICAnI2hlYWRsaW5lYXRhcycsCiAgICAgICAgJyNteU1vZGFsJywKICAgICAgICAnLm9wYWNpdHlfd3JhcHBlcicsCiAgICAgICAgJyNvdmVybGF5JywKICAgICAgXS5qb2luKCcsICcpOwogICAgICB0aGlzLl9mb3JtU2VsZWN0b3IgPSBbCiAgICAgICAgJyNnby1saW5rJywKICAgICAgICAnLmdvLWxpbmsnLAogICAgICAgICcjb3JpZ2luYWxMaW5rLmdldC1saW5rJywKICAgICAgICAnZm9ybVthY3Rpb249Ii9saW5rcy9nbyJdJywKICAgICAgICAnZm9ybVthY3Rpb249Ii9saW5rcy9saW5rZHJvcGdvIl0nLAogICAgICBdLmpvaW4oJywgJyk7CiAgICB9CiAgICByZW1vdmVPdmVybGF5ICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSh0aGlzLl9vdmVybGF5U2VsZWN0b3IpOwogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uYmxvY2sodGhpcy5fb3ZlcmxheVNlbGVjdG9yLCBkb2N1bWVudC5ib2R5KTsKICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaW5pdGlhbCc7CiAgICAgIH0sIDUwMCk7CiAgICB9CiAgICByZW1vdmVGcmFtZSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgfQogICAgYXN5bmMgY2FsbCAoKSB7CiAgICAgIGNvbnN0IG9rID0gYXdhaXQgdGhpcy5wcmVwYXJlKCk7CiAgICAgIGlmICghb2spIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgbXcgPSBhd2FpdCB0aGlzLmdldE1pZGRsZXdhcmUoKTsKICAgICAgaWYgKCFtdykgewogICAgICAgIHRoaXMud2l0aG91dE1pZGRsZXdhcmUoKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy5nZXRVUkwobXcpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICAgIH0KICB9CiAgY2xhc3MgTm9SZWNhcHRjaGFIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHsKICAgIHByZXBhcmUgKCkgewogICAgICB0aGlzLnJlbW92ZUZyYW1lKCk7CiAgICAgIHRoaXMucmVtb3ZlT3ZlcmxheSgpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGFzeW5jIGdldE1pZGRsZXdhcmUgKCkgewogICAgICByZXR1cm4gYXdhaXQgZ2V0SlF1ZXJ5Rm9ybSh0aGlzLl9mb3JtU2VsZWN0b3IpOwogICAgfQogICAgd2l0aG91dE1pZGRsZXdhcmUgKCkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uaW5mbygnbm8gZm9ybScpOwogICAgfQogICAgYXN5bmMgZ2V0VVJMIChqRm9ybSkgewogICAgICByZXR1cm4gYXdhaXQgZ2V0VVJMRnJvbUpRdWVyeUZvcm0oakZvcm0pOwogICAgfQogIH0KICBjbGFzcyBSZWNhcHRjaGFIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHsKICAgIGFzeW5jIHByZXBhcmUgKCkgewogICAgICB0aGlzLnJlbW92ZU92ZXJsYXkoKTsKICAgICAgY29uc3QgZiA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjY2FwdGNoYVNob3J0bGluaywgZGl2LmctcmVjYXB0Y2hhJyk7CiAgICAgIGlmICghZikgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5pbmZvKCdyZWNhcHRjaGEgZGV0ZWN0ZWQsIHN0b3AnKTsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLmluZm8oJ3RyeWluZyB0byBsaXN0ZW4gc3VibWl0IGJ1dHRvbicpOwogICAgICBjb25zdCBiID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJyNpbnZpc2libGVDYXB0Y2hhU2hvcnRsaW5rJyk7CiAgICAgIGlmICghYikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBhd2FpdCB0aGlzLnN1Ym1pdExpc3RlbihiLCBmKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgYXN5bmMgc3VibWl0TGlzdGVuIChiKSB7CiAgICAgIGNvbnN0IG8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7CiAgICAgICAgaWYgKCFiLmRpc2FibGVkKSB7CiAgICAgICAgICBiLmNsaWNrKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgby5vYnNlcnZlKGIsIHsKICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLAogICAgICB9KTsKICAgIH0KICAgIGFzeW5jIGdldE1pZGRsZXdhcmUgKCkgewogICAgICByZXR1cm4gYXdhaXQgZ2V0SlF1ZXJ5Rm9ybSh0aGlzLl9mb3JtU2VsZWN0b3IpOwogICAgfQogICAgd2l0aG91dE1pZGRsZXdhcmUgKCkgewogICAgICBjb25zdCBmID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNsaW5rLXZpZXcnKTsKICAgICAgZi5zdWJtaXQoKTsKICAgIH0KICAgIGFzeW5jIGdldFVSTCAoakZvcm0pIHsKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCgxMDAwKTsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgdXJsID0gYXdhaXQgZ2V0VVJMRnJvbUpRdWVyeUZvcm0oakZvcm0pOwogICAgICAgICAgaWYgKHVybCkgewogICAgICAgICAgICByZXR1cm4gdXJsOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YXJuKGUpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICBjbGFzcyBJbnZpc2libGVSZWNhcHRjaGFIYW5kbGVyIGV4dGVuZHMgUmVjYXB0Y2hhSGFuZGxlciB7CiAgICBhc3luYyBzdWJtaXRMaXN0ZW4gKGIsIGYpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhaXQoMTAwMCk7CiAgICAgIGNvbnN0IGNsaWNrID0gZi5jbGllbnRXaWR0aCA9PT0gMCB8fCBmLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwOwogICAgICBpZiAoY2xpY2sgJiYgIWIuZGlzYWJsZWQpIHsKICAgICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uaW5mbygnY2xpY2tpbmcgc3VibWl0IGJ1dHRvbiwgYmVjYXVzZSByZWNhcHRjaGEgd2FzIGVtcHR5Jyk7CiAgICAgICAgYi5jbGljaygpOwogICAgICB9CiAgICB9CiAgfQogIGNsYXNzIE5vbkRpc2FibGVkUmVjYXB0Y2hhSGFuZGxlciBleHRlbmRzIFJlY2FwdGNoYUhhbmRsZXIgewogICAgYXN5bmMgc3VibWl0TGlzdGVuIChiKSB7CiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhaXQoNTAwKTsKICAgICAgICBpZiAoZ3JlY2FwdGNoYSAmJiBncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICBiLmNsaWNrKCk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgY2xhc3MgT1VSTEhhbmRsZXIgZXh0ZW5kcyBSZWNhcHRjaGFIYW5kbGVyIHsKICAgIGFzeW5jIGdldE1pZGRsZXdhcmUgKCkgewogICAgICByZXR1cm4gewogICAgICAgIHZlcmlmeTogYXdhaXQgZ2V0SlF1ZXJ5Rm9ybSgnI2dldC1saW5rJyksCiAgICAgICAgZ286IGF3YWl0IGdldEpRdWVyeUZvcm0odGhpcy5fZm9ybVNlbGVjdG9yKSwKICAgICAgfTsKICAgIH0KICAgIGFzeW5jIGdldFVSTCAoakZvcm1PYmplY3QpIHsKICAgICAgYXdhaXQgZ2V0VVJMRnJvbUpRdWVyeUZvcm0oakZvcm1PYmplY3QudmVyaWZ5KTsKICAgICAgcmV0dXJuIGF3YWl0IGdldFVSTEZyb21KUXVlcnlGb3JtKGpGb3JtT2JqZWN0LmdvKTsKICAgIH0KICB9CiAgY2xhc3MgTGlua0Ryb3BIYW5kbGVyIGV4dGVuZHMgUmVjYXB0Y2hhSGFuZGxlciB7CiAgICBhc3luYyBnZXRNaWRkbGV3YXJlICgpIHsKICAgICAgcmV0dXJuIGF3YWl0IGdldEpRdWVyeUZvcm0oJyNteWxpbmsxJyk7CiAgICB9CiAgfQogIGNsYXNzIFN0YWdlZEhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIgewogICAgcHJlcGFyZSAoKSB7CiAgICAgIHRoaXMucmVtb3ZlRnJhbWUoKTsKICAgICAgdGhpcy5yZW1vdmVPdmVybGF5KCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgYXN5bmMgZ2V0TWlkZGxld2FyZSAoKSB7CiAgICAgIGNvbnN0IGYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI2xpbmstdmlldycpOwogICAgICBpZiAoIWYpIHsKICAgICAgICByZXR1cm4gZG9jdW1lbnQ7CiAgICAgIH0KICAgICAgY29uc3QgYXJncyA9IGV4dHJhY3RBcmd1bWVudChmKTsKICAgICAgY29uc3QgdXJsID0gZi5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpOwogICAgICBsZXQgcGFnZSA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5wb3N0KHVybCwgYXJncyk7CiAgICAgIHBhZ2UgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0udG9ET00ocGFnZSk7CiAgICAgIHJldHVybiBwYWdlOwogICAgfQogICAgd2l0aG91dE1pZGRsZXdhcmUgKCkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uaW5mbygnbm8gcGFnZScpOwogICAgfQogICAgYXN5bmMgZ2V0VVJMIChwYWdlKSB7CiAgICAgIGNvbnN0IGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2dvLWxpbmsnLCBwYWdlKTsKICAgICAgY29uc3QgYXJncyA9IGV4dHJhY3RBcmd1bWVudChmKTsKICAgICAgY29uc3QgdXJsID0gZi5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpOwogICAgICBsZXQgZGF0YSA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5wb3N0KHVybCwgYXJncyk7CiAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgICBpZiAoZGF0YSAmJiBkYXRhLnVybCkgewogICAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5udWtlKGRhdGEudXJsKTsKICAgICAgICByZXR1cm4gZGF0YS51cmw7CiAgICAgIH0KICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCd3cm9uZyBkYXRhJyk7CiAgICB9CiAgfQogIGNsYXNzIFNob3J0bHlIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHsKICAgIHByZXBhcmUgKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGFzeW5jIGdldE1pZGRsZXdhcmUgKCkgewogICAgICBsZXQgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjbXlNb2RhbCAuYnRuLXByaW1hcnknKTsKICAgICAgYSA9IGEucGF0aG5hbWUubWF0Y2goL15cL3JcLyguKykvKTsKICAgICAgcmV0dXJuIGFbMV07CiAgICB9CiAgICB3aXRob3V0TWlkZGxld2FyZSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5pbmZvKCdubyBwYWdlJyk7CiAgICB9CiAgICBhc3luYyBnZXRVUkwgKGlkKSB7CiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5qUXVlcnkucG9zdCgnZ2V0bGluay5waHAnLCB7aWQ6IGlkfSkuZG9uZShmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICBpZiAodXJsLm1hdGNoKC9eaHR0cC8pKSB7CiAgICAgICAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh1cmwpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwMCk7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gZXh0cmFjdEFyZ3VtZW50IChmb3JtKSB7CiAgICBjb25zdCBhcmdzID0ge307CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uZm9yRWFjaChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCQoJ2lucHV0JywgZm9ybSksICh2KSA9PiB7CiAgICAgIGFyZ3Nbdi5uYW1lXSA9IHYudmFsdWU7CiAgICB9KTsKICAgIHJldHVybiBhcmdzOwogIH0KICBhc3luYyBmdW5jdGlvbiBnZXRKUXVlcnlGb3JtIChzZWxlY3RvcikgewogICAgbGV0IGpRdWVyeSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuJDsKICAgIHdoaWxlICghalF1ZXJ5KSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwKTsKICAgICAgalF1ZXJ5ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy4kOwogICAgfQogICAgY29uc3QgZiA9IGpRdWVyeShzZWxlY3Rvcik7CiAgICBpZiAoZi5sZW5ndGggPiAwKSB7CiAgICAgIHJldHVybiBmOwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfQogIGZ1bmN0aW9uIGdldFVSTEZyb21KUXVlcnlGb3JtIChqRm9ybSkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgaWYgKGpGb3JtLmlzKCdhJykgJiYgakZvcm0uYXR0cignaHJlZicpKSB7CiAgICAgICAgcmVzb2x2ZShqRm9ybS5hdHRyKCdocmVmJykpOwogICAgICB9CiAgICAgIGNvbnN0IGpRdWVyeSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuJDsKICAgICAgalF1ZXJ5LmFqYXgoewogICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgdHlwZTogJ1BPU1QnLAogICAgICAgIHVybDogakZvcm0uYXR0cignYWN0aW9uJyksCiAgICAgICAgZGF0YTogakZvcm0uc2VyaWFsaXplKCksCiAgICAgICAgc3VjY2VzczogKHJlc3VsdCkgPT4gewogICAgICAgICAgaWYgKHJlc3VsdC51cmwpIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQudXJsKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IocmVzdWx0Lm1lc3NhZ2UpKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGVycm9yOiAoeGhyLCBzdGF0dXMsIGVycm9yKSA9PiB7CiAgICAgICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2Fybih4aHIsIHN0YXR1cywgZXJyb3IpOwogICAgICAgICAgcmVqZWN0KG5ldyBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uQWRzQnlwYXNzZXJFcnJvcigncmVxdWVzdCBlcnJvcicpKTsKICAgICAgICB9LAogICAgICB9KTsKICAgIH0pOwogIH0KfSkoKTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmxpbmtkdWl0XC5uZXQkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLmNvbC1sZy04IGgxJykudGV4dENvbnRlbnQ7CiAgICBjb25zdCBjaGVjayA9IGwubWF0Y2goL15odHRwcz86XC9cLy8pOwogICAgaWYgKGNoZWNrKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybjsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/bGlua3BsdWdhcHBcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjbWNfZW1iZWRfc2lnbnVwX3Njcm9sbCBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmxpbmtzYXNcLnVzJC8sCiAgICBwYXRoOiAvXihcL1x3KykkLywKICB9LAogIGFzeW5jIHJlYWR5IChtKSB7CiAgICBjb25zdCByZWNhcHRjaGEgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0udHJ5RXZlcnkoMTAwMCwgKCkgPT4gewogICAgICBjb25zdCByZWNhcHRjaGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJyk7CiAgICAgIGlmICghcmVjYXB0Y2hhKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgaWYgKCFyZWNhcHRjaGEudmFsdWUpIHsKICAgICAgICByZXR1cm4gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLm5vbmU7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlY2FwdGNoYS52YWx1ZTsKICAgIH0pOwogICAgY29uc3QgdXJsID0gYGh0dHA6Ly9pcGluZm8uaW8vJHtfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uZ2VuZXJhdGVSYW5kb21JUCgpfS9qc29uYDsKICAgIGxldCBpcGluZm8gPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uZ2V0KHVybCk7CiAgICBpcGluZm8gPSBKU09OLnBhcnNlKGlwaW5mbyk7CiAgICBjb25zdCBwYXlsb2FkID0gewogICAgICBjb2RlQWRzOiAxLAogICAgICBjb3VudHJ5OiBpcGluZm8uY291bnRyeSwKICAgICAgaXBBZGRyZXNzOiBpcGluZm8uaXAsCiAgICAgIHJlY2FwdGNoYTogcmVjYXB0Y2hhLAogICAgfTsKICAgIGNvbnN0IHRva2VuID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLmdldENvb2tpZSgnWFNSRi1UT0tFTicpOwogICAgbGV0IGRhdGEgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucG9zdCgnL2dvJyArIG0ucGF0aFsxXSwgcGF5bG9hZCwgewogICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAnWC1YU1JGLVRPS0VOJzogdG9rZW4sCiAgICB9KTsKICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGRhdGEubWVzc2FnZSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15saW5rc2FzXC51cyQvLAogICAgcGF0aDogL15cL2dvXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjYnRuU3VibWl0Jyk7CiAgICBpZiAoIWEpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgdXJsID0gYS5ocmVmOwogICAgY29uc3QgcGF0dGVybiA9IC9odHRwcz86XC9cLy9nOwogICAgbGV0IGxhc3RVUkwgPSAnJzsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGNvbnN0IG1hdGNoZWQgPSBwYXR0ZXJuLmV4ZWModXJsKTsKICAgICAgaWYgKCFtYXRjaGVkKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgbGFzdFVSTCA9IG1hdGNoZWQgKyB1cmwuc3Vic3RyaW5nKHBhdHRlcm4ubGFzdEluZGV4KTsKICAgIH0KICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsYXN0VVJMKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXihsaW5rc2hyaW5rfGxua3Nocm5rKVwubmV0JC8sCiAgICBwYXRoOiAvXlwvW2EtekEtWjAtOV0rJC8sCiAgfSwKICBhc3luYyBzdGFydCAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93Ll9pbXBzcGNhYmUgPSAwOwogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IGwgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL3JldkNcKCIoW14iXSspIlwpLyk7CiAgICBsID0gYXRvYihsWzFdKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluaygnLycgKyBsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXihsaW5rc2hyaW5rfGxua3Nocm5rKVwubmV0JC8sCiAgICBwYXRoOiAvPSguKykkLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobS5wYXRoWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmR3aW5kbHlcLmlvJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBsZXQgbCA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvZW5jRFwoIihbXiJdKykiXCkvKTsKICAgIGlmIChsKSB7CiAgICAgIGwgPSBhdG9iKGxbMV0pOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoJy8nICsgbCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGwgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL2RvY3VtZW50XC5sb2NhdGlvblwuaHJlZiA9ICIoW14iXSspIi8pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGxbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15saW5rc3VwdG9cLmNvbSQvLAogICAgICAvXnVwbGlua3RvXC5tZSQvLAogICAgXSwKICAgIHBhdGg6IC9eXC92aWV3XC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuc3VibWl0LWNhcHRjaGEucm93IC5jb2wtc20tMy5jb2wtc20tb2Zmc2V0LTQgYnV0dG9uJyk7CiAgICBsLmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14oZGlyZWN0LWxpbmt8bGluay10bylcLm5ldCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbHYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL3dpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCgiKFteIl0rKSJcKTsvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsdlsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14ocmQ/KWxua1wuY28kLywKICAgIHBhdGg6IC9eXC9bXi5dKyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZiA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCdpZnJhbWUjZGVzdCcpOwogICAgaWYgKGYpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGYuc3JjKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICBsZXQgbyA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjdXJsaG9sZGVyJyk7CiAgICBpZiAobykgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoby52YWx1ZSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG8gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI3NraXBCdG4nKTsKICAgIGlmIChvKSB7CiAgICAgIG8gPSBvLnF1ZXJ5U2VsZWN0b3IoJ2EnKTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG8uaHJlZik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG8gPSBkb2N1bWVudC50aXRsZS5yZXBsYWNlKC8oTE5LLmNvfExpbmtiZWUpXHMqOlxzKi8sICcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhvKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnd3d1wubG9saW5lelwuY29tJC8sCiAgICBxdWVyeTogL1w/KC4rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG0ucXVlcnlbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ed3d3XC5taWplXC5uZXQkLywKICAgIHBhdGg6IC9eXC9cdytcLyguKykkLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBjb25zdCB1cmwgPSBhdG9iKG0ucGF0aFsxXSk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9ebWluaWRyb2lkXC5uZXQkLywKICAgICAgL15saW5rcG9pXC5pbiQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYS5yZWRpcmVjdCwgYVt0YXJnZXQ9X2JsYW5rXVtyZWw9bm9mb2xsb3ddJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXm1pcnJvcmZpbGVob3N0XC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDMgKiAxMDAwKTsKICAgIGNvbnN0IGZyYW1lID0gZnJhbWVzWzBdOwogICAgY29uc3QgZm9ybSA9IGZyYW1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTsKICAgIGZvcm0udGFyZ2V0ID0gJ19wYXJlbnQnOwogICAgZm9ybS5hY3Rpb24gPSBsb2NhdGlvbi50b1N0cmluZygpOwogICAgY29uc3QgaW5wdXQgPSBmcmFtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogICAgaW5wdXQudmFsdWUgPSAnRG93bmxvYWQnOwogICAgaW5wdXQudHlwZSA9ICdzdWJtaXQnOwogICAgZm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7CiAgICBmcmFtZS5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pOwogICAgaW5wdXQuY2xpY2soKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXm1vZXN1YnNcLmNvbSQvLAogICAgcGF0aDogL15cL3VybFwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5nb3RvbGluayA+IGNlbnRlcjpudGgtY2hpbGQoMSkgPiBkaXY6bnRoLWNoaWxkKDEpID4gaTpudGgtY2hpbGQoMiknKTsKICAgIGEgPSBhLnRleHRDb250ZW50OwogICAgY29uc3QgaSA9IGEubGFzdEluZGV4T2YoJ2h0dHAnKTsKICAgIGEgPSBhLnN1YnN0cihpKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL215LWxpbmsucHJvLyonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaWZyYW1lW3Njcm9sbGluZz1hdXRvXScpOwogICAgaWYgKGkpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGkuc3JjKTsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/bXlsaW5rXC56b25lJC8sCiAgICBwYXRoOiAvXlwvW14vXSskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgY29uc3QgbWF0Y2hlcyA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvPGEgaHJlZj0iaHR0cHM6XC9cLyg/Ond3d1wuKT9teWxpbmtcLnpvbmVcL2xpbmtcL3JlZGlyZWN0XC9cP3VybD0oW14mXSspJi8pOwogICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15vbmVwaWVjZS1leFwuY29tXC5iciQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICBjb25zdCBtYXRjaGVzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC88YSBocmVmPSIoW14mXSspKD89IiApLyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobWF0Y2hlc1sxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnd3d1wubmFtaXl0XC5jb20kLywKICAgICAgL15yZWFsc2h0XC5tb2JpJC8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjc2VjdGlvbjEgZm9ybSBpbnB1dCNzZWN0aW9uMScpOwogICAgbi5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ebm1hY1wudG8kLywKICAgIHBhdGg6IC9eXC9kb3dubG9hZFwvKC4rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgY29uc3QgdXJsID0gYXRvYihtLnBhdGhbMV0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15uc2Z3XC5pbiQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjbG9uZ191cmwgYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15udXRzaGVsbHVybFwuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpZnJhbWUgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaWZyYW1lJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaWZyYW1lLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLm9uaVwudm4kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgbGV0IGRhdGEgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL2RhdGE6IihbXiJdKykiLyk7CiAgICBpZiAoIWRhdGEpIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdwYXR0ZXJuIGNoYW5nZWQnKTsKICAgIH0KICAgIGRhdGEgPSBkYXRhWzFdOwogICAgY29uc3QgdXJsID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLmdldCgnL2NsaWNrLmh0bWwnLCBkYXRhKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh1cmwpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL14od3d3XC4pP291b1wuKGlvfHByZXNzKSQvLAogICAgICAvXihzbG9vbXB8bm92YWVucmV0YSlcLnNwYWNlJC8sCiAgICBdLAogICAgcGF0aDogL15cL2dvXC9cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdmb3JtJykuc3VibWl0KCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15wXC5wdyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICBsZXQgbSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvd2luZG93XC5sb2NhdGlvbiA9ICIoLiopIjsvKTsKICAgIG0gPSBtWzFdOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ecGRpMlwubmV0JC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBsZXQgcyA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvdG9wXC5sb2NhdGlvbiA9ICcoW14nXSspJy8pOwogICAgcyA9IHNbMV07CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsocyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXihwcm9idXNpbmVzc2h1Ynx0ZWNub2diKVwuY29tJC8sCiAgICAgIC9eKHRyYWNreXdlfHN0YXJ2YXRlKVwuaW4kLywKICAgICAgL152aXJhbGNvbGxlY3RcLmluZm8kLywKICAgICAgL14odGVjaG5vZGlhfG91cnRlY2hub2V3fG11dGhhcmFtbXNzfHRoYW5kYXx0aGluYW5hKVwueHl6JC8sCiAgICAgIC9eZW50cmV0ZW5kb25hd2ViXC5nYSQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBmID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2Zvcm1baWQkPS1zdWJzY3JpYmVdJyk7CiAgICBpZiAoZikgewogICAgICBmLmFjdGlvbiA9IGYuYWN0aW9uLnJlcGxhY2UoJ2h0dHA6JywgJ2h0dHBzOicpOwogICAgICBmLnN1Ym1pdCgpOwogICAgICByZXR1cm47CiAgICB9CiAgICBmID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9sb2NhdGlvblwuaHJlZj0iKFteIl0rKSIvKTsKICAgIGYgPSBmWzFdOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ecHVjdWtcLnh5eiQvLAogICAgcGF0aDogL15cL1x3Ky8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBweCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjY29udGVudCBhcnRpY2xlIGNlbnRlciBhLmJ1dHRvbi5pY29uLmZhLWxpbmsnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhweC5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL3JpY2hsaW5rLmNvbS9hcHAvd2Vic2NyP2NtZD1fY2xpY2sma2V5PSonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBmID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ZyYW1lc2V0Jyk7CiAgICBmID0gZi5vbmxvYWQudG9TdHJpbmcoKTsKICAgIGYgPSBmLm1hdGNoKC91cmw9KFteJl0rKS8pOwogICAgaWYgKGYpIHsKICAgICAgZiA9IGRlY29kZVVSSUNvbXBvbmVudChmWzFdKTsKICAgIH0gZWxzZSB7CiAgICAgIGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZnJhbWVbbmFtZT1zaXRlXScpOwogICAgICBmID0gZi5zcmM7CiAgICB9CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15wcmV2aWV3XC5ybHVcLnJ1JC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNjb250ZW50ID4gLmxvbmdfdXJsID4gYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLnJvblwudm4kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IHNjcmlwdCA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygnbGlua25leHR0b3AnKTsKICAgIGNvbnN0IGRhdGEgPSBzY3JpcHQubWF0Y2goL2RhdGE6IihbXiJdKykiLyk7CiAgICBsZXQgdXJsID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5kb21haW4gKyAnY2xpY2suaHRtbD8nICsgZGF0YVsxXTsKICAgIHVybCA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5nZXQodXJsLCB7fSwgewogICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLAogICAgfSk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/c2FcLmFlJC8sCiAgICBwYXRoOiAvXlwvXHcrXC8kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IG0gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL2NvbnN0IHJlYWxfbGluayA9ICcoW14nXSspJzsvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhtWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/c2FmZXVybFwuZXUkLywKICAgIHBhdGg6IC9cL1x3Ky8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBsZXQgZGlyZWN0VXJsID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC93aW5kb3dcLm9wZW5cKCIoW14iXSspIlwpOy8pOwogICAgaWYgKCFkaXJlY3RVcmwpIHsKICAgICAgdGhyb3cgbmV3IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5BZHNCeXBhc3NlckVycm9yKCdzY3JpcHQgY29udGVudCBjaGFuZ2VkJyk7CiAgICB9CiAgICBkaXJlY3RVcmwgPSBkaXJlY3RVcmxbMV07CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZGlyZWN0VXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9ec2VnbWVudG5leHRcLmNvbSQvLAogICAgICAvXih3d3dcLik/dmlkZW9nYW1lc2Jsb2dnZXJcLmNvbSQvLAogICAgXSwKICAgIHBhdGg6IC9eXC9pbnRlcnN0aXRpYWxcLmh0bWwkLywKICAgIHF1ZXJ5OiAvcmV0dXJuX3VybD0oW14mXSspLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZGVjb2RlVVJJQ29tcG9uZW50KG0ucXVlcnlbMV0pKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKHd3d1wuKT9zZW1wcm90XC5jb20kLywKICAgICAgL140NlwuMTY2XC4xNjdcLjE2JC8sCiAgICBdLAogICAgcGF0aDogL15cL2FobGlcLnBocC8sCiAgICBxdWVyeTogL15cP3VybD0oLiopLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IHNlbSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvdmFyIHRoZV91cmwgPSAnKFteJ10rKSc7Lyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoc2VtWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKHd3d1wuKT9hcHBsb2FkelwucnUkLywKICAgICAgL14od3d3XC4pP3Nlb21hZmlhXC5uZXQkLywKICAgIF0sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgndGFibGUgYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgY29uc3QgaG9zdFJ1bGVzID0gWwogICAgL14oam53MHxjbGxrbWV8Y2xrbWVpbnxjb3JuZWV5fGNlZXN0eSlcLmNvbSQvLAogICAgL14oZGVzdHl5fGZlc3R5eXxnZXN0eXkpXC5jb20kLywKICAgIC9ec2hcLnN0JC8sCiAgICAvXih2aWlkfHdpaWR8Y2xrbWUpXC5tZSQvLAogIF07CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogaG9zdFJ1bGVzLAogICAgICBwYXRoOiAvXlwvZnJlZXplXC8uKy8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICBjb25zdCBvID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4gewogICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7CiAgICAgICAgICAgIGlmIChtdXRhdGlvbi50YXJnZXQuZ2V0QXR0cmlidXRlKCdjbGFzcycpLm1hdGNoKC9hY3RpdmUvKSkgewogICAgICAgICAgICAgIG8uZGlzY29ubmVjdCgpOwogICAgICAgICAgICAgIHJlc29sdmUobXV0YXRpb24udGFyZ2V0LmhyZWYpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBvLm9ic2VydmUoT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNza2lwX2J1dHRvbicpLCB7CiAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLAogICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbJ2NsYXNzJ10sCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBjb25zdCB1cmwgPSBhd2FpdCBwcm9taXNlOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogaG9zdFJ1bGVzLAogICAgICBwYXRoOiAvaHR0cHM/OlwvXC8vLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0ICgpIHsKICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaDsKICAgICAgdXJsID0gdXJsLm1hdGNoKC8oaHR0cHM/OlwvXC8uKikkLyk7CiAgICAgIHVybCA9IHVybFsxXTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IGhvc3RSdWxlcywKICAgICAgcGF0aDogL15cL1tcZFx3XSsvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0ICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5faW1wc3BjYWJlID0gMDsKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlQWxsVGltZXIoKTsKICAgICAgY29uc3QgbSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvc2Vzc2lvbklkOiAiKFtcZFx3XSspIiwvKTsKICAgICAgaWYgKG0pIHsKICAgICAgICBhZnRlckdvdFNlc3Npb25JZChtWzFdKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHsKICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaCgoKSA9PiB7CiAgICAgICAgICBjb25zdCBtID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9zZXNzaW9uSWQ6ICIoW1xkXHddKykiLC8pOwogICAgICAgICAgaWYgKG0pIHsKICAgICAgICAgICAgby5kaXNjb25uZWN0KCk7CiAgICAgICAgICAgIGFmdGVyR290U2Vzc2lvbklkKG1bMV0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgby5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgIH0pOwogICAgfSwKICB9KTsKICBmdW5jdGlvbiBhZnRlckdvdFNlc3Npb25JZCAoc2Vzc2lvbklkKSB7CiAgICBjb25zdCBYX05ld1JlbGljX0lEID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC94cGlkOiIoW14iXSspIi8pOwogICAgY29uc3QgZGF0YSA9IHsKICAgICAgYWRTZXNzaW9uSWQ6IHNlc3Npb25JZCwKICAgIH07CiAgICBjb25zdCBoZWFkZXIgPSB7CiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCcsCiAgICB9OwogICAgaWYgKFhfTmV3UmVsaWNfSUQpIHsKICAgICAgaGVhZGVyWydYLU5ld1JlbGljLUlEJ10gPSBYX05ld1JlbGljX0lEOwogICAgfQogICAgY29uc3QgaSA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLmdldCgnL3Nob3J0ZXN0LXVybC9lbmQtYWRzZXNzaW9uJywgZGF0YSwgaGVhZGVyKS50aGVuKGZ1bmN0aW9uICh0ZXh0KSB7CiAgICAgICAgY29uc3QgciA9IEpTT04ucGFyc2UodGV4dCk7CiAgICAgICAgaWYgKHIuc3RhdHVzID09ICdvaycgJiYgci5kZXN0aW5hdGlvblVybCkgewogICAgICAgICAgY2xlYXJJbnRlcnZhbChpKTsKICAgICAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmVBbGxUaW1lcigpOwogICAgICAgICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHIuZGVzdGluYXRpb25VcmwpOwogICAgICAgICAgcmV0dXJuIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh1cmwpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LCAxMDAwKTsKICB9Cn0pKCk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14oc2hvcnR8c3J0KVwuYW0kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwMDApOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKCcnLCB7CiAgICAgIHBvc3Q6IHsKICAgICAgICBfaW1hZ2U6ICdDb250aW51ZScsCiAgICAgIH0sCiAgICB9KTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/c2hvcnRpXC5nYSQvLAogICAgcGF0aDogWwogICAgICAvXlwvXHcrJC8sCiAgICAgIC9eXC91cmxfcmVkaXJlY3RvclwuaHRtbCQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGYgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCQoJ2ZyYW1lJyk7CiAgICBjb25zdCBbLCB2LF0gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uZmluZChmLCAodmFsdWUpID0+IHsKICAgICAgaWYgKHZhbHVlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkgewogICAgICAgIHJldHVybiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9uZTsKICAgICAgfQogICAgICByZXR1cm4gJ1RhcmdldCBmcmFtZSBmb3VuZCc7CiAgICB9KTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayh2LnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15zaG9ydGlkXC5jbyQvLAogICAgcGF0aDogL15cL1thLXpBLVowLTldKy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBzID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2EjbWFraW5nZGlmZmVyZW50dGltZXInKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhzLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eZ2V0XC5zaHJpbmstc2VydmljZVwuaXQkLywKICAgIHBhdGg6IC9eXC8oLispLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYC8vd3d3LnNocmluay1zZXJ2aWNlLml0L3Nocmlua2VkLyR7bS5wYXRoWzFdfWApOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ed3d3XC5zaHJpbmstc2VydmljZVwuaXQkLywKICAgIHBhdGg6IC9eXC9zaHJpbmtlZFwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaW5wdXRbaWRdW25hbWVdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaS52YWx1ZSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLnNocmluay1zZXJ2aWNlXC5pdCQvLAogICAgcGF0aDogL15cL1tzZV1cLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYm9keSA+IGlucHV0W2lkXVtuYW1lXScpOwogICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGkudmFsdWUpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ec2h0XC5pbyQvLAogICAgcGF0aDogL15cL1xkK1wvKC4rKSQvLAogIH0sCiAgYXN5bmMgc3RhcnQgKG0pIHsKICAgIGxldCB1cmwgPSBhdG9iKG0ucGF0aFsxXSk7CiAgICB1cmwgPSB1cmwubWF0Y2goL1x7c2h0LWlvXH0oLispXHtzaHQtaW9cfS4qXHtzaHQtaW9cfS8pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybFsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15zaHRsaW5rXC5jbyQvLAogICAgcGF0aDogL15cL3Nob3J0LXVybFwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IG1ldGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnbWV0YVtuYW1lPSJkZXNjcmlwdGlvbiJdJyk7CiAgICBjb25zdCB1cmwgPSBtZXRhLmNvbnRlbnQ7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnNodG1lXC5jbyQvLAogICAgcGF0aDogL15cL1x3Ky8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBzID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5jb250ZW50IGRpdiBhIGJ1dHRvbicpOwogICAgcy5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT9zaW1pbGFyc2l0ZXNcLmNvbSQvLAogICAgcGF0aDogL15cL2dvdG9cLyhbXj9dKykvCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgbGV0IGwgPSBtLnBhdGhbMV07CiAgICBpZiAoIS9eaHR0cHM/OlwvXC8vLnRlc3QobCkpIHsKICAgICAgbCA9ICdodHRwOi8vJyArIGw7CiAgICB9CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15zbGlua1wuYmlkJC8sCiAgICBwYXRoOiAvXlwvc2hvcnRcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy50ZXh0LWNlbnRlciBhI2J0bi1tYWluLmJ0bi5idG4tbWFpbicpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLnNwYXN0ZVwuY29tJC8sCiAgICBwYXRoOiAvXlwvZ29cL1x3KyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaWQgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL1x7aWQ6JyhcZCspJ1x9Lyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCgzMDAwKTsKICAgIGNvbnN0IHVybCA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5wb3N0KCcvc2l0ZS9nZXRSZWRpcmVjdExpbmsnLCB7CiAgICAgIGlkOiBpZFsxXSwKICAgIH0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLnNwYXN0ZVwuY29tJC8sCiAgICBwYXRoOiAvXlwvKHN8c2l0ZSlcL1x3KyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgY2FwdGNoYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjZ2xvYmFsQ2FwdGNoYUNvbmZpcm0nKTsKICAgIGNhcHRjaGEuY2xpY2soKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDEwMDApOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHsKICAgICAgY29uc3Qgd29yZCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjY3VycmVudENhcFF1ZScpLnRleHRDb250ZW50OwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCgxMDApOwogICAgICBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKShgW2RhdGEtaWQ9JyR7d29yZH0nXWApLmNsaWNrKCk7CiAgICB9CiAgICBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3RlbXBsYXRlLWNvbnRhY3Rmb3JtLXN1Ym1pdCcpLmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15zdWIydW5sb2NrXC5jb20kLywKICAgIHBhdGg6IC9eXC9saW5rXC9nZXRcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBzdSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdhI2xpbmsudW5sb2NrLXN0ZXAtbGluay5nZXRsaW5rJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoc3UuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15zdWIydW5sb2NrXC5jb20kLywKICAgIHBhdGg6IC9eXC9bYS16QS1aMC05XSsvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3Qgc3UgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoLydocmVmJywgJyhbXiddKyknLyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoc3VbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT9zdXBlcmNoZWF0c1wuY29tJC8sCiAgICBwYXRoOiAvXlwvaW50ZXJzdGl0aWFsXC5odG1sJC8sCiAgICBxdWVyeTogLyg/Olw/fCYpb2xkdXJsPShbXiZdKykoPzokfCYpLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobS5xdWVyeVsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15zdXJmc2Vlc1wuY29tJC8sCiAgICBxdWVyeTogL15cP2dvPShbYS16QS1aMC05XSspJC8sCiAgfSwKICBhc3luYyBzdGFydCAoKSB7CiAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgnZ28nLCAnbGluaycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHBhdGgpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ec3VyZnNlZXNcLmNvbSQvLAogICAgcXVlcnk6IC9eXD9saW5rPShbYS16QS1aMC05XSspKGNsaWNrYXJ1cmwpPyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgcyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdpbnB1dC5idG4uYnRuLXByaW1hcnknKTsKICAgIHMuY2xpY2soKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnN1cmZzZWVzXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IHN1cmwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3dwc2FmZS1saW5reiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoc3VybC5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnN3enpcLnh5eiQvLAogICAgcGF0aDogL15cL2xpbmtcL1x3K1wvJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBnID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2EuYnRuLXdyYXBwZXIubGluaycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGcuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogWwogICAgewogICAgICBob3N0OiAvXih3d3dcLik/c3lsbmtcLm5ldCQvLAogICAgICBxdWVyeTogL2xpbms9KFteJl0rKS8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXih3d3dcLik/Y29tcHVsXC5pbiQvLAogICAgICBwYXRoOiAvXlwvW25wXVwucGhwJC8sCiAgICAgIHF1ZXJ5OiAvdj0oW14mXSspLywKICAgIH0sCiAgICB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXihzcG9ydHMxNHxtb3Rvc3BvcnQpXC5wdyQvLAogICAgICAgIC9ebGluZHVuZ1wuaW4kLywKICAgICAgICAvXm1vdG9uZXdzXC5jbHViJC8sCiAgICAgICAgL153d1syM11cLnBpY25pY3RyYW5zXC5jb20kLywKICAgICAgICAvXihhemhpZXxza2lubnljYXQpXC5uZXQkLywKICAgICAgICAvXnd3MlwuYXdzdWJzXC5jbyQvLAogICAgICAgIC9ecGxhbnRhaGVpbVwuKHdlYlwuaWR8Y29tKSQvLAogICAgICAgIC9eaXJpc3ZlcmFcLmNvbSQvLAogICAgICBdLAogICAgICBxdWVyeTogL15cP2Q9KFthLXpBLVowLTkvPV0rKSQvLAogICAgfSwKICAgIHsKICAgICAgaG9zdDogWwogICAgICAgIC9eaVwuZ3RhaW5kXC5jb20kLywKICAgICAgICAvXnBlYmlzbmlzLW11ZGFcLmNvbSQvLAogICAgICAgIC9eaGlrYXJpbm9ha2FyaW9zdFwuaW5mbyQvLAogICAgICBdLAogICAgICBxdWVyeTogL15cPyhbYS16QS1aMC05Lz1dKykkLywKICAgIH0sCiAgICB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXC5ibG9nc3BvdFwuY29tPy8sCiAgICAgICAgL14od3d3XC4pP2Rlc2lnbm15aG9tZWVcLmNvbSQvLAogICAgICAgIC9eKHd3d1wuKT9sb3NzdG9yXC5jb20kLywKICAgICAgICAvXigoa3Vyb3NhZmV8a3Vyb3NhZmV0eSlcLik/bWVuYW50aXNlbmphXC5jb20kLywKICAgICAgICAvXmRyaXZlXC5qZXBpdGtlcnRhc1wuY29tJC8sCiAgICAgICAgL15sZXdhdFwud2lidWluZG9cLmNvbSQvLAogICAgICAgIC9eKG9tZ211c2lrfG9tZ2x5cmljc3xrMm5ibG9nKVwuY29tJC8sCiAgICAgICAgL14oc2ltYWhvbGluYXxhdXRlY2gpXC54eXokLywKICAgICAgICAvXih3d3dcLik/aWQtc2VjdXJlbGlua1wueHl6JC8sCiAgICAgICAgL14od3d3XC4pP2NvbnZlcnRoaW5rc1wueHl6JC8sCiAgICAgICAgL14od3d3XC4pP21hcml2ZWxrZWNlXC54eXokLywKICAgICAgICAvXih3d3dcLik/eWFtZXRlc2VucGFpXC54eXokLywKICAgICAgICAvXih3d3dcLik/dG9qcm9zXC50ayQvLAogICAgICAgIC9eKHd3d1wuKT9hbmpheVwuaW5mbyQvLAogICAgICAgIC9eKHd3d1wuKT9rYWtrb2lpc2FmZVwudXMkLywKICAgICAgICAvXih3d3dcLik/a3Vyb3NhZmVcLih3ZWJzaXRlfG9ubGluZSkkLywKICAgICAgICAvXih3d3dcLik/ZHJha29yc2FmZVwudGVjaCQvLAogICAgICAgIC9eKGZtbGF3a2Vyc3xpbmRleG1vdmllKVwuY2x1YiQvLAogICAgICAgIC9ebWljaW5cLm9ubGluZSQvLAogICAgICAgIC9edW5kdWhcLmluLywKICAgICAgICAvXmFkNG1zYW5cLndpbiQvLAogICAgICAgIC9ebm9veXVsXC5jbyQvLAogICAgICAgIC9ecGFmcGFmXC5pbmZvJC8sCiAgICAgICAgL15oaWdodGVjaFwud2ViXC5pZCQvLAogICAgICBdLAogICAgICBxdWVyeTogWwogICAgICAgIC9eXD91cmw9KFthLXpBLVowLTkvPV0rKSQvLAogICAgICAgIC9eXD9pZD0oW2EtekEtWjAtOS89XSspJC8sCiAgICAgICAgL15cP3NpdGU9KFthLXpBLVowLTkvPV0rKSQvLAogICAgICBdLAogICAgfSwKICAgIHsKICAgICAgaG9zdDogWwogICAgICAgIC9eKHNlaGF0bGVnYXxkYXZpbnN1cmFuY2V8aGVhbHRodG9kfGlyaXN2ZXJhfGFrYW5vc29yYXxzdWJldGVuZXdzKVwuY29tJC8sCiAgICAgICAgL14od3d3XC4pP21lbmFudGlzZW5qYVwuY29tJC8sCiAgICAgICAgL14oYnVzaW5lc3Nmb3J5b3VhbmR8dHJhdmVsd2l0aHRyaWNrc3xzaXR1c2JhcnUpXC5tZSQvLAogICAgICAgIC9ecGxhbnRhaGVpbVwuKHdlYlwuaWR8Y29tKSQvLAogICAgICAgIC9eKHd3d1wuKT9zdGFyem9uZVwuY2MkLywKICAgICAgICAvXih3d3dcLik/a2Fra29paXNhZmVcLnVzJC8sCiAgICAgICAgL14od3d3XC4pP3BvbHJlY1wuc2l0ZSQvLAogICAgICAgIC9eeXVtZWNoYW5cLmNsdWIkLywKICAgICAgICAvXmNla2xpbmt1XC54eXokLywKICAgICAgICAvXmxpbmR1bmdcLihpbnxtZSkkLywKICAgICAgXSwKICAgICAgcXVlcnk6IC9eXD9yPShbYS16QS1aMC05Lz1dKykkLywKICAgIH0sCiAgICB7CiAgICAgIGhvc3Q6IC9ed3d3XC5jb21wYXJ0aWVuZG9mdWxsXC5uZXQkLywKICAgICAgcGF0aDogL15cL2dvMi8sCiAgICAgIHF1ZXJ5OiAvXlw/cD0oW2EtekEtWjAtOS89XSspJC8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXmFuaW1lZm9yY2VcLnN0cmVhbSQvLAogICAgICBxdWVyeTogL15cP2w9KFthLXpBLVowLTkvPV0rKSQvLAogICAgfSwKICAgIHsKICAgICAgaG9zdDogL14od3d3XC4pP2R1a3VuLWNpdFwuY29tJC8sCiAgICAgIHF1ZXJ5OiAvXlw/cz0oW2EtekEtWjAtOS89XSspJC8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXnVsdGltYXRlXC50dXJrZG93blwuY29tJC8sCiAgICAgIHF1ZXJ5OiAvXlw/c3RlcG9uZT0oW2EtekEtWjAtOS89XSspJC8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXmxlZWNocHJlbWl1bVwubGluayQvLAogICAgICBwYXRoOiAvXlwvY2hlYXRcLy8sCiAgICAgIHF1ZXJ5OiAvXlw/bGluaz0oW2EtekEtWjAtOS89XSspJC8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXmNsb3NldG9waWNcLnNpdGUkLywKICAgICAgcXVlcnk6IC9eXD9nbz0oW2EtekEtWjAtOS89XSspJC8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXmluZm9zaWFcLnh5eiQvLAogICAgICBxdWVyeTogL15cP2tlc2VoYXRhbj0oW2EtekEtWjAtOS89JV0rKSQvLAogICAgfSwKICAgIHsKICAgICAgaG9zdDogL15yZW1peXVcLm1lJC8sCiAgICAgIHF1ZXJ5OiAvXlw/cmVmZj0oW2EtekEtWjAtOS89XSspJC8sCiAgICB9LAogIF0sCiAgYXN5bmMgc3RhcnQgKG0pIHsKICAgIGNvbnN0IHJhd0xpbmsgPSBhdG9iKGRlY29kZVVSSUNvbXBvbmVudChtLnF1ZXJ5WzFdKSk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocmF3TGluayk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogWwogICAgewogICAgICBob3N0OiBbCiAgICAgICAgLyhefFwuKXNhZmVsaW5rKGNvbnZlcnRlcnxyZXZpZXd4PylcLmNvbT8kLywKICAgICAgICAvXmdpZ2E3NFwuY29tJC8sCiAgICAgICAgL14oYXdzdWJzY298YWQ0bXNhbilcLm1sJC8sCiAgICAgICAgL15uZWtvcG9pXC5nYSQvLAogICAgICBdLAogICAgICBxdWVyeTogL2lkPShbXHdcXF0rPSopLywKICAgIH0sCiAgICB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXihuYWlzaG98ZmlsbWt1fGhlbnBvaSlcLmxvbXBhdFwuaW4kLywKICAgICAgICAvXmVkb2dhd2FcLmxvblwucHckLywKICAgICAgICAvXnRlbG9sZXRcLmluJC8sCiAgICAgIF0sCiAgICAgIHF1ZXJ5OiAvZ289KFtcd1xcXSs9KikvLAogICAgfSwKICBdLAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBsZXQgbCA9IGF0b2IobS5xdWVyeVsxXSk7CiAgICBjb25zdCB0YWJsZSA9IHsKICAgICAgJyEnOiAnYScsCiAgICAgICcpJzogJ2UnLAogICAgICAnXyc6ICdpJywKICAgICAgJygnOiAnbycsCiAgICAgICcqJzogJ3UnLAogICAgfTsKICAgIGwgPSBsLnJlcGxhY2UoL1shKV8oKl0vZywgZnVuY3Rpb24gKG0pIHsKICAgICAgcmV0dXJuIHRhYmxlW21dOwogICAgfSk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3NhZmVsaW5rcmV2aWV3XC5jb20kLywKICAgIHBhdGg6IC9eXC9cdytcL2Nvc3RcLyhbXHcuXSspXC8/JC8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgY29uc3QgbCA9ICdodHRwOi8vJyArIG0ucGF0aFsxXTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKGdhbWVpbmZvfGFwYXNpaHxhdXRvcmlkZSlcLnB3JC8sCiAgICAgIC9eKHd3d1wuKT9saWZlc3VyYW5jZVwuaW5mbyQvLAogICAgICAvXnNwZWVkY2FyXC5jbHViJC8sCiAgICAgIC9eKHd3d1wuKT9ib2xhb2tlXC5jbHViJC8sCiAgICAgIC9eKGludGVyY2VsZXN0aWFsfHN3ZWV0bGFudGVybnxkYXZpbnN1cmFuY2V8dGVjaG5sYWIpXC5jb20kLywKICAgICAgL15hd2NhclwuaWN1JC8sCiAgICAgIC9ec2t5aW5zdXJhbmNlXC5tbCQvLAogICAgICAvXihnZXRpbmZvc3xzZWhhdHNlZ2FyfGxvbmVseW1vb24pXC5uZXQkLywKICAgICAgL15zdHRcLmF3c3Vic1wuY28kLywKICAgICAgL14od2lidWluZG98bmF0dXJhbGhlYWx0aHkpXC54eXokLywKICAgICAgL153YWlmdXNhZmVcLm9vbyQvLAogICAgXSwKICAgIHF1ZXJ5OiAvXlw/KGlkfGN8ayk9KFthLXpBLVowLTkvPV0rKSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdmb3JtJyk7CiAgICBmLnN1Ym1pdCgpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL14obGlua2FjaHxhdXRvbGlua2FjaClcLmNvbSQvLAogICAgXSwKICAgIHF1ZXJ5OiAvXlw/aWQ9KFthLXpBLVowLTkvPV0rKSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuaHVtYW5jaGVjayBmb3JtJyk7CiAgICBnLnN1Ym1pdCgpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IFsKICAgIHsKICAgICAgaG9zdDogWwogICAgICAgIC9ebW90b25ld3NcLmNsdWIkLywKICAgICAgICAvXih3d3dcLik/Ym9sYW9rZVwuY2x1YiQvLAogICAgICAgIC9eKGFuaS1zaGFyZXxhdXRvbGlua2FjaClcLmNvbSQvLAogICAgICAgIC9eKGF1dG9mYW5zfGxhbmRzY2FwZW5hdHVyZSlcLnB3JC8sCiAgICAgICAgL14od3d3XC4pP2xpZmVzdXJhbmNlXC5pbmZvJC8sCiAgICAgIF0sCiAgICAgIHF1ZXJ5OiAvZ2V0PShbXiZdKykvLAogICAgfSwKICAgIHsKICAgICAgaG9zdDogWwogICAgICAgIC9eKGdhbWVpbmZvKVwucHckLywKICAgICAgICAvXih3d3dcLik/bGlmZXN1cmFuY2VcLmluZm8kLywKICAgICAgICAvXnNwZWVkY2FyXC5jbHViJC8sCiAgICAgICAgL14od3d3XC4pP2JvbGFva2VcLmNsdWIkLywKICAgICAgICAvXihhdXRvbGlua2FjaHxkYXZpbnN1cmFuY2UpXC5jb20kLywKICAgICAgICAvXmF3Y2FyXC5pY3UkLywKICAgICAgICAvXnNreWluc3VyYW5jZVwubWwkLywKICAgICAgICAvXihnZXRpbmZvcylcLm5ldCQvLAogICAgICAgIC9ec3R0XC5hd3N1YnNcLmNvJC8sCiAgICAgICAgL153aWJ1aW5kb1wueHl6JC8sCiAgICAgIF0sCiAgICB9LAogIF0sCiAgYXN5bmMgcmVhZHkgKG0pIHsKICAgIGxldCBzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC8oY29uc3R8dmFyKSBhPScoW14nXSspJy8pOwogICAgaWYgKHMpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHNbMl0pOwogICAgICByZXR1cm47CiAgICB9CiAgICBzID0gYXRvYihtLnF1ZXJ5WzFdKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhzKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9ed2FpZnVzYWZlXC5vb28kLywKICAgICAgL15uYXR1cmFsaGVhbHRoeVwueHl6JC8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhaXQoMTAwMCk7CiAgICBjb25zdCBsbiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjbGFuZGluZy5ydXJhc2FmZWN0cmwgLnRvIGEnKTsKICAgIGxuLmNsaWNrKCk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCgxMDAwKTsKICAgIGNvbnN0IHRsID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5ydXJhc2FmZWN0cmwgaW1nI3Nob3dsaW5rLnNwb2ludCcpOwogICAgdGwuY2xpY2soKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9eKHNlaGF0c2VnYXJ8bG9uZWx5bW9vbilcLm5ldCQvLAogICAgICAvXihpbnRlcmNlbGVzdGlhbHxzd2VldGxhbnRlcm4pXC5jb20kLywKICAgIF0sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCgxMDAwKTsKICAgIGNvbnN0IGxuID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNsYW5kaW5nLnNvcmFjdHJsIC50byBhJyk7CiAgICBsbi5jbGljaygpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhaXQoMjAwMCk7IAogICAgY29uc3QgdGwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLnNvcmFjdHJsIGltZyNzaG93bGluay5zcG9pbnQnKTsKICAgIHRsLmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXihsaW5rYWNofHRlY2hubGFiKVwuY29tJC8sCiAgICAgIC9eKGFwYXNpaHxhdXRvcmlkZSlcLnB3JC8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhaXQoMTAwMCk7CiAgICBjb25zdCBsbiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjbGFuZGluZy5zb3JhY3RybCAudG8gYScpOwogICAgbG4uY2xpY2soKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwMDApOyAKICAgIGNvbnN0IHRsID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5zb3JhY3RybCBpbWcjc2hvd2xpbmsuc3BvaW50Jyk7CiAgICB0bC5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ebGV3YXRcLmluJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBsID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNsYW5qdXQgPiAjZ29lcyA+IGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ec2FyZGVhdGhcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3Qgc2QgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLmRvd25sb2FkLWxpbmsgPiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoc2QuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15nb291XC5pbiQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjZG93bmxvYWRfbGluayA+IGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhnLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IFsKICAgIHsKICAgICAgaG9zdDogL150b3V0LWRlYnJpZFwubmV0JC8sCiAgICAgIHBhdGg6IC9eXC9hcGlcLy8sCiAgICB9LAogICAgewogICAgICBob3N0OiAvXjE2M1wuMTcyXC44M1wuMTQ1JC8sCiAgICAgIHBhdGg6IC9eXC9kZWJcL2FwaVwvLywKICAgIH0sCiAgXSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCB0ID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5kb3dubG9hZC1ib3ggPiBkaXYgPiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodC5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmRyaXZlaHViXC5saW5rJC8sCiAgICBwYXRoOiAvXlwvZmlsZVwucGhwLywKICAgIHF1ZXJ5OiAvXlw/aWQ9KC4rKS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBkID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5pbmZvYm94ID4gY2VudGVyID4gYiA+IGEjcHJvY2VlZC5idG4uYnRuLWRhbmdlcicpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGQuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15rb21iYXRjaFwubG9uY2F0XC5wdyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IHMgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uc2VhcmNoRnJvbVNjcmlwdHMoL1wub3BlblwoIihbXiJdKykiLC8pOwogICAgcyA9IHNbMV0ubWF0Y2goL2dvPShbXiZdKykvKTsKICAgIHMgPSBhdG9iKHNbMV0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ec2tpcGxpbmtcLmlvJC8sCiAgICBwYXRoOiAvXlwvZ2V0XC9saW5rXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgcyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcucGFuZWwucGFuZWwtZGVmYXVsdC5wYW5lbC1ib2R5ID4gY2VudGVyID4gY2VudGVyID4gYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHMuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXih2MVwuKT9oZXhhZmlsZVwubmV0JC8sCiAgICAgIC9ec2tpcGxpbmtcLmlvJC8sCiAgICBdLAogICAgcGF0aDogL15cL1thLXpBLVowLTldKy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBoID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC89IihbXiJdKykiLGU9MCxmPWEvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhoWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmRyaXZlZmlsZXNcLmJpZCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZCA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvd2luZG93XC5vcGVuXCgnKFteJ10rKSdcKTsvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhkWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmFuZHJvaWQtMVwuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9pZD1kb3dubG9hZD48XC9kaXY+PGEgaHJlZj0oW14+XSspPi8pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGFbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eYm9vc3RcLmluayQvLAogIH0sCiAgYXN5bmMgc3RhcnQgKCkgewogICAgY29uc3QgYiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdib2R5JykuZ2V0QXR0cmlidXRlKCdyZXN1bHQnKTsKICAgIGlmIChiKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhdG9iKGIpKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybjsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmRvd25sb2FkLW1pcnJvclwuZ2EkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGRtID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9hIGhyZWY9JyhbXiddKyknLyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoZG1bMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9edXJsXC5odWxibG9nXC5jb20kLywKICAgIHBhdGg6IC9eXC9bYS16QS1aMC05XSsvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaCA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvImhyZWY9JyhbXiddKyknLyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoaFsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnd3WzIzXVwucGljbmljdHJhbnNcLmNvbSQvLAogICAgICAvXnNob3J0XC5hd3N1YnNcLihjb3xtZSkkLywKICAgIF0sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2Rpdi5raXJpID4gY2VudGVyID4gYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXih3d3dcLik/YW5qYXlcLmluZm8kLywKICAgICAgL14od3d3XC4pP3RldGV3XC5pbmZvJC8sCiAgICAgIC9ed3d3XC5uamlpclwuY29tJC8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZGl2LmRvd25sb2FkLWxpbmsgPiBhJyk7CiAgICBhID0gYS5ocmVmLm1hdGNoKC9yPSguKikkLyk7CiAgICBhID0gYXRvYihhWzFdKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9ec3BhY2V0aWNhXC5jb20kLywKICAgICAgL15za2lubnljYXRcLm9yZyQvLAogICAgXSwKICAgIHBhdGg6IC9eXC9cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLmJ0bicpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGwuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15kYXVuc2hvcnRlXC50ZWtub2xvZ2lsaW5rXC5jb20kLywKICAgIHBhdGg6IC9eXC9saW5rc2hvcnRlbGlua1wvc2FmZWxpbmtcLnBocCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdkaXYuYXJ0aWNsZSA+IGRpdjpudGgtY2hpbGQoMSkgPiBjZW50ZXIgPiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobC5ocmVmLCB7CiAgICAgIHJlZmVyZXI6IGZhbHNlLAogICAgfSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL150ZWtub3NhZmVcLnRla25vbG9naWxpbmtcLmNvbSQvLAogICAgcGF0aDogL15cL2xpbmt0ZWtub2xpbmtcL3NhZmVsaW5rc2NyaXB0XC5waHAkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3RlbXBsYXRlbW9fY29udGVudCA+IGRpdiA+IGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsLmhyZWYsIHsKICAgICAgcmVmZXJlcjogZmFsc2UsCiAgICB9KTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnphcFwuaW4kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IHogPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLnBhbmVsLWJvZHkgYnV0dG9uJyk7CiAgICB6LmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXihzYXRhbmlhYmF0Y2h8Z2V0LWNsaWNrMilcLmJsb2dzcG90XC5jb20kLywKICAgICAgL14od3d3XC4pP3ZlaGljbGUtdGVjaG5vXC5jZiQvLAogICAgICAvXih3d3dcLik/dGV0ZXdsaW5rXC5tZSQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGNsYnQgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYnV0dG9uI2dvdG9saW5rJyk7CiAgICBjbGJ0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDEpOwogICAgY2xidC5jbGljaygpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaWRuYXRpb25cLm5ldCQvLAogICAgcXVlcnk6IC9eXD9wYWdlPS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBsID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNsaW5rbycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGwuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL150ZWNoZnVuZGFcLm5ldCQvLAogICAgcGF0aDogWwogICAgICAvXlwvbGlua1wvLywKICAgICAgL15cL3NhZmVcLy8sCiAgICBdLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuaGlkZSBhLmJ0bicpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL150aGluZmlcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdkaXYgcCBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmhlbGxvXC50cmlidW50ZWtub1wuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2RpdiBwIHUgYiBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiBbCiAgICB7CiAgICAgIGhvc3Q6IC9edGlueWFycm93c1wuY29tJC8sCiAgICAgIHBhdGg6IC9eXC9wcmV2aWV3XC5waHAkLywKICAgICAgcXVlcnk6IC9eXD9wYWdlPShbXiZdKykvLAogICAgfSwKICAgIHsKICAgICAgaG9zdDogL153d3dcLmphdmxpYnJhcnlcLmNvbSQvLAogICAgICBxdWVyeTogL3VybD0oLispJC8sCiAgICB9LAogIF0sCiAgYXN5bmMgc3RhcnQgKG0pIHsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhkZWNvZGVVUklDb21wb25lbnQobS5xdWVyeVsxXSkpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT90b3RhbGRlYnJpZFwub3JnJC8sCiAgICBwYXRoOi9cL2xcLyhsXC5waHApPyQvLAogICAgcXVlcnk6IC9cP2Fkcz0oW2EtekEtWjAtOT1dKykkLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBjb25zdCBsID0gYXRvYihtLnF1ZXJ5WzFdKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnR1cmtkb3duXC5jb20kLywKICAgIHBhdGg6IC9eXC9saW5rLywKICAgIHF1ZXJ5OiAvXlw/aWQ9KC4rKS8sCiAgfSwKICBhc3luYyByZWFkeSAobSkgewogICAgbGV0IGh0bWwgPSBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uZ2V0KGA/YWpheD0ke20ucXVlcnlbMV19YCk7CiAgICBodG1sID0gSlNPTi5wYXJzZShodG1sKTsKICAgIGNvbnN0IHJlcyA9IC9zdGVwb25lPSguKykvLmV4ZWMoaHRtbC51cmwpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGF0b2IocmVzWzFdKSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL151XC50byQvLAogICAgcGF0aDogL15cL1tcdy1dKy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCB1ID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC93aW5kb3cubG9jYXRpb249JyhbXiddKyknOy8pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9edW5mYWtlXC5pdCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZnJhbWUgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZnJhbWUnKTsKICAgIGNvbnN0IGkgPSBmcmFtZS5zcmMubGFzdEluZGV4T2YoJ2h0dHA6Ly8nKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhmcmFtZS5zcmMuc3Vic3RyKGkpKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9edXJcLmx5JC8sCiAgICAgIC9edXJseVwubW9iaSQvLAogICAgXSwKICAgIHBhdGg6IC9eXC94KC4rKS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgnL3gnLCAnL2dvaWkvJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgfQp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnVybFwuZm0kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2NsaWNrYnRuIGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9edXJsXC5pZSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdhW3RpdGxlPSJMaW5rIHRvIG9yaWdpbmFsIFVSTCJdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC8oXnxcLil1cmxjYXNoXC4oY29tfG5ldHxvcmcpJC8sCiAgICAgIC9eKGJhdDV8ZGV0b25hdGluZ3xjZWxlYmNsa3xlaWdodHRlZW58c21pbGluZ2xpbmtzfHBlZWthdG15Z2lybGZyaWVuZHxwb3JueWhvc3R8Y2xiMXx1cmxnYWxsZXJpZXMpXC5jb20kLywKICAgICAgL15sb29ibGVcLm5ldCQvLAogICAgICAvXnh4eHNcLm9yZyQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGlmIChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93ICYmIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cubGlua0Rlc3RVcmwpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cubGlua0Rlc3RVcmwpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBtYXRjaGVzID0gZG9jdW1lbnQuYm9keS5pbm5lckhUTUwubWF0Y2goL2xpbmtEZXN0VXJsID0gJyguKyknLyk7CiAgICBpZiAobWF0Y2hlcykgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobWF0Y2hlc1sxXSk7CiAgICAgIHJldHVybjsKICAgIH0KICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnVybGlublwuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBtID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ01FVEFbSFRUUC1FUVVJVj1yZWZyZXNoXScpLmdldEF0dHJpYnV0ZSgnQ09OVEVOVCcpLm1hdGNoKC91cmw9JyhbXiddKyknLyk7CiAgICBpZiAobSkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobVsxXSk7CiAgICB9CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL151cmxtc1wuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpZnJhbWUgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2NvbnRlbnQnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhpZnJhbWUuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/dXJsdjJcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKCdsb2NrZWQnKSA+PSAwKSB7CiAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgnL2xvY2tlZCcsICcnKTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHBhdGgpOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBtID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9qZXRvbj0oW1x3XSspLyk7CiAgICBjb25zdCBsID0gJ2h0dHA6Ly91cmx2Mi5jb20vYWxnby5waHA/YWN0aW9uPXBhc3NlciZweD0wJnNvPTEmamV0b249JyArIG1bMV07CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg1ICogMTAwMCk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3Vza2lwXC5tZSQvLAogICAgcGF0aDogL15cL2dvXC9cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2J0bi1tYWluJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnV4OVwuZGUkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IG1ldGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnbWV0YVtodHRwLWVxdWl2PSJyZWZyZXNoIl1bY29udGVudCo9InVybD0iXScpOwogICAgY29uc3QgdXJsID0gbWV0YS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKS5tYXRjaCgvaHR0cC4qLylbMF07CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsodXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnZhdmlcLmNvJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBsID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNnb0xpbmsnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9edmNyeXB0XC5uZXQkLywKICAgIHBhdGg6IC9eXC9mYXN0c2hpZWxkXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgdiA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdmb3JtIGlucHV0LmJ0bmNvbnRpbnVlJyk7CiAgICB2LmNsaWNrKCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLnZpaWRpaVwuaW5mbyQvLAogICAgcXVlcnk6IC91cmw9KFteJl0rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KG0ucXVlcnlbMV0pOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLnZpaWRpaVwuaW5mbyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuYmdsaW5rJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3Blbkxpbmsoby5ocmVmKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/dmlyXC5hbCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5zZWFyY2hGcm9tU2NyaXB0cygvY29uc3QgdGFyZ2V0X3VybCA9ICcoW14nXSspJzsvKTsKICAgIGlmICghbSkgewogICAgICB0aHJvdyBuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IoJ3NpdGUgY2hhbmdlZCcpOwogICAgfQogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKG1bMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eKHd3d1wuKT92enR1cmxcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgZnJhbWUgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZnJhbWVbc2Nyb2xsaW5nPXllc10nKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhmcmFtZS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ec3RcLndhcmRoYW5pbWVcLm5ldCQvLAogICAgcGF0aDogL15cL2lcL1xkKyQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjd3JhcHBlciA+IFtjbGFzc149InRvbWJvIl0gPiBhW3RhcmdldD0iX2JsYW5rIl0nKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ed2lraWFsbFwub3JnJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBkaXYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZGl2I3BsYWNlLmdldC1idG4nKTsKICAgIGNvbnN0IG8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7CiAgICAgIGNvbnN0IGEgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnZGl2I3BsYWNlLmdldC1idG4gPiBhW2hyZWZdJyk7CiAgICAgIGlmIChhICYmIGEuaHJlZikgewogICAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhLmhyZWYpOwogICAgICB9CiAgICB9KTsKICAgIG8ub2JzZXJ2ZShkaXYsIHsKICAgICAgY2hpbGRMaXN0OiB0cnVlCiAgICB9KTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXndvblwucGUkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJy5wcm9ncmVzcy5jYXB0Y2hhX2xvYWRlciwgc2tpcGJveCcpOwogICAgY29uc3QgY2FwdGNoYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjcmVjYXB0Y2hhJyk7CiAgICBjYXB0Y2hhLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgY29uc3QgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4gewogICAgICAgIGlmIChjYXB0Y2hhLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgewogICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpOwogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIG9ic2VydmVyLm9ic2VydmUoY2FwdGNoYSwgewogICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsCiAgICAgIH0pOwogICAgfSk7CiAgICBhd2FpdCBwOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cubG9uZ1VSTCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly95ZXAuaXQvcHJldmlldy5waHA/cD0qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBsaW5rID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ZvbnRbY29sb3I9ImdyZXkiXScpLmlubmVySFRNTDsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhsaW5rKTsKICB9LAp9KTsKKCgpID0+IHsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogJ2h0dHA6Ly93d3cueW9vY2xpY2suY29tL2wvKicsCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgICBjb25zdCB1bmlxID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy51bmlxIHx8IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cudW5pcWk7CiAgICAgIGlmICghdW5pcSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lOwogICAgICBjb25zdCB1cmwgPSBgJHtwYXRofT9hamF4PXRydWUmYWRibG9jaz1mYWxzZSZvbGQ9ZmFsc2UmZnJhbWVkPWZhbHNlJnVuaXE9JHt1bmlxfWA7CiAgICAgIGF3YWl0IGdldFVSTCh1cmwpOwogICAgfSwKICB9KTsKICBhc3luYyBmdW5jdGlvbiBnZXRVUkwgKHVybCkgewogICAgY29uc3QgdGV4dCA9IGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5nZXQodXJsKTsKICAgIGNvbnN0IGdvb2RVUkwgPSAvXihodHRwcz98ZnRwKTpcL1wvKCgoKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKXwoJVtcZGEtZl17Mn0pfFshJCYnKCkqKyw7PV18OikqQCk/KCgoXGR8WzEtOV1cZHwxXGRcZHwyWzAtNF1cZHwyNVswLTVdKVwuKFxkfFsxLTldXGR8MVxkXGR8MlswLTRdXGR8MjVbMC01XSlcLihcZHxbMS05XVxkfDFcZFxkfDJbMC00XVxkfDI1WzAtNV0pXC4oXGR8WzEtOV1cZHwxXGRcZHwyWzAtNF1cZHwyNVswLTVdKSl8KCgoW2Etel18XGR8W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCgoW2Etel18XGR8W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKSooW2Etel18XGR8W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKSlcLikrKChbYS16XXxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KChbYS16XXxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKihbYS16XXxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkpKVwuPykoOlxkKik/KShcLygoKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKXwoJVtcZGEtZl17Mn0pfFshJCYnKCkqKyw7PV18OnxAKSsoXC8oKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKXwoJVtcZGEtZl17Mn0pfFshJCYnKCkqKyw7PV18OnxAKSopKik/KT8oXD8oKChbYS16XXxcZHwtfFwufF98fnxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KCVbXGRhLWZdezJ9KXxbISQmJygpKissOz1dfDp8QCl8W1x1RTAwMC1cdUY4RkZdfFwvfFw/KSopPygjKCgoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCglW1xkYS1mXXsyfSl8WyEkJicoKSorLDs9XXw6fEApfFwvfFw/KSopPyQvaS50ZXN0KHRleHQpOwogICAgaWYgKGdvb2RVUkwpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHRleHQpOwogICAgICByZXR1cm47CiAgICB9CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg1MDApOwogICAgYXdhaXQgZ2V0VVJMKHVybCk7CiAgfQp9KSgpOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eKHd3d1wuKT8oW2EtekEtWjAtOV0rXC4pP2JpbmJveFwuaW8kLywKICAgICAgcGF0aDogL1wvKFthLXpBLVowLTldKykvLAogICAgICBoYXNoOiAvKD86IyhbYS16QS1aMC05XSspKT8vLAogICAgfSwKICAgIGFzeW5jIHJlYWR5IChtKSB7CiAgICAgIGNvbnN0IHNqY2wgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LnNqY2w7CiAgICAgIGNvbnN0IHBhc3RlX2lkID0gbS5wYXRoWzFdOwogICAgICBjb25zdCBwYXN0ZV9zYWx0ID0gbS5oYXNoWzFdOwogICAgICBjb25zdCBBUElfVVJMID0gYGh0dHBzOi8vYmluYm94LmlvLyR7cGFzdGVfaWR9Lmpzb25gOwogICAgICBsZXQgcGFzdGVJbmZvID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLmdldChBUElfVVJMLCBmYWxzZSwgewogICAgICAgIE9yaWdpbjogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLm5vbmUsCiAgICAgICAgUmVmZXJlcjogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLm5vbmUsCiAgICAgICAgQ29va2llOiAncmVmZXJyZXI9MScsCiAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9uZSwKICAgICAgfSk7CiAgICAgIHBhc3RlSW5mbyA9IEpTT04ucGFyc2UocGFzdGVJbmZvKTsKICAgICAgaWYgKCFwYXN0ZUluZm8ub2spIHsKICAgICAgICB0aHJvdyBuZXcgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLkFkc0J5cGFzc2VyRXJyb3IoJ2Vycm9yIHdoZW4gZ2V0dGluZyBwYXN0ZSBpbmZvcm1hdGlvbicpOwogICAgICB9CiAgICAgIGlmIChwYXN0ZUluZm8ucGFzdGUudXJsKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHBhc3RlSW5mby5wYXN0ZS51cmwpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCByYXdfcGFzdGUgPSBzamNsLmRlY3J5cHQocGFzdGVfc2FsdCwgcGFzdGVJbmZvLnBhc3RlLnRleHQpOwogICAgICBpZiAoaXNMaW5rKHJhd19wYXN0ZSkpIHsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocmF3X3Bhc3RlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc3QgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7CiAgICAgIGVsbS5pZCA9ICdwYXN0ZS10ZXh0JzsKICAgICAgZWxtLmlubmVySFRNTCA9IGxpbmtpZnkocmF3X3Bhc3RlKTsKICAgICAgY29uc3QgZnJhbWUgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3Bhc3RlLWZyYW1lLCAjY2FwdGNoYS1wYWdlJyk7CiAgICAgIGZyYW1lLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGVsbSwgZnJhbWUpOwogICAgfSwKICB9KTsKICBjb25zdCBzVXJsID0gJyhcXGIoaHR0cHM/fGZ0cHxmaWxlKTovL1stQS1aMC05KyZAIy8lPz1+X3whOiwuO10qWy1BLVowLTkrJkAjLyU9fl98XSknOwogIGZ1bmN0aW9uIGlzTGluayAodGV4dCkgewogICAgY29uc3QgclVybCA9IG5ldyBSZWdFeHAoYF4ke3NVcmx9JGAsICdpJyk7CiAgICByZXR1cm4gclVybC50ZXN0KHRleHQpOwogIH0KICBmdW5jdGlvbiBsaW5raWZ5ICh0ZXh0KSB7CiAgICBjb25zdCByVXJsID0gbmV3IFJlZ0V4cChzVXJsLCAnaWcnKTsKICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoclVybCwgKG1hdGNoKSA9PiB7CiAgICAgIHJldHVybiBgPGEgaHJlZj0iJHttYXRjaH0iPiR7bWF0Y2h9PC9hPmA7CiAgICB9KTsKICB9Cn0pKCk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3Bhc3RlZFwuY28kLywKICAgIHBhdGg6IC9eXC9cdyskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJyNjYXB0Y2hhX292ZXJsYXknKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnd3d1wuMmlcLihza3xjeikkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGltZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjd3JhcDMgaW1nJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGltZy5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IFsKICAgICdodHRwOi8vKi5hYmxvYWQuZGUvaW1hZ2UucGhwP2ltZz0qJywKICAgICdodHRwOi8vd3d3LmltYWdldXAucnUvKi8qLyouaHRtbCcsCiAgXSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNpbWFnZScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15hbGwtcG9zdGVyXC5ydSQvLAogICAgcXVlcnk6IC9eXD92PS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNpbWFnZW4gaW1nJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmJ1bm55Zm9ydW1cLm9yZyQvLAogICAgcXVlcnk6IC9eXD92PS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ltZ1t0aXRsZV49Q2xpY2tdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmJheWltZ1wuY29tJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNtYWluSW1hZ2UnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eYmVlaW1nXC5jb20kLywKICAgIHBhdGg6IC9cL3ZpZXdcLy4qLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGltZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdpbWcuaW1nLXJlc3BvbnNpdmUnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLnNyYywgewogICAgICByZXBsYWNlOiB0cnVlLAogICAgfSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly93d3cuYmlsZGVyLXVwbG9hZC5ldS9zaG93LnBocD9maWxlPSonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaW5wdXRbdHlwZT1pbWFnZV0nKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6ICdodHRwOi8vd3d3LmNhc2ltYWdlcy5jb20vaW1nLnBocD8qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpbWcgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgndGQgYSBpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9jdWJldXBsb2FkLmNvbS9pbS8qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpbWcgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaW1nLmdhbGxlcnlCaWdJbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15kZXBpY1wubWUkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3BpYycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14oaW1nZGlub3xpbWd0aWdlcnxpbWd6YXApXC5jb20kLywKICAgIHBhdGg6IC9eXC92aWV3ZXJcLnBocCQvLAogICAgcXVlcnk6IC9eXD9maWxlPS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBvID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNjdXJzb3JfbHVwYScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShvLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly8qLmRpcmVjdHVwbG9hZC5uZXQvZmlsZS8qLmh0bScsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjSW1nRnJhbWUnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15ld2FcLmFjJC8sCiAgICAgIC9eZWxpbFwuY2MkLywKICAgIF0sCiAgICBwYXRoOiAvXlwvKC4qKSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKG0pIHsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwMDApOwogICAgY29uc3QgdXJsID0gYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnBvc3QoJy9zaXRlL2dldC1uZXctcmVkaXJlY3QtbGluaycsIHsKICAgICAgY29kZTogbS5wYXRoWzFdLAogICAgICBhZHNfYmxvY2tlZDogZmFsc2UsCiAgICB9KTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UodXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmZhc3RwaWNcLnJ1JC8sCiAgICBwYXRoOiAvXlwvdmlld1wvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3BpY0NvbnRhaW5lciBpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMsIHsKICAgICAgcmVmZXJlcjogdHJ1ZSwKICAgIH0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eZm9wa29kaWFrXC5zaXRlJC8sCiAgICBwYXRoOiAvXlwvaW1hZ2VcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpbWcgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaGVhZCA+IGxpbmtbcmVsPWltYWdlX3NyY10nKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLmhyZWYpOwogIH0KfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly93d3cuZm90b2xpbmsuc3Uvdi5waHA/aWQ9KicsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjY29udGVudCBpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6ICdodHRwOi8vd3d3LmZvdG9zaWsucGwvcG9rYXpfb2JyYXplay9wZWxueS8qLmh0bWwnLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYS5ub2JvcmRlciBpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15mcmVha2ltYWdlXC5jb20kLywKICAgICAgL153d3dcLmhvc3RwaWNcLm9yZyQvLAogICAgXSwKICAgIHBhdGg6IC9eXC92aWV3XC5waHAkLywKICAgIHF1ZXJ5OiAvXlw/ZmlsZW5hbWU9KFteJl0rKS8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZSgnL2ltYWdlcy8nICsgbS5xdWVyeVsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP2ZyZWVpbWd1cFwuY29tJC8sCiAgICBwYXRoOiAvXlwveHh4XC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaW1nID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNtYWluaW1hZ2UnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15mdWxsaW1nXC5jb20kLywKICAgIHF1ZXJ5OiAvXlw/dj0oW14mXSspLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKCcvaW1hZ2VzLycgKyBtLnF1ZXJ5WzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmltYWdlcDJwXC5jb20kLywKICAgIHF1ZXJ5OiAvXlw/dj0oW14mXSspLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKCcvaW1hZ2VzLycgKyBtLnF1ZXJ5WzFdICsgJy5qcGVnJyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogWwogICAgJ2h0dHA6Ly9mdW5reWltZy5jb20vdmlld2VyLnBocD9pbWc9KicsCiAgICAnaHR0cDovL2Z1bmt5aW1nLmNvbS92aWV3LyonLAogIF0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjdmlld2VyIGltZycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgY29uc3QgaG9zdFJ1bGUgPSAvXmdvaW1hZ2Vob3N0XC5jb20kLzsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBob3N0UnVsZSwKICAgICAgcGF0aDogL15cL3h4eFwvaW1hZ2VzXC8vLAogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBob3N0UnVsZSwKICAgICAgcGF0aDogL15cL3h4eFwvKC4rKS8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKG0pIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZSgnL3h4eC9pbWFnZXMvJyArIG0ucGF0aFsxXSk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IGhvc3RSdWxlLAogICAgICBxdWVyeTogL15cP3Y9KC4rKS8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKG0pIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZSgnL3h4eC9pbWFnZXMvJyArIG0ucXVlcnlbMV0pOwogICAgfSwKICB9KTsKfSkoKTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL3d3dy5ob3N0aW5ncGljcy5uZXQvdmlld2VyLnBocD9pZD0qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNpbWdfdmlld2VyJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiBbCiAgICAnaHR0cDovL2lmb3Rvcy5wbC96b2JhY3ovKicsCiAgICAnaHR0cHM6Ly9wb3N0aW1nLmNjLyonLAogIF0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdtZXRhW3Byb3BlcnR5PSJvZzppbWFnZSJdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKG0uY29udGVudCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15pbWFcLnNvJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNpbWFnZV9ibG9jayBhJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15pbWFkdWxcLmNvbSQvLAogICAgcXVlcnk6IC9cP3BbbXRdPSguKykvLAogIH0sCiAgYXN5bmMgc3RhcnQgKG0pIHsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoJy8/ZGk9JyArIG0ucXVlcnlbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW1hZ2UyeW91XC5ydSQvLAogICAgcGF0aDogL15cL1xkK1wvXGQrLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnZGl2LnRfdGlwczIgZGl2ID4gaW1nJyk7CiAgICBpZiAoIWkpIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKCcnLCB7CiAgICAgICAgcG9zdDogewogICAgICAgICAgX2NvbmZpcm06ICcnLAogICAgICAgIH0sCiAgICAgIH0pOwogICAgICByZXR1cm47CiAgICB9CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL3d3dy5pbWFnZWJhbS5jb20vaW1hZ2UvKicsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgbGV0IG8gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnLmltYWdlLWNvbnRhaW5lciBpbWdbaWRdJyk7CiAgICBpZiAobykgewogICAgICBvID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJy5jb250YWluZXItZnVsbCBpbWcuaW1hZ2Vbc3JjXj0iaHR0cCJdJyk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhvLnNyYyk7CiAgICAgICAgICAgIHJldHVybjsKICAgIH0KICAgIG8gPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYm9keSA+IGRpdiA+IGRpdiA+IGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhvLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6ICdodHRwOi8vd3d3LmltYWdlaG91c2luZy5jb20vaW1hZ2UvKicsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCd0ZC50ZXh0X2l0ZW0gaW1nJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL2ltYWdlbm8uY29tLyouaHRtbCcsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjaW1hZ2VfZGl2IGltZycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL14od3d3XC4pP2ltYWdlcG9ydGVyXC5jb20kLywKICAgICAgcGF0aDogL15cL1x3ezEyfVwvLipcLmh0bWwkLywKICAgIH0sCiAgICByZWFkeTogcnVuLAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXih3d3dcLik/KGltYWdlY2Fycnl8aW1hZ2VkdW5rfGltYWdlcG9ydGVyfGltYWdlc3dpdGNoKVwuY29tJC8sCiAgICAgICAgL14od3d3XC4pPyhwaWNsZWV0fHBpY3R1cmVkaXB8cGljdHVyZXR1cm4pXC5jb20kLywKICAgICAgICAvXih3d3dcLik/aW1nc3BpY2VcLmNvbSQvLAogICAgICAgIC9eKHd3d1wuKT8ocGljbGFtYm98eWFua29pbWFnZXMpXC5uZXQkLywKICAgICAgXSwKICAgIH0sCiAgICByZWFkeTogcnVuLAogIH0pOwogIGFzeW5jIGZ1bmN0aW9uIHJ1biAoKSB7CiAgICBjb25zdCBvID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNkb3dubG9hZF9ib3ggaW1nW2lkXScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShvLnNyYyk7CiAgfQp9KSgpOwooZnVuY3Rpb24gKCkgewogIGNvbnN0IGhvc3QgPSAvXmltYWdlc2hhY2tcLnVzJC87CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogaG9zdCwKICAgICAgcGF0aDogL15cL3Bob3RvXC8uK1wvKC4rKVwvKFteL10rKS8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKG0pIHsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShgL2YvJHttLnBhdGhbMV19LyR7bS5wYXRoWzJdfS9gKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogaG9zdCwKICAgICAgcGF0aDogL15cL2ZcLy4rXC9bXi9dKy8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNmdWxsaW1nJyk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgfSwKICB9KTsKfSkoKTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL2ltYWdlc2hvc3QucnUvcGhvdG8vKi9pZCouaHRtbCcsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjYnBob3RvIGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoYS5ocmVmKTsKICB9LAp9KTsKKGZ1bmN0aW9uICgpIHsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogWwogICAgICB7CiAgICAgICAgaG9zdDogWwogICAgICAgICAgL153d3dcLihmcmVlYnVua2VyfGltZ2NhcnJ5fGltZ3Nob3RzKVwuY29tJC8sCiAgICAgICAgICAvXnd3d1wuaW1hZ2VzbmFrZVwuKGNvbXxvcmcpJC8sCiAgICAgICAgXSwKICAgICAgICBwYXRoOiAvXlwvc2hvd1wucGhwJC8sCiAgICAgICAgcXVlcnk6IC9eXD8vLAogICAgICB9LAogICAgICB7CiAgICAgICAgaG9zdDogL153d3dcLihmcmVlYnVua2VyfGltZ3Nob3RzKVwuY29tJC8sCiAgICAgICAgcGF0aDogL15cL3Nob3dcLy8sCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBob3N0OiBbCiAgICAgICAgICAvXnd3d1wuaW1hZ2VzbmFrZVwuKGNvbXxvcmcpJC8sCiAgICAgICAgICAvXnd3d1wuaW1hZ2VmcnVpdFwuY29tJC8sCiAgICAgICAgXSwKICAgICAgICBwYXRoOiAvXlwvKGltZ3xzaG93KVwvLisvLAogICAgICB9LAogICAgICB7CiAgICAgICAgaG9zdDogL15pbWFnZWJhblwuKHJ1fG5ldCkkLywKICAgICAgICBwYXRoOiAvXlwvc2hvd1wvXGR7NH1cL1xkezJ9XC9cZHsyfVwvLisvLAogICAgICB9LAogICAgICAnaHR0cDovL2ZvdG9vLnBsL3Nob3cucGhwP2ltZz0qLmh0bWwnLAogICAgICB7CiAgICAgICAgaG9zdDogL153d3dcLmltYWdlc3RpbWVcLmNvbSQvLAogICAgICAgIHBhdGg6IC9eXC9zaG93XC5waHBcLy4qXC5odG1sJC8sCiAgICAgIH0sCiAgICBdLAogICAgcmVhZHk6IHJ1biwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXnd3d1wuaW1nY2FycnlcLmNvbSQvLAogICAgICBwYXRoOiAvXlwvc2hvd1wvLywKICAgIH0sCiAgICByZWFkeTogcnVuMiwKICB9KTsKICBhc3luYyBmdW5jdGlvbiBydW4gKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjaW1nX29iaicpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYywgewogICAgICByZWZlcmVyOiB0cnVlLAogICAgfSk7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIHJ1bjIgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjaW1nX29iaicpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYywgewogICAgICByZXBsYWNlOiB0cnVlLAogICAgfSk7CiAgfQp9KSgpOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiBbCiAgICAgIHsKICAgICAgICBob3N0OiAvXmltYWdlbnBpY1wuY29tJC8sCiAgICAgICAgcGF0aDogL15cLy4qXC8uK1wuaHRtbD8kLywKICAgICAgfSwKICAgICAgewogICAgICAgIGhvc3Q6IC9eaW1hZ2V0d2lzdFwuY29tJC8sCiAgICAgIH0sCiAgICBdLAogICAgcmVhZHk6IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5wYXJ0aWFsKHJ1biwgdHJ1ZSksCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL14oaW1hZ2V4cG9ydHxpbWFnZXNoaW1hZ2UpXC5jb20kLywKICAgIH0sCiAgICByZWFkeTogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnBhcnRpYWwocnVuLCBmYWxzZSksCiAgfSk7CiAgYXN5bmMgZnVuY3Rpb24gcnVuIChycCkgewogICAgaWYgKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cualF1ZXJ5KSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cualF1ZXJ5LnByb3RvdHlwZS5hcHBlbmQgPSB1bmRlZmluZWQ7CiAgICB9CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ltZy5waWMnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMsIHsKICAgICAgcmVwbGFjZTogcnAsCiAgICB9KTsKICB9Cn0pKCk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9pbWFnZXVwcGVyLmNvbS9pLz8qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IFsKICAgICdodHRwOi8vKi5pbWFnZXZlbnVlLmNvbS9pbWcucGhwPyonLAogICAgJ2h0dHA6Ly9ob3RjaHl4LmNvbS9kL2FkdWx0LWltYWdlLWhvc3Rpbmctdmlldy0wOC5waHA/aWQ9KicsCiAgXSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyN0aGVwaWMnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW1hZ2V6aWxsYVwubmV0JC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNwaG90bycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYywgewogICAgICByZWZlcmVyOiB0cnVlLAogICAgfSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9pbWcuM2V6eS5uZXQvKi5odG0nLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGwgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnbGlua1tyZWw9ImltYWdlX3NyYyJdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGwuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9pbWcxLmltYWdpbGl2ZS5jb20vKi8qJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBhID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJyNwYWdlIGEuYnV0dG9uJyk7CiAgICBpZiAoYSkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjcGFnZSA+IGltZzpub3QoW2lkXSknKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ed3d3XC4oaW1nYmFiZXN8aW1nZmxhcmUpXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBpID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2lucHV0W29uY2xpY2tdJyk7CiAgICBpZiAoaSkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LkRlY29kZSgpOwogICAgICByZXR1cm47CiAgICB9CiAgICBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyN0aGlzX2ltYWdlJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmltZ2JhclwubmV0JC8sCiAgICBwYXRoOiAvXlwvaW1nX3Nob3dcLnBocCQvLAogICAgcXVlcnk6IC9eXD92aWV3X2lkPS8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2NlbnRlciBpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW1nYmFyXC5uZXQkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZGl2LnBhbmVsLnRvcCBmb3JtIGlucHV0W25hbWU9c2lkXScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKCcvaW1nX3Nob3cucGhwP3ZpZXdfaWQ9JyArIGkudmFsdWUpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW1nYm94XC5jb20kLywKICAgIHBhdGg6IC9eXC9bXGRcd10rJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2ltZycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7CihmdW5jdGlvbiAoKSB7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogWwogICAgICAgIC9eKGltZ2ZhbnRhc3l8aW1nbmVtb3xpbWdjdXJsKVwuY29tJC8sCiAgICAgICAgL15pbWFnZWRvbWlub1wuY29tJC8sCiAgICAgICAgL14waW1nXC5uZXQkLywKICAgICAgICAvXmJ1bm55Zm9ydW1cLm9yZyQvLAogICAgICBdLAogICAgICBxdWVyeTogL15cP1twdl09LywKICAgIH0sCiAgICByZWFkeTogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnBhcnRpYWwoaGVscGVyLCBmYWxzZSksCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15pbWdzYXlcLmNvbSQvLAogICAgICBxdWVyeTogL15cP1twdl09LywKICAgIH0sCiAgICByZWFkeTogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnBhcnRpYWwoaGVscGVyLCB0cnVlKSwKICB9KTsKICBhc3luYyBmdW5jdGlvbiBoZWxwZXIgKGRvUmVwbGFjZSkgewogICAgaWYgKF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS53aW5kb3cuY29uZmlybUFnZSkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93LmNvbmZpcm1BZ2UoMSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2NvbnRhaW5lci1ob21lIGltZ1tvbmNsaWNrXScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYywgewogICAgICByZXBsYWNlOiBkb1JlcGxhY2UsCiAgICB9KTsKICB9Cn0pKCk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXmNvcmVwaXhcLm9yZyQvLAogICAgICAvXih3d3dcLik/eHh4aW1hZ2V0cGJcLm9yZyQvLAogICAgICAvXmltZ2hvc3RcLih0b3B8Y2x1YikkLywKICAgICAgL15zb21uYXRoMjAwM1wueHl6JC8sCiAgICAgIC9ecG9ybmJha2VyXC5tZW4kLywKICAgIF0sCiAgICBwYXRoOiAvXlwvaW1hZ2VcLy4rJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2lucHV0I2VtYmVkLWNvZGUtMi50ZXh0LWlucHV0JykuZ2V0QXR0cmlidXRlKCd2YWx1ZScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmltZ21hc3NcLmNvbSQvLAogICAgcGF0aDogL15cL2ltYWdlXC9bXGRcd10rJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCcjbG9hZGluZzInKTsKICAgIGNvbnN0IGQgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnLmJveCcpOwogICAgZC5zdHlsZS5kaXNwbGF5ID0gJ2luaXRpYWwnOwogICAgZC5zdHlsZS5vcGFjaXR5ID0gJ2luaXRpYWwnOwogIH0sCn0pOwooZnVuY3Rpb24gKCkgewogIGNvbnN0IFBBVEhfUlVMRSA9IC9eXC8oWzAtOWEtekEtWi1fXSspKFwufFwvfCQpLzsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBbCiAgICAgICAgL14oaW1nbW9ua2V5fGltZ3RyZXh8aW1ndmV8dXBsb2FkcnJ8aW1hZ2VlZXJ8cGljLW1hbmlhY3xodWxraW1nZSlcLmNvbSQvLAogICAgICAgIC9ed3d3XC51aW1nc2hhcmVcLmNvbSQvLAogICAgICAgIC9eKHd3d1wuKT9pbWdzZWVcLm1lJC8sCiAgICAgICAgL15pbWdjbGlja1wubmV0JC8sCiAgICAgIF0sCiAgICAgIHBhdGg6IFBBVEhfUlVMRSwKICAgIH0sCiAgICBhc3luYyByZWFkeSAobSkgewogICAgICBhd2FpdCBoZWxwZXIobS5wYXRoWzFdLCBnZXROZXh0MSk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eaW1nb3V0bGV0XC5jb20kLywKICAgICAgcGF0aDogUEFUSF9SVUxFLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgaSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCdpbWcucGljJyk7CiAgICAgIGlmIChpKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNvbnN0IGQgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnZGl2W2lkXj0iaW1hZ2V2aWV3aSJdJyk7CiAgICAgIGNvbnN0IG5vZGUgPSBhd2FpdCB3YWl0RE9NKGQsIChub2RlKSA9PiB7CiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICdGT1JNJyAmJiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW5wdXRbbmFtZT0iaWQiXScsIG5vZGUpOwogICAgICB9KTsKICAgICAgbm9kZS5zdWJtaXQoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15pbWdyb2NrXC5pbmZvJC8sCiAgICAgIHBhdGg6IFBBVEhfUlVMRSwKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW1nLnBpY3ZpZXcnKTsKICAgICAgaWYgKGkpIHsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5fMHgzMzdjNGIgPSBudWxsOwogICAgICBjb25zdCBub2RlID0gYXdhaXQgZ2V0QW1iaWd1b3VzRm9ybSgnZGl2W2lkXSArIGRpdltpZF0gPiBzdHlsZScsIChub2RlKSA9PiB7CiAgICAgICAgcmV0dXJuIG5vZGUucGFyZW50RWxlbWVudDsKICAgICAgfSk7CiAgICAgIG5vZGUuY2xpY2soKTsKICAgICAgbm9kZS5jbGljaygpOwogICAgICBub2RlLmNsaWNrKCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eaW1nb3V0bGV0XC5wdyQvLAogICAgICBwYXRoOiBQQVRIX1JVTEUsCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBpID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2ltZy5waWN2aWV3Jyk7CiAgICAgIGlmIChpKSB7CiAgICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5fMHg1YjUwYjcgPSBudWxsOwogICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ud2luZG93Ll8weDViNTBiNyA9IG51bGw7CiAgICAgIGxldCBub2RlID0gbnVsbDsKICAgICAgd2hpbGUgKCFub2RlKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLndhaXQoNTAwKTsKICAgICAgICBub2RlID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2J1dHRvbltuYW1lPSJuZXh0Il0nKTsKICAgICAgfQogICAgICBub2RlLmNsaWNrKCk7CiAgICAgIG5vZGUuY2xpY2soKTsKICAgICAgbm9kZS5jbGljaygpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiBbCiAgICAgICAgL14ocGljYmFyb258aW1nYmFyb258a3ZhZG9yKVwuY29tJC8sCiAgICAgICAgL15pbWdmaWxlc1wub3JnJC8sCiAgICAgIF0sCiAgICAgIHBhdGg6IFBBVEhfUlVMRSwKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW1nLnBpYycpOwogICAgICBpZiAoaSkgewogICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBmID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2Zvcm0nKTsKICAgICAgZi5zdWJtaXQoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IC9eaHR0cDpcL1wvaW1nZHJhZ29uXC5jb21cLyhnZXRmaWxcLnBocHxkbCkkLywKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgaSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCdpbWcucGljJyk7CiAgICAgIGlmIChpKSB7CiAgICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS53YWl0KDUwMCk7CiAgICAgIGNvbnN0IGYgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI0NvbnRpbnVlRlJNJyk7CiAgICAgIGYuc3VibWl0KCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eaW1ncm9ja1wucHckLywKICAgICAgcGF0aDogUEFUSF9SVUxFLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgaSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCdpbWcucGljdmlldycpOwogICAgICBpZiAoaSkgewogICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBub2RlID0gYXdhaXQgZ2V0QW1iaWd1b3VzRm9ybSgKICAgICAgICAnZGl2W2lkXSArIGRpdltpZF0gPiBpbnB1dDpub3QoW3N0eWxlXSknLAogICAgICAgIChub2RlKSA9PiB7CiAgICAgICAgICBjb25zdCBkID0gbm9kZS5wYXJlbnRFbGVtZW50OwogICAgICAgICAgbm9kZS5jbGljaygpOwogICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgfSk7CiAgICAgIG5vZGUuY2xpY2soKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL14oaW1ndmlld3xpbWd0b3dufGltZ21hemV8aW1nZGV3KVwucHckLywKICAgICAgcGF0aDogUEFUSF9SVUxFLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnJlbW92ZSgnaWZyYW1lJyk7CiAgICAgIGNvbnN0IGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW1nLnBpY3ZpZXcnKTsKICAgICAgaWYgKGkpIHsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5fMHg1OGZmMzUgPSBudWxsOwogICAgICBjb25zdCBub2RlID0gYXdhaXQgZ2V0QW1iaWd1b3VzRm9ybSgKICAgICAgICAnc2NyaXB0ICsgZGl2W2lkXSA+IGlucHV0Om5vdChbc3R5bGVdKScsCiAgICAgICAgKG5vZGUpID0+IHsKICAgICAgICAgIGNvbnN0IGQgPSBub2RlLnBhcmVudEVsZW1lbnQ7CiAgICAgICAgICBub2RlLmNsaWNrKCk7CiAgICAgICAgICByZXR1cm4gZDsKICAgICAgICB9KTsKICAgICAgbm9kZS5jbGljaygpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXmltZ2FudFwuY29tJC8sCiAgICAgIHBhdGg6IC9eXC9pbWctKFxkKylcLmh0bWwkLywKICAgIH0sCiAgICBhc3luYyBzdGFydCAobSkgewogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYGltZ3ZpZXctJHttLnBhdGhbMV19Lmh0bWxgKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15pbWdhbnRcLmNvbSQvLAogICAgICBwYXRoOiAvXlwvaW1ndmlldy1cZCtcLmh0bWwkLywKICAgIH0sCiAgICBhc3luYyByZWFkeSAoKSB7CiAgICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3BpY1ZpZXcnKTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgICB9LAogIH0pOwogIGZ1bmN0aW9uIHdhaXRET00gKGVsZW1lbnQsIGZuKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7CiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7CiAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSAhPT0gJ2NoaWxkTGlzdCcpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgW2ssICwgcl0gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uZmluZChtdXRhdGlvbi5hZGRlZE5vZGVzLCAoY2hpbGQpID0+IHsKICAgICAgICAgICAgcmV0dXJuIGZuKGNoaWxkKSA/IGNoaWxkIDogX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLm5vbmU7CiAgICAgICAgICB9KTsKICAgICAgICAgIGlmIChrID09PSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ubm9uZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgICAgICByZXNvbHZlKHIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7CiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICB9KTsKICAgIH0pOwogIH0KICBhc3luYyBmdW5jdGlvbiBnZXRBbWJpZ3VvdXNGb3JtIChzZWxlY3Rvciwgc2hlbGxOb3JtYWxpemVyKSB7CiAgICBjb25zdCBkID0gYXdhaXQgd2FpdEZvcm1TaGVsbChzZWxlY3Rvciwgc2hlbGxOb3JtYWxpemVyKTsKICAgIGNvbnN0IHN0eWxlID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ3N0eWxlJywgZCk7CiAgICBsZXQgdmlzaWJsZUNsYXNzZXMgPSBwYXJzZVN0eWxlKHN0eWxlKTsKICAgIHZpc2libGVDbGFzc2VzID0gZmlsdGVyRHVwbGljYXRlZCh2aXNpYmxlQ2xhc3Nlcyk7CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBjb25zdCBidXR0b24gPSBmaW5kVmlzaWJsZUZvcm0odmlzaWJsZUNsYXNzZXMpOwogICAgICBpZiAoYnV0dG9uKSB7CiAgICAgICAgcmV0dXJuIGJ1dHRvbjsKICAgICAgfQogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ud2FpdCg1MDApOwogICAgfQogIH0KICBmdW5jdGlvbiB3YWl0Rm9ybVNoZWxsIChzZWxlY3Rvciwgbm9ybWFsaXplcikgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IGhhbmRsZSA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICBsZXQgc2hlbGwgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJChzZWxlY3Rvcik7CiAgICAgICAgaWYgKCFzaGVsbCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjbGVhckludGVydmFsKGhhbmRsZSk7CiAgICAgICAgc2hlbGwgPSBub3JtYWxpemVyKHNoZWxsKTsKICAgICAgICByZXNvbHZlKHNoZWxsKTsKICAgICAgfSwgNTAwKTsKICAgIH0pOwogIH0KICBmdW5jdGlvbiBwYXJzZVN0eWxlIChzdHlsZSkgewogICAgc3R5bGUgPSBzdHlsZS50ZXh0Q29udGVudDsKICAgIGNvbnN0IHBhdHRlcm4gPSAvXC4oXHcrKVx7dmlzaWJpbGl0eTppbml0aWFsO1x9L2c7CiAgICBsZXQgcnYgPSBudWxsOwogICAgY29uc3QgY2xhc3NlcyA9IFtdOwogICAgd2hpbGUgKChydiA9IHBhdHRlcm4uZXhlYyhzdHlsZSkpICE9PSBudWxsKSB7CiAgICAgIGNsYXNzZXMucHVzaChydlsxXSk7CiAgICB9CiAgICByZXR1cm4gY2xhc3NlczsKICB9CiAgZnVuY3Rpb24gZmlsdGVyRHVwbGljYXRlZCAoY2xhc3NlcykgewogICAgY29uc3QgdGFibGUgPSBuZXcgTWFwKCk7CiAgICBmb3IgKGNvbnN0IGMgb2YgY2xhc3NlcykgewogICAgICBpZiAodGFibGUuaGFzKGMpKSB7CiAgICAgICAgdGFibGUuc2V0KGMsIGZhbHNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0YWJsZS5zZXQoYywgdHJ1ZSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBBcnJheS5mcm9tKHRhYmxlLmVudHJpZXMoKSkuZmlsdGVyKCh1bmlxdWUpID0+IHsKICAgICAgcmV0dXJuIHVuaXF1ZTsKICAgIH0pLm1hcCgoXywgYykgPT4gewogICAgICByZXR1cm4gYzsKICAgIH0pOwogIH0KICBmdW5jdGlvbiBmaW5kVmlzaWJsZUZvcm0gKGNsYXNzZXMpIHsKICAgIGZvciAoY29uc3QgY2xhc3NfIG9mIGNsYXNzZXMpIHsKICAgICAgY29uc3QgZm9ybSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKGBmb3JtLiR7Y2xhc3NffWApOwogICAgICBpZiAoIWZvcm0pIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBidXR0b24gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW5wdXRbdHlwZT0iYnV0dG9uIl0sIGJ1dHRvblt0eXBlPSJidXR0b24iXScsIGZvcm0pOwogICAgICBjb25zdCB2ID0gZ2V0Q29tcHV0ZWRTdHlsZShidXR0b24pLmdldFByb3BlcnR5VmFsdWUoJ3Zpc2liaWxpdHknKTsKICAgICAgaWYgKHYgIT09ICd2aXNpYmxlJykgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHJldHVybiBidXR0b247CiAgICB9CiAgICByZXR1cm4gbnVsbDsKICB9CiAgZnVuY3Rpb24gZ2V0TmV4dDEgKGkpIHsKICAgIHJldHVybiBpLnZhbHVlOwogIH0KICBhc3luYyBmdW5jdGlvbiBoZWxwZXIgKGlkLCBnZXROZXh0KSB7CiAgICBjb25zdCByZWNhcHRjaGEgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI3JlY2FwdGNoYV93aWRnZXQsICNjYXB0Y2hhJyk7CiAgICBpZiAocmVjYXB0Y2hhKSB7CiAgICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5pbmZvKCdzdG9wIGJlY2F1c2UgcmVjYXB0Y2hhJyk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGxldCBpID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJ2lucHV0W25hbWU9Im5leHQiXScpOwogICAgaWYgKGkpIHsKICAgICAgY29uc3QgbmV4dCA9IGdldE5leHQoaSk7CiAgICAgIGF3YWl0IGdvKGlkLCBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaW5wdXRbbmFtZT0icHJlIl0nKS52YWx1ZSwgbmV4dCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGkgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW1nLnBpY3ZpZXcnKTsKICAgIGlmIChpKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgICByZXR1cm47CiAgICB9CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0uaW5mbygnZG8gbm90aGluZycpOwogIH0KICBhc3luYyBmdW5jdGlvbiBnbyAoaWQsIHByZSwgbmV4dCkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKCcnLCB7CiAgICAgIHBvc3Q6IHsKICAgICAgICBvcDogJ3ZpZXcnLAogICAgICAgIGlkOiBpZCwKICAgICAgICBwcmU6IHByZSwKICAgICAgICBuZXh0OiBuZXh0LAogICAgICAgIGFkYjogJzAnLAogICAgICB9LAogICAgfSk7CiAgfQp9KSgpOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW1ndG9ycm50XC5pbiQvLAogICAgcGF0aDogL15cL3ZpZXdcLnBocCQvLAogICAgcXVlcnk6IC9eXD9pZD0uKi8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpbWcgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnY2VudGVyIGRpdiB0YWJsZS50ZyB0Ym9keSB0ciB0ZCBjZW50ZXIgaW1nJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGltZy5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9eaW1ndmF1bHRcLnB3JC8sCiAgICBwYXRoOiAvXlwvdmlldy1pbWFnZVwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnYXJ0aWNsZSBkaXYuc3BhbjcgYVt0YXJnZXQ9Il9ibGFuayJdJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGEuaHJlZik7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnd3d1wuaW1hZ2VzcGljeVwuc2l0ZSQvLAogICAgICAvXnd3d1wuKGltZ3NreXxpbWdmaWxlfGltZ3NlZSlcLm5ldCQvLAogICAgXSwKICAgIHBhdGg6IC9eXC9zaXRlXC92XC9cZCskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGEgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI215VW5pcXVlSW1nJykucGFyZW50Tm9kZTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhhLmhyZWYpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL153d3dcLmltYWdlc3BpY3lcLnNpdGUkLywKICAgICAgL153d3dcLihpbWdza3l8aW1nZmlsZXxpbWdzZWUpXC5uZXQkLywKICAgIF0sCiAgICBwYXRoOiAvXlwvW2EtenwwLTldezQsMTB9JC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBtYXRjaGVzID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNlYXJjaEZyb21TY3JpcHRzKC9kb2N1bWVudFwuZ2V0RWxlbWVudEJ5SWRcKCJzb0RhQnVnIlwpXC5zcmMgPSAiKFteIl0rKSI7Lyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKG1hdGNoZXNbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6ICdodHRwOi8vaXBpYy5zdS8/cGFnZT1pbWcmcGljPSonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2Z6Jyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmlcLmphdnRvclwuY29tJC8sCiAgICBwYXRoOiAvXlwvaW1hZ2VcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNzaG93X2ltZyBpbWcnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ea2VwdGFyb2xvXC5odSQvLAogICAgcGF0aDogL14oXC9bXi9dK1wvW14vXStcLmpwZykkLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKCdodHRwOi8vd3d3LmtlcHRhcm9sby5odS9rZXAnICsgbS5wYXRoWzFdKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXmxvc3RwaWNcLm5ldCQvLAogICAgcXVlcnk6IC9eXD9waG90bz1cZCskLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnaW1nLm5vdGlubGluZS5jaXJjbGUnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwooZnVuY3Rpb24gKCkgewogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXm1pcmFnZXBpY3NcLmNvbSQvLAogICAgICAgIC9eZnVuZXh0cmFcLmhvc3R6aVwuY29tJC8sCiAgICAgICAgL15iaWxkZXJcLm5peGhlbHBcLmRlJC8sCiAgICAgICAgL15pbWFnZWN1cmxcLihjb218b3JnKSQvLAogICAgICAgIC9eZm90by1waWNcLm5ldCQvLAogICAgICBdLAogICAgICBwYXRoOiAvXlwvdmlld2VyXC5waHAkLywKICAgICAgcXVlcnk6IC9maWxlPShbXiZdKykvLAogICAgfSwKICAgIHN0YXJ0OiBoZWxwZXIsCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15pbWdzaW5cLmNvbSQvLAogICAgICBwYXRoOiAvXlwvdmlld2VyXC5waHAkLywKICAgICAgcXVlcnk6IC9maWxlPShbXiZdKykvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0IChtKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoJy9maWxlcy8nICsgbS5xdWVyeVsxXSk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eKGltZ25pcHxpbWdjZW50cmFsfGltZ2NyZWFtKVwuY29tJC8sCiAgICAgIHBhdGg6IC9eXC92aWV3ZXJyLipcLnBocCQvLAogICAgICBxdWVyeTogL2ZpbGU9KFteJl0rKS8sCiAgICB9LAogICAgc3RhcnQ6IGhlbHBlciwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogWwogICAgICAnaHR0cDovL3d3dy5vdmVycGljLm5ldC92aWV3ZXIucGhwP2ZpbGU9KicsCiAgICBdLAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNtYWluX2ltZycpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL154eHhob3N0XC5tZSQvLAogICAgICBwYXRoOiAvXlwvdmlld2VyXGQrXC5waHAkLywKICAgICAgcXVlcnk6IC9maWxlPShbXiZdKykvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0IChtKSB7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoJ2ZpbGVzLycgKyBtLnF1ZXJ5WzFdKTsKICAgIH0sCiAgfSk7CiAgYXN5bmMgZnVuY3Rpb24gaGVscGVyIChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKCcvaW1hZ2VzLycgKyBtLnF1ZXJ5WzFdKTsKICB9Cn0pKCk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL153d3dcLm1yamhcLm9yZyQvLAogICAgcGF0aDogL15cL2dhbGxlcnlcLnBocCQvLAogICAgcXVlcnk6IC9eXD9lbnRyeT0oLispJC8sCiAgfSwKICBhc3luYyByZWFkeSAobSkgewogICAgY29uc3QgdXJsID0gbS5xdWVyeVsxXTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoJy8nICsgdXJsKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnd3d1wubm9lbHNoYWNrXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2VsdF90b19hZmYnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15vdmVyZHJlYW1cLmN6JC8sCiAgICAgIC9ecGljbGlja1wub3JnJC8sCiAgICBdLAogICAgcGF0aDogL15cL2ltYWdlXC8vLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaW1nID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNmdWxsX2ltYWdlJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGltZy5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15waWMtbW9uZXlcLnJ1JC8sCiAgICAgIC9ec2hhZ2d5aW1nXC5wcm8kLywKICAgICAgL15pbWdhenVyZVwuY29tJC8sCiAgICAgIC9eZGFpbHlpbWFnZXNcLnh5eiQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGYgPSBkb2N1bWVudC5mb3Jtc1swXTsKICAgIGNvbnN0IHNpZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdpbnB1dFtuYW1lPSJzaWciXScsIGYpLnZhbHVlOwogICAgY29uc3QgcGljX2lkID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2lucHV0W25hbWU9InBpY19pZCJdJywgZikudmFsdWU7CiAgICBjb25zdCByZWZlcmVyID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2lucHV0W25hbWU9InJlZmVyZXIiXScsIGYpLnZhbHVlOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShgL3BpYy5qcGVnP3BpY19pZD0ke3BpY19pZH0mc2lnPSR7c2lnfSZyZWZlcmVyPSR7cmVmZXJlcn1gKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiAnaHR0cDovL3d3dy5waWMtdXBsb2FkLmRlL3ZpZXctKi5odG1sJywKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCcuYWR2ZXJ0Jyk7CiAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ltZy5wcmV2aWV3X3BpY3R1cmVfMmIsIGltZy5vcmlnaW5hbF9waWN0dXJlXzJiJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiBbCiAgICAgIC9ecGljNHlvdVwucnUkLywKICAgICAgL15waWM1eW91XC5ydSQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGlmIChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI2QxID4gaW1nJykgIT0gbnVsbCkgewogICAgICBjb25zdCBVUkxwYXJhbXMgPSBsb2NhdGlvbi5ocmVmLnNwbGl0KCcvJywgNSk7CiAgICAgIGxldCBuZXh0ID0gVVJMcGFyYW1zLmpvaW4oJy8nKTsKICAgICAgbmV4dCA9IG5leHQgKyAnLzEvJzsKICAgICAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLnNldENvb2tpZSgncDR5Y2xpY2snLCAnMScpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobmV4dCk7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNkMSBpbWcnKS5zcmM7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaSk7CiAgICB9CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3BpY2Nhc2hcLm5ldCQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcuY29udGFpbmVyID4gaW1nJyk7CiAgICBjb25zdCBtID0gaS5vbmNsaWNrLnRvU3RyaW5nKCkubWF0Y2goL21zaG93XCgnKFteJ10rKSdcKTsvKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UobVsxXSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14ocGljZXhwb3NlZHxjcm9lYSlcLmNvbSQvLAogIH0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdpbWcucGljJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiBbCiAgICAnaHR0cDovL2FtYXRldXJmcmVhay5vcmcvc2hhcmUtKi5odG1sJywKICAgICdodHRwOi8vYW1hdGV1cmZyZWFrLm9yZy9zaGFyZS5waHA/aWQ9KicsCiAgICAnaHR0cDovL3BpY2ZveC5vcmcvKicsCiAgICAnaHR0cDovL3d3dy5ldXJvLXBpYy5ldS9zaGFyZS5waHA/aWQ9KicsCiAgICAnaHR0cDovL3h4eC5mcmVlaW1hZ2UudXMvc2hhcmUucGhwP2lkPSonLAogICAgJ2h0dHA6Ly93d3cucGl4c29yLmNvbS9zaGFyZS5waHA/aWQ9KicsCiAgICAnaHR0cDovL3d3dy5waXhzb3IuY29tL3NoYXJlLSouaHRtbCcsCiAgICAnaHR0cDovL3BpeHNvci5jb20vWFhYL3NoYXJlLSouaHRtbCcsCiAgICAnaHR0cDovL2hvbGR0aGVtb2FuLm5ldC94L3NoYXJlLSouaHRtbCcsCiAgICAnaHR0cDovL3d3dy5pbWd6LnB3L3NoYXJlLSouaHRtbCcsCiAgICAnaHR0cHM6Ly9pbWd1dXIucGljdHVyZXMvc2hhcmUtKi5odG1sJwogIF0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgbyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjaWltZycpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShvLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnBpY3BpY1wub25saW5lJC8sCiAgICAgIC9ecGljY2xvY2tcLnJ1JC8sCiAgICBdLAogICAgcGF0aDogL15cL1xkK1wvXGQrXC8kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGxldCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNwYXlfdGh1bWJfaW1nIGltZycpOwogICAgaSA9IGkuZ2V0QXR0cmlidXRlKCdvbmNsaWNrJyk7CiAgICBpID0gaS5tYXRjaCgvbXNob3dcKCcoLispJ1wpLyk7CiAgICBpID0gaVsxXTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogWwogICAgJ2h0dHA6Ly9waWNzLW1vbmV5LnJ1L2FsbHBpY2ZyZWUvKicsCiAgICAnaHR0cDovL3d3dy5waWNzLW1vbmV5LnJ1L2FsbGltYWdlLyonLAogIF0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ecGljcy1tb25leVwucnUkLywKICAgIHBhdGg6IC9eXC92XC5waHAkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZScpOwogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdjZW50ZXIgaW1nOm5vdChbaWRdKScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnd3d1wucGljcy1tb25leVwucnUkLywKICAgICAgL14ocGlja2VyLWNsaWNrfHAweHBpY21vbmV5KVwucnUkLywKICAgIF0sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgIGxldCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNkMSBpbWcsICNwYXlfdGh1bWJfaW1nID4gaW1nJyk7CiAgICBpID0gaS5vbmNsaWNrLnRvU3RyaW5nKCk7CiAgICBpID0gaS5tYXRjaCgvbXNob3dcKCcoLispJ1wpLyk7CiAgICBpID0gaVsxXTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaSk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogJ2h0dHA6Ly9waWNzaGFyZS5nZWVuemEuY29tL3BpY3MvKicsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjcGljU2hhcmVfaW1hZ2VfY29udGFpbmVyJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGkuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXnBpY3N0cmVhbVwudHYkLywKICAgIHBhdGg6IC9eXC8uKlwvLipcLmh0bWwkLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGltZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjdmlldzEgPiBkaXY6bnRoLWNoaWxkKDEpID4gaW1nOm50aC1jaGlsZCgxKScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpbWcuc3JjKTsKICB9LAp9KTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiB7CiAgICBob3N0OiAvXih3d3dcLik/cGltcGFuZGhvc3RcLmNvbSQvLAogICAgcGF0aDogL15cL2ltYWdlXC9cZCsvLAogICAgcXVlcnk6IC9eXD9zaXplPW9yaWdpbmFsLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGltZyA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjb3ZlcmZsb3ctd3JhcHBlciBpbWcub3JpZ2luYWwnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3BpbXBhbmRob3N0XC5jb20kLywKICAgIHBhdGg6IC9eXC9pbWFnZVwvXGQrLywKICB9LAogIGFzeW5jIHN0YXJ0IChtKSB7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsobS5wYXRoICsgJz9zaXplPW9yaWdpbmFsJyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3BpeGhvc3RcLnRvJC8sCiAgICBwYXRoOiAvXlwvc2hvd1wvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5yZW1vdmUoJ2lmcmFtZSwgI2FkJyk7CiAgICBsZXQgbyA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjYWxsJyk7CiAgICBpZiAobykgewogICAgICBvLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgIH0KICAgIG8gPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3Nob3dfaW1hZ2UsICNpbWFnZScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShvLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL14od3d3XC4pP3BpeHJvdXRlXC5jb20kLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IG8gPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2Rvd25sb2FkX2JveCBpbWcjaW1ncHJldmlldy5waWMnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2Uoby5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ecGl4eHhlbHNcLmNjJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpbWcgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI21haW4taW1hZ2UnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLmRhdGFzZXQuZnVsbCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnBybnRzY3JcLmNvbSQvLAogICAgICAvXnBybnRcLnNjJC8sCiAgICBdLAogICAgcGF0aDogL1wuaHRtbCQvLAogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IFsKICAgICAgL15wcm50c2NyXC5jb20kLywKICAgICAgL15wcm50XC5zYyQvLAogICAgXSwKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3NjcmVlbnNob3QtaW1hZ2UnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ecHJvbnBpY1wub3JnJC8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCB1cmxCYXNlSW1nID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ3RhYmxlLm5ld190YWJsZTI6bnRoLWNoaWxkKDEpIGltZy5saW5rJyk7CiAgICBjb25zdCBiYXNlVXJsID0gdXJsQmFzZUltZy5zcmMuc3BsaXQoJ3RoXycpWzBdOwogICAgY29uc3QgaW1nID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ3RhYmxlLm5ld190YWJsZTI6bnRoLWNoaWxkKDIpIGltZy5saW5rJyk7CiAgICBjb25zdCB1cmwgPSBiYXNlVXJsICsgaW1nLnNyYy5zcGxpdCgndGhfJylbMV07CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKHVybCk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogL15xcnJyb1wuY29tJC8sCiAgICBwYXRoOiAvXihcL2ltYWdlc1wvLispXC5odG1sJC8sCiAgfSwKICBhc3luYyBzdGFydCAobSkgewogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShtLnBhdGhbMV0pOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ecmFkaWthbFwucnUkLywKICAgIHBhdGg6IC9eXC9iaWdcLy8sCiAgfSwKICBhc3luYyByZWFkeSAoKSB7CiAgICBjb25zdCBpID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLiQoJy5iYXNlLXBhZ2VfY2VudGVyID4gZGl2Om50aC1jaGlsZCgyKSA+IGltZzpudGgtY2hpbGQoMSknKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwooZnVuY3Rpb24gKCkgewogIGNvbnN0IGRlZmF1bHRBY3Rpb24gPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucGFydGlhbChhY3Rpb24sICcjY29udGludWV0b2ltYWdlID4gZm9ybSBpbnB1dCcsICdpbWdbY2xhc3NePWNlbnRyZWRdJyk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IFsKICAgICAgewogICAgICAgIGhvc3Q6IFsKICAgICAgICAgIC9eKGltYWdlY29ybnxpbWFnZWRlY29kZXxpbWFnZWtvfGltYWdlc2h0b3JtfGltYWdlcmF2ZW4pXC5jb20kLywKICAgICAgICAgIC9eKGltZ2ljeXxpbWdzYXZ2eXxpbWd0emFyfGltZ3Rvcm5hZG98aW1na2lja3N8aW1nMnNoYXJlfGltZ2hpdHxpbWdtYWluKVwuY29tJC8sCiAgICAgICAgICAvXihpbWd0cmlhbHxpbWdyZXB1dGF8aW1nZmFwcGVyfGltZ3BhcnR8aW1nYmFsYW5hfGltZ2phenp8aW1nLXBsYW5ldHxpbWctcGF5KVwuY29tJC8sCiAgICAgICAgICAvXihob3N0dXJpbWFnZXxncmVhc3lpbWFnZXxkYW1pbWFnZXx4eHhzY3JlZW5zfHdwYzh8ZGltdHVzfHRpbml6b3xlcmltZ2V8bmltenNoYXJlfGhkbW96YSlcLmNvbSQvLAogICAgICAgICAgL14od3d3XC4pPyhpbWdsZW1vbnxpbWFnZWJsaW5rcylcLmNvbSQvLAogICAgICAgICAgL14od3d3XC4pPyhtdWx0aWltZylcLmNvbSQvLAogICAgICAgICAgL14oaXx4eHgpXC5oZW50YWl5b3V0dWJlXC5jb20kLywKICAgICAgICAgIC9eKGlcLik/aW1nc2VlZHM/XC5jb20kLywKICAgICAgICAgIC9eKHh4eHdlYmRseHh4fHRlZW5zaG90fGltYWdlb258aW1hZ2V0ZWFtfHZveWV1cmltYWdlfHRlZW5pbWFnZXxtZWdhaW1hZ2UpXC5vcmckLywKICAgICAgICAgIC9eKGltZ3N0dWRpb3xpbWdzcG90KVwub3JnJC8sCiAgICAgICAgICAvXihpbWdzZXJ2ZXxpbWdwcm9qZWN0fGltZ3B5dGhvbnxpbWdwaXh8bmF1Z2h0eWdhdGV8Z2FsbGVyeWNsb3VkfHh4aW1nfGltZy12aWV3KVwubmV0JC8sCiAgICAgICAgICAvXmhvdGltYWdlc1wuZXUkLywKICAgICAgICAgIC8oXnxcLik1NTg4OFwuZXUkLywKICAgICAgICAgIC9eKHBpY3p8dW5wb3JuKVwuc2l0ZSQvLAogICAgICAgICAgL15waWNcLmhvdGltZ1wuc2l0ZSQvLAogICAgICAgICAgL154eHhcLihzZXhleHxwb3Juc2NyZWVuKVwueHl6JC8sCiAgICAgICAgICAvXmVjb2ltYWdlc1wueHl6JC8sCiAgICAgICAgICAvXnd3d1wuaG90aW1hZ2VcLnVrJC8sCiAgICAgICAgICAvXmltZ2Nsb3VkXC5jbyQvLAogICAgICAgICAgL15waXh1cFwudXMkLywKICAgICAgICAgIC9eKHBvcC1pbWd8YWRzLWltZylcLmluZm8kLywKICAgICAgICAgIC9eKGRvbWFpbmt8cG9ybm8tcGlyYXQpXC5ydSQvLAogICAgICAgICAgL15kYXJwaXhcLmdhJC8sCiAgICAgICAgICAvXmlwaWN0dXJlXC5zdSQvLAogICAgICAgICAgL15hY2lkaW1nXC5jYyQvLAogICAgICAgICAgL15zXC5pbWdob3N0XC50b3AkLywKICAgICAgICAgIC9eaW1hZ2VzcHVibGljXC50ayQvLAogICAgICAgICAgL151bmRlcnBpY1wuY2x1YiQvLAogICAgICAgIF0sCiAgICAgICAgcGF0aDogL1wvaW1nLS4qXC5odG1sLywKICAgICAgfSwKICAgICAgewogICAgICAgIGhvc3Q6IC9eKGhlbnRhaS1wb3B8c3Rhci1oZW50YWkpXC5jb20kLywKICAgICAgICBwYXRoOiAvXlwvW3RpXVwvaW1nLS4qXC5odG1sLywKICAgICAgfSwKICAgICAgewogICAgICAgIGhvc3Q6IC9eaW1na2luZ1wuY28kLywKICAgICAgICBwYXRoOiAvXlwvaW1nND8tLipcLmh0bWwvLAogICAgICB9LAogICAgICB7CiAgICAgICAgaG9zdDogL15pbWFcLmd5JC8sCiAgICAgICAgcGF0aDogL15cL2lcLy4rJC8sCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBob3N0OiAvXnBpY21vemFcLmNvbSQvLAogICAgICAgIHBhdGg6IC9eXC9cLz9pbWctLipcLmh0bWwkLywKICAgICAgfSwKICAgIF0sCiAgICByZWFkeTogZGVmYXVsdEFjdGlvbiwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXmltZ3JhdFwuY29tJC8sCiAgICAgIHBhdGg6IC9eXC9pbWctLipcLmh0bWwvLAogICAgfSwKICAgIHJlYWR5OiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucGFydGlhbChhY3Rpb24sICcjY2xvc2UnLCAnI21haW5faW1hZ2UgaW1nLmNlbnRlci1ibG9jay5pbWctcmVzcG9uc2l2ZScpLAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eKHd3d1wuKT9pbWdmcmVzaFwuaW5mbyQvLAogICAgICBwYXRoOiAvXlwvaW1nLS4qXC5odG1sJC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUnKTsKICAgICAgbGV0IG5vZGUgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI2NvbnRpbnVldG9pbWFnZSA+IGZvcm0gaW5wdXQnKTsKICAgICAgaWYgKG5vZGUpIHsKICAgICAgICBub2RlLmNsaWNrKCk7CiAgICAgICAgbm9kZS5jbGljaygpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVzZXRDb29raWVzKCk7CiAgICAgIG5vZGUgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnaW1nW2NsYXNzXj1jZW50cmVkXScpOwogICAgICBpZiAobm9kZSkgewogICAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2Uobm9kZS5zcmMpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucG9zdCh3aW5kb3cubG9jYXRpb24uaHJlZi50b1N0cmluZygpLCB7CiAgICAgICAgY3RpOiAxLAogICAgICAgIHJlZjogJycsCiAgICAgICAgcmM6IDEsCiAgICAgICAgcnA6IDEsCiAgICAgICAgYnQ6IDAsCiAgICAgICAgYnc6ICdlZGdlJywKICAgICAgfSk7CiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IFsKICAgICAgewogICAgICAgIGhvc3Q6IC9eaW1na2luZ1wuY28kLywKICAgICAgICBwYXRoOiAvXlwvaW1ncy0uKlwuaHRtbC8sCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBob3N0OiAvXihpbWdraW5nc3xpbWFnZXJhcilcLmNvbSQvLAogICAgICAgIHBhdGg6IC9eXC9pbWctLipcLmh0bWwvLAogICAgICB9LAogICAgXSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgdXJsID0gX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLndpbmRvdy5saW5raWQ7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UodXJsKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15pbWdraW5nc1wuY29tJC8sCiAgICAgIHBhdGg6IC9eXC9pbWcyLS4qXC5odG1sLywKICAgIH0sCiAgICByZWFkeTogZGVmYXVsdEFjdGlvbiwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXmltZ3ByaW1lXC5jb20kLywKICAgICAgcGF0aDogL15cL2ltZ2EtdVwvKC4rKVwuanBlZ1wuaHRtbC8sCiAgICB9LAogICAgYXN5bmMgc3RhcnQgKCkgewogICAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgnL2ltZ2EtdScsICcvdScpLnJlcGxhY2UoJy5odG1sJywgJycpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9ecG9ybnlmYXBcLmNvbSQvLAogICAgICBwYXRoOiAvXC9waWNcLy8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBwID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ltZyNteUltZycpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKHAuc3JjKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15mdW5pbWdcLm5ldCQvLAogICAgICBwYXRoOiAvXC9pbWctLipcLmh0bWwvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0ICgpIHsKICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoJy9pbWctJywgJy9pbWczLScpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IC9eZnVuaW1nXC5uZXQkLywKICAgICAgcGF0aDogL1wvaW1nMy0uKlwuaHRtbC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNjb250aW51ZXRvaW1hZ2UgaW1nJyk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXjIycGl4eFwueHl6JC8sCiAgICAgIHBhdGg6IC9eXC9pYS1baW9dXC8oLispXC5qcGVnXC5odG1sLywKICAgIH0sCiAgICBhc3luYyBzdGFydCAoKSB7CiAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKCcvaWEtJywgJy8nKS5yZXBsYWNlKCcuaHRtbCcsICcnKTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKHBhdGgpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXjIycGl4eFwueHl6JC8sCiAgICAgIHBhdGg6IC9eXC94LW9cLyguKylcLmpwZWdcLmh0bWwvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0ICgpIHsKICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoJy94LScsICcvJykucmVwbGFjZSgnLmh0bWwnLCAnJyk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuTGluayhwYXRoKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL14yMnBpeHhcLnh5eiQvLAogICAgICBwYXRoOiAvXlwveC1pXC8oLispXC5qcGVnXC5odG1sLywKICAgIH0sCiAgICBhc3luYyBzdGFydCAoKSB7CiAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKCcveCcsICcveScpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiBbCiAgICAgIHsKICAgICAgICBob3N0OiAvXmltYWdlcmFyXC5jb20kLywKICAgICAgICBwYXRoOiAvXlwvaW1nMi0vLAogICAgICB9LAogICAgICB7CiAgICAgICAgaG9zdDogL15pbWdraW5nXC5jbyQvLAogICAgICAgIHBhdGg6IC9eXC9pbWdbdjNdLS4qXC5odG1sLywKICAgICAgfSwKICAgICAgewogICAgICAgIGhvc3Q6IC9ecGljc3RhdGVcLmNvbSQvLAogICAgICAgIHBhdGg6IC9eXC92aWV3XC9mdWxsXC8uKi8sCiAgICAgIH0sCiAgICBdLAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBjb25zdCBpID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2ltZ1thbHRdJyk7CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXmltZ3ByaW1lXC5jb20kLywKICAgICAgcGF0aDogL15cL2ltZy4qXC5odG1sJC8sCiAgICB9LAogICAgYXN5bmMgcmVhZHkgKCkgewogICAgICBsZXQgYSA9IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS4kKCcjY29udGludWV0b2ltYWdlIGEnKTsKICAgICAgaWYgKGEpIHsKICAgICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsoYS5ocmVmKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgYSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdpbWdbYWx0XScpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGEuc3JjKTsKICAgIH0sCiAgfSk7CiAgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICAgIHJ1bGU6IHsKICAgICAgaG9zdDogL15pbXhcLnRvJC8sCiAgICAgIHBhdGg6IFsKICAgICAgICAvXlwvaW1nLS4qXC5odG1sLywKICAgICAgICAvXlwvaVwvLiovLAogICAgICBdLAogICAgfSwKICAgIHJlYWR5OiBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucGFydGlhbChhY3Rpb24sICcjY29udGludWVidXR0b24sICNjb250aW51ZXRvaW1hZ2UgaW5wdXRbdHlwZT0ic3VibWl0Il0nLCAnaW1nW2NsYXNzXj1jZW50cmVkXScpLAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiB7CiAgICAgIGhvc3Q6IFsKICAgICAgICAvXih3d3dcLik/aW1nZHJpdmVcLm5ldCQvLAogICAgICAgIC9eKHd3d1wuKT8oaW1ndGF4aXxpbWd3YWxsZXR8aW1nYWR1bHQpXC5jb20kLywKICAgICAgXSwKICAgICAgcGF0aDogL15cL2ltZy0uKlwuaHRtbCQvLAogICAgfSwKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgbGV0IG0gPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnbWV0YVtwcm9wZXJ0eT0ib2c6aW1hZ2UiXScpOwogICAgICBtID0gbS5jb250ZW50LnJlcGxhY2UoJ3NtYWxsJywgJ2JpZycpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKG0pOwogICAgfSwKICB9KTsKICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogICAgcnVsZTogewogICAgICBob3N0OiAvXmltYWdlc2Nhbm5lclwuY2MkLywKICAgICAgcGF0aDogL15cLy4qXC5qcGdcLmh0bWwvLAogICAgfSwKICAgIGFzeW5jIHN0YXJ0ICgpIHsKICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoJy5odG1sJywgJycpOwogICAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkxpbmsocGF0aCk7CiAgICB9LAogIH0pOwogIF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgICBydWxlOiAnaHR0cHM6Ly9pbWdjbG91ZC5wdy9pbWFnZS8qJywKICAgIGFzeW5jIHJlYWR5ICgpIHsKICAgICAgY29uc3QgbCA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCdsaW5rW3JlbD0iaW1hZ2Vfc3JjIl0nKTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShsLmhyZWYpOwogICAgfSwKICB9KTsKICBhc3luYyBmdW5jdGlvbiBhY3Rpb24gKGZpcnN0U2VsZWN0b3IsIHNlY29uZFNlbGVjdG9yKSB7CiAgICBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ucmVtb3ZlKCdpZnJhbWUsICNhZGJsb2NrX2RldGVjdCwgLnBvcHVwT3ZlcmxheScpOwogICAgbGV0IG5vZGUgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJChmaXJzdFNlbGVjdG9yKTsKICAgIGlmIChub2RlKSB7CiAgICAgIG5vZGUgPSBmaW5kRmlyc3RGb3JtKG5vZGUpOwogICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IG5vZGUub3V0ZXJIVE1MOwogICAgICBub2RlID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2Zvcm0gaW5wdXQnKTsKICAgICAgbm9kZS5jbGljaygpOwogICAgICByZXR1cm47CiAgICB9CiAgICBub2RlID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoc2Vjb25kU2VsZWN0b3IpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShub2RlLnNyYyk7CiAgfQogIGZ1bmN0aW9uIGZpbmRGaXJzdEZvcm0gKGNoaWxkKSB7CiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQubG9jYWxOYW1lICE9PSAnZm9ybScpIHsKICAgICAgY2hpbGQgPSBjaGlsZC5wYXJlbnRFbGVtZW50OwogICAgfQogICAgcmV0dXJuIGNoaWxkOwogIH0KfSkoKTsKX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siXyJdLnJlZ2lzdGVyKHsKICBydWxlOiBbCiAgICAnaHR0cDovL3NjcmVlbmxpc3QucnUvZGV0YWlscy5waHA/aW1hZ2VfaWQ9KicsCiAgICAnaHR0cDovL3d3dy5pbWFnZW5ldHouZGUvKi8qLmh0bWwnLAogIF0sCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaW1nID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJyNwaWN0dXJlJyk7CiAgICBhd2FpdCBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0ub3BlbkltYWdlKGltZy5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6ICdodHRwOi8vd3d3LnN1YmlyaW1hZ2VuZXMuY29tLyouaHRtbCcsCiAgYXN5bmMgcmVhZHkgKCkgewogICAgY29uc3QgaSA9IE9iamVjdChfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0pKCcjSW1hZ2VuVmlzdWFsaXphZGEnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6ICdodHRwOi8vdGlueXBpYy5jb20vdmlldy5waHA/cGljPSonLAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2ltZ0VsZW1lbnQnKTsKICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaS5zcmMpOwogIH0sCn0pOwpfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJfIl0ucmVnaXN0ZXIoewogIHJ1bGU6IHsKICAgIGhvc3Q6IC9ed3d3XC50dXJib2ltYWdlaG9zdFwuY29tJC8sCiAgICBwYXRoOiAvXlwvcFwvLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGNvbnN0IGkgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI3VJbWFnZScpOwogICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5JbWFnZShpLnNyYyk7CiAgfSwKfSk7Cl9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIl8iXS5yZWdpc3Rlcih7CiAgcnVsZTogewogICAgaG9zdDogWwogICAgICAvXnh4eFwuZm9wa29kaWFrXC5zaXRlJC8sCiAgICAgIC9eYmxhbWVsZXNzXC53b3JrJC8sCiAgICAgIC9eeGFvdXRjaG91Y1wubGl2ZSQvLAogICAgXSwKICAgIHBhdGg6IC9eXC9pbWctLywKICB9LAogIGFzeW5jIHJlYWR5ICgpIHsKICAgIGlmIChkb2N1bWVudC5yZWZlcnJlciA9PSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmKSB7CiAgICAgIGxldCBpbWcgPSBfQURTQllQQVNTRVJfTkFNRVNQQUNFX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyIkIl0uJCgnI2NvbnRhaW5lciA+IGEgPiBpbWcnKTsKICAgICAgaWYgKCFpbWcpIHsKICAgICAgICBpbWcgPSBPYmplY3QoX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdKSgnI2NvbnRhaW5lciA+IGltZycpOwogICAgICB9CiAgICAgIGF3YWl0IF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXS5vcGVuSW1hZ2UoaW1nLnNyYyk7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBmID0gT2JqZWN0KF9BRFNCWVBBU1NFUl9OQU1FU1BBQ0VfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIiQiXSkoJ2Zvcm0nKTsKICAgICAgYXdhaXQgX0FEU0JZUEFTU0VSX05BTUVTUEFDRV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siJCJdLm9wZW5MaW5rKGYuYWN0aW9uLCB7IAogICAgICAgIHBvc3Q6IHsKICAgICAgICAgIGltZ0NvbnRpbnVlOiAnQ29udGludWUgdG8gaW1hZ2UgLi4uJywKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfSk7CiB9KSwKIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgIl8iLCBmdW5jdGlvbigpIHsgcmV0dXJuIF87IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICIkIiwgZnVuY3Rpb24oKSB7IHJldHVybiAkOyB9KTsKIHZhciB1dGlsX2FqYXhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7CiB2YXIgdXRpbF9jb29raWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7CiB2YXIgdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwogdmFyIHV0aWxfZGlzcGF0Y2hlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTsKIHZhciB1dGlsX2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7CiB2YXIgdXRpbF9pbWFnZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7CiB2YXIgdXRpbF9saW5rX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTsKIHZhciB1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKIHZhciB1dGlsX21pc2NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpOwogdmFyIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CmNvbnN0IF8gPSB7CiAgQWRzQnlwYXNzZXJFcnJvcjogdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bIkFkc0J5cGFzc2VyRXJyb3IiXSwKICBldmlsOiB1dGlsX21pc2NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1siZXZpbCJdLAogIGZpbmQ6IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJmaW5kIl0sCiAgZm9yRWFjaDogdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bImZvckVhY2giXSwKICBnZW5lcmF0ZVJhbmRvbUlQOiB1dGlsX21pc2NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1siZ2VuZXJhdGVSYW5kb21JUCJdLAogIGluZm86IHV0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bImluZm8iXSwKICBub25lOiB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1sibm9uZSJdLAogIHBhcnRpYWw6IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJwYXJ0aWFsIl0sCiAgcmVnaXN0ZXI6IHV0aWxfZGlzcGF0Y2hlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fWyJyZWdpc3RlciJdLAogIHRyeUV2ZXJ5OiB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1sidHJ5RXZlcnkiXSwKICB3YWl0OiB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1sid2FpdCJdLAogIHdhcm46IHV0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bIndhcm4iXSwKfTsKZnVuY3Rpb24gJCAoc2VsZWN0b3IsIGNvbnRleHQpIHsKICByZXR1cm4gT2JqZWN0KHV0aWxfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bInF1ZXJ5U2VsZWN0b3IiXSkoc2VsZWN0b3IsIGNvbnRleHQpOwp9CiQuJCA9IHV0aWxfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bInF1ZXJ5U2VsZWN0b3JPck51bGwiXTsKJC4kJCA9IHV0aWxfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bInF1ZXJ5U2VsZWN0b3JBbGwiXTsKJC5ibG9jayA9IHV0aWxfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bImJsb2NrIl07CiQuZ2V0ID0gdXRpbF9hamF4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImdldCJdOwokLmdldENvb2tpZSA9IHV0aWxfY29va2llX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bImdldENvb2tpZSJdOwokLm51a2UgPSB1dGlsX21pc2NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1sibnVrZSJdOwokLm9wZW5JbWFnZSA9IHV0aWxfaW1hZ2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1sib3BlbkltYWdlIl07CiQub3BlbkxpbmsgPSB1dGlsX2xpbmtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1sib3BlbkxpbmsiXTsKJC5wb3N0ID0gdXRpbF9hamF4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bInBvc3QiXTsKJC5yZW1vdmUgPSB1dGlsX2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fWyJyZW1vdmUiXTsKJC5yZW1vdmVBbGxUaW1lciA9IHV0aWxfbWlzY19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fWyJyZW1vdmVBbGxUaW1lciJdOwokLnJlc2V0Q29va2llcyA9IHV0aWxfY29va2llX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bInJlc2V0Q29va2llcyJdOwokLnNlYXJjaEZyb21TY3JpcHRzID0gdXRpbF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1sic2VhcmNoRnJvbVNjcmlwdHMiXTsKJC5zZXRDb29raWUgPSB1dGlsX2Nvb2tpZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJzZXRDb29raWUiXTsKJC50b0RPTSA9IHV0aWxfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bInRvRE9NIl07CiQud2luZG93ID0gdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fWyJ1c3ciXTsKIH0pLAogKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiZ2V0IiwgZnVuY3Rpb24oKSB7IHJldHVybiBnZXQ7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJwb3N0IiwgZnVuY3Rpb24oKSB7IHJldHVybiBwb3N0OyB9KTsKIHZhciB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7CiB2YXIgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKIHZhciB1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKY2xhc3MgQWpheEVycm9yIGV4dGVuZHMgdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIkFkc0J5cGFzc2VyRXJyb3IiXSB7CiAgY29uc3RydWN0b3IgKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzLCBzdGF0dXMsIHJlc3BvbnNlKSB7CiAgICBzdXBlcihgJHttZXRob2R9ICR7dXJsfSBnb3QgJHtzdGF0dXN9YCk7CiAgICB0aGlzLl9tZXRob2QgPSBtZXRob2Q7CiAgICB0aGlzLl91cmwgPSB1cmw7CiAgICB0aGlzLl9kYXRhID0gZGF0YTsKICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzOwogICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzOwogICAgdGhpcy5fcmVzcG9uc2UgPSByZXNwb25zZTsKICB9CiAgZ2V0IG5hbWUgKCkgewogICAgcmV0dXJuICdBamF4RXJyb3InOwogIH0KICBnZXQgbWV0aG9kICgpIHsKICAgIHJldHVybiB0aGlzLl9tZXRob2Q7CiAgfQogIGdldCB1cmwgKCkgewogICAgcmV0dXJuIHRoaXMuX3VybDsKICB9CiAgZ2V0IGRhdGEgKCkgewogICAgcmV0dXJuIHRoaXMuX2RhdGE7CiAgfQogIGdldCBoZWFkZXJzICgpIHsKICAgIHJldHVybiB0aGlzLl9oZWFkZXJzOwogIH0KICBnZXQgc3RhdHVzICgpIHsKICAgIHJldHVybiB0aGlzLl9zdGF0dXM7CiAgfQogIGdldCByZXNwb25zZSAoKSB7CiAgICByZXR1cm4gdGhpcy5fcmVzcG9uc2U7CiAgfQp9CmZ1bmN0aW9uIGRlZXBKb2luIChwcmVmaXgsIG9iamVjdCkgewogIGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpOwogIGNvbnN0IG1hcHBlZCA9IE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibWFwIl0pKGtleXMsIChrKSA9PiB7CiAgICBjb25zdCB2ID0gb2JqZWN0W2tdOwogICAgY29uc3Qga2V5ID0gYCR7cHJlZml4fVske2t9XWA7CiAgICBpZiAodHlwZW9mIHYgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiBkZWVwSm9pbihrZXksIHYpOwogICAgfQogICAgY29uc3QgdG1wID0gW2tleSwgdl0ubWFwKGVuY29kZVVSSUNvbXBvbmVudCk7CiAgICByZXR1cm4gdG1wLmpvaW4oJz0nKTsKICB9KTsKICByZXR1cm4gbWFwcGVkLmpvaW4oJyYnKTsKfQpmdW5jdGlvbiB0b1F1ZXJ5IChkYXRhKSB7CiAgY29uc3QgdHlwZSA9IHR5cGVvZiBkYXRhOwogIGlmIChkYXRhID09PSBudWxsIHx8ICh0eXBlICE9PSAnc3RyaW5nJyAmJiB0eXBlICE9PSAnb2JqZWN0JykpIHsKICAgIHJldHVybiAnJzsKICB9CiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gZGF0YTsKICB9CiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBTdHJpbmcpIHsKICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7CiAgfQogIGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkYXRhKTsKICByZXR1cm4gT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJtYXAiXSkoa2V5cywgKGspID0+IHsKICAgIGNvbnN0IHYgPSBkYXRhW2tdOwogICAgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0JykgewogICAgICByZXR1cm4gZGVlcEpvaW4oaywgdik7CiAgICB9CiAgICBjb25zdCB0bXAgPSBbaywgdl0ubWFwKGVuY29kZVVSSUNvbXBvbmVudCk7CiAgICByZXR1cm4gdG1wLmpvaW4oJz0nKTsKICB9KS5qb2luKCcmJyk7Cn0KZnVuY3Rpb24gYWpheCAobWV0aG9kLCB1cmwsIGRhdGEsIGhlYWRlcnMpIHsKICBPYmplY3QodXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siZGVidWciXSkoJ2FqYXgnLCBtZXRob2QsIHVybCwgZGF0YSwgaGVhZGVycyk7CiAgY29uc3QgbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICBsLmhyZWYgPSB1cmw7CiAgY29uc3QgcmVxSG9zdCA9IGwuaG9zdG5hbWU7CiAgY29uc3Qgb3ZlcnJpZGVIZWFkZXJzID0gewogICAgSG9zdDogcmVxSG9zdCB8fCB3aW5kb3cubG9jYXRpb24uaG9zdCwKICAgIE9yaWdpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpbiwKICAgIFJlZmVyZXI6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnLAogIH07CiAgT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJmb3JFYWNoIl0pKG92ZXJyaWRlSGVhZGVycywgKHYsIGspID0+IHsKICAgIGlmIChoZWFkZXJzW2tdID09PSB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9uZSJdKSB7CiAgICAgIGRlbGV0ZSBoZWFkZXJzW2tdOwogICAgfSBlbHNlIHsKICAgICAgaGVhZGVyc1trXSA9IHY7CiAgICB9CiAgfSk7CiAgaWYgKGRhdGEpIHsKICAgIGlmIChoZWFkZXJzWydDb250ZW50LVR5cGUnXS5pbmRleE9mKCdqc29uJykgPj0gMCkgewogICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICB9IGVsc2UgewogICAgICBkYXRhID0gdG9RdWVyeShkYXRhKTsKICAgIH0KICAgIGhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSBkYXRhLmxlbmd0aDsKICB9CiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1siR01BUEkiXS54bWxIdHRwUmVxdWVzdCh7CiAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICB1cmw6IHVybCwKICAgICAgZGF0YTogZGF0YSwKICAgICAgaGVhZGVyczogaGVhZGVycywKICAgICAgb25sb2FkIChyZXNwb25zZSkgewogICAgICAgIHJlc3BvbnNlID0gKHR5cGVvZiByZXNwb25zZS5yZXNwb25zZVRleHQgIT09ICd1bmRlZmluZWQnKSA/IHJlc3BvbnNlIDogdGhpczsKICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgIHJlamVjdChuZXcgQWpheEVycm9yKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnJlc3BvbnNlVGV4dCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgfQogICAgICB9LAogICAgICBvbmVycm9yIChyZXNwb25zZSkgewogICAgICAgIHJlc3BvbnNlID0gKHR5cGVvZiByZXNwb25zZS5yZXNwb25zZVRleHQgIT09ICd1bmRlZmluZWQnKSA/IHJlc3BvbnNlIDogdGhpczsKICAgICAgICByZWplY3QobmV3IEFqYXhFcnJvcihtZXRob2QsIHVybCwgZGF0YSwgaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5yZXNwb25zZVRleHQpKTsKICAgICAgfSwKICAgIH0pOwogIH0pOwp9CmZ1bmN0aW9uIGdldCAodXJsLCBkYXRhLCBoZWFkZXJzKSB7CiAgZGF0YSA9IHRvUXVlcnkoZGF0YSk7CiAgZGF0YSA9IGRhdGEgPyAnPycgKyBkYXRhIDogJyc7CiAgaGVhZGVycyA9IGhlYWRlcnMgfHwge307CiAgcmV0dXJuIGFqYXgoJ0dFVCcsIHVybCArIGRhdGEsICcnLCBoZWFkZXJzKTsKfQpmdW5jdGlvbiBwb3N0ICh1cmwsIGRhdGEsIGhlYWRlcnMpIHsKICBjb25zdCBoID0gewogICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnLAogIH07CiAgaWYgKGhlYWRlcnMpIHsKICAgIE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZm9yRWFjaCJdKShoZWFkZXJzLCAodiwgaykgPT4gewogICAgICBoW2tdID0gdjsKICAgIH0pOwogIH0KICByZXR1cm4gYWpheCgnUE9TVCcsIHVybCwgZGF0YSwgaCk7Cn0KIH0pLAogKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAic2V0Q29va2llIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzZXRDb29raWU7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJnZXRDb29raWUiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGdldENvb2tpZTsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgInJlc2V0Q29va2llcyIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVzZXRDb29raWVzOyB9KTsKIHZhciB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7CmZ1bmN0aW9uIHNldENvb2tpZSAoa2V5LCB2YWx1ZSkgewogIGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHt2YWx1ZX07cGF0aD0ke2xvY2F0aW9uLnBhdGhuYW1lfTtgOwp9CmZ1bmN0aW9uIGdldENvb2tpZSAoa2V5KSB7CiAgbGV0IFssIGMsXSA9IE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZmluZCJdKShkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKSwgKHYpID0+IHsKICAgIGNvbnN0IGsgPSB2LnJlcGxhY2UoL15ccyooW2EtekEtWjAtOS1fXSspPS4rJC8sICckMScpOwogICAgaWYgKGsgIT09IGtleSkgewogICAgICByZXR1cm4gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXTsKICAgIH0KICB9KTsKICBpZiAoYyA9PT0gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGMgPSBjLnJlcGxhY2UoL15ccypbYS16QS1aMC05LV9dKz0oW147XSspLj8kLywgJyQxJyk7CiAgaWYgKCFjKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIGM7Cn0KZnVuY3Rpb24gcmVzZXRDb29raWVzICgpIHsKICBjb25zdCBhID0gZG9jdW1lbnQuZG9tYWluOwogIGNvbnN0IGIgPSBkb2N1bWVudC5kb21haW4ucmVwbGFjZSgvXnd3d1wuLywgJycpOwogIGNvbnN0IGMgPSBkb2N1bWVudC5kb21haW4ucmVwbGFjZSgvXihcdytcLikrPyhcdytcLlx3KykkLywgJyQyJyk7CiAgY29uc3QgZCA9IChuZXcgRGF0ZSgxZTMpKS50b1VUQ1N0cmluZygpOwogIE9iamVjdCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZm9yRWFjaCJdKShkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKSwgKHYpID0+IHsKICAgIGNvbnN0IGsgPSB2LnJlcGxhY2UoL15ccyooXHcrKT0uKyQvLCAnJDEnKTsKICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2t9PTtleHBpcmVzPSR7ZH07YDsKICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2t9PTtwYXRoPS87ZXhwaXJlcz0ke2R9O2A7CiAgICBjb25zdCBlID0gKGEsIGIsIGMpID0+IGAke2F9PTtwYXRoPS87ZG9tYWluPSR7Yn07ZXhwaXJlcz0ke2N9O2A7CiAgICBkb2N1bWVudC5jb29raWUgPSBlKGssIGEsIGQpOwogICAgZG9jdW1lbnQuY29va2llID0gZShrLCBiLCBkKTsKICAgIGRvY3VtZW50LmNvb2tpZSA9IGUoaywgYywgZCk7CiAgfSk7Cn0KIH0pLAogKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiYmxvY2siLCBmdW5jdGlvbigpIHsgcmV0dXJuIGJsb2NrOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAicXVlcnlTZWxlY3RvciIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcXVlcnlTZWxlY3RvcjsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgInF1ZXJ5U2VsZWN0b3JBbGwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHF1ZXJ5U2VsZWN0b3JBbGw7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJxdWVyeVNlbGVjdG9yT3JOdWxsIiwgZnVuY3Rpb24oKSB7IHJldHVybiBxdWVyeVNlbGVjdG9yT3JOdWxsOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAicmVtb3ZlIiwgZnVuY3Rpb24oKSB7IHJldHVybiByZW1vdmU7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJzZWFyY2hGcm9tU2NyaXB0cyIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VhcmNoRnJvbVNjcmlwdHM7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJ0b0RPTSIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdG9ET007IH0pOwogdmFyIHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKIHZhciB1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKY2xhc3MgRG9tTm90Rm91bmRFcnJvciBleHRlbmRzIHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJBZHNCeXBhc3NlckVycm9yIl0gewogIGNvbnN0cnVjdG9yIChzZWxlY3RvcikgewogICAgc3VwZXIoYFxgJHtzZWxlY3Rvcn1cYCBub3QgZm91bmRgKTsKICB9CiAgZ2V0IG5hbWUgKCkgewogICAgcmV0dXJuICdEb21Ob3RGb3VuZEVycm9yJzsKICB9Cn0KZnVuY3Rpb24gcXVlcnlTZWxlY3RvciAoc2VsZWN0b3IsIGNvbnRleHQpIHsKICBpZiAoIWNvbnRleHQgfHwgIWNvbnRleHQucXVlcnlTZWxlY3RvcikgewogICAgY29udGV4dCA9IGRvY3VtZW50OwogIH0KICBjb25zdCBuID0gY29udGV4dC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICBpZiAoIW4pIHsKICAgIHRocm93IG5ldyBEb21Ob3RGb3VuZEVycm9yKHNlbGVjdG9yKTsKICB9CiAgcmV0dXJuIG47Cn0KZnVuY3Rpb24gcXVlcnlTZWxlY3Rvck9yTnVsbCAoc2VsZWN0b3IsIGNvbnRleHQpIHsKICB0cnkgewogICAgcmV0dXJuIHF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IsIGNvbnRleHQpOwogIH0gY2F0Y2ggKGUpIHsKICAgIHJldHVybiBudWxsOwogIH0KfQpmdW5jdGlvbiBxdWVyeVNlbGVjdG9yQWxsIChzZWxlY3RvciwgY29udGV4dCkgewogIGlmICghY29udGV4dCB8fCAhY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKSB7CiAgICBjb250ZXh0ID0gZG9jdW1lbnQ7CiAgfQogIGNvbnN0IG5zID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsKICByZXR1cm4gbnM7Cn0KZnVuY3Rpb24gdG9ET00gKHJhd0hUTUwpIHsKICB0cnkgewogICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgY29uc3QgRE9NSFRNTCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcocmF3SFRNTCwgJ3RleHQvaHRtbCcpOwogICAgcmV0dXJuIERPTUhUTUw7CiAgfSBjYXRjaCAoZSkgewogICAgdGhyb3cgbmV3IHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJBZHNCeXBhc3NlckVycm9yIl0oJ2NvdWxkIG5vdCBwYXJzZSBIVE1MIHRvIERPTScpOwogIH0KfQpmdW5jdGlvbiByZW1vdmUgKHNlbGVjdG9yLCBjb250ZXh0KSB7CiAgY29uc3Qgbm9kZXMgPSBxdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yLCBjb250ZXh0KTsKICBPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImZvckVhY2giXSkobm9kZXMsIChlKSA9PiB7CiAgICBPYmplY3QodXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1siZGVidWciXSkoJ3JlbW92ZWQnLCBlKTsKICAgIGUucmVtb3ZlKCk7CiAgfSk7Cn0KZnVuY3Rpb24gYmxvY2sgKHNlbGVjdG9yLCBjb250ZXh0PW51bGwpIHsKICBpZiAoIWNvbnRleHQpIHsKICAgIGNvbnRleHQgPSBkb2N1bWVudDsKICB9CiAgbGV0IGZuID0gbnVsbDsKICBpZiAoT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJpc1N0cmluZyJdKShzZWxlY3RvcikpIHsKICAgIGZuID0gKCkgPT4gewogICAgICByZW1vdmUoc2VsZWN0b3IsIGNvbnRleHQpOwogICAgfTsKICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykgewogICAgZm4gPSAobXV0YXRpb24pID0+IHsKICAgICAgbXV0YXRpb24uYWRkZWROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7CiAgICAgICAgaWYgKHNlbGVjdG9yKG5vZGUpKSB7CiAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CiAgfSBlbHNlIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dyb25nIHNlbGVjdG9yJyk7CiAgfQogIGNvbnN0IG8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7CiAgICBtdXRhdGlvbnMuZm9yRWFjaCgobXV0YXRpb24pID0+IHsKICAgICAgZm4obXV0YXRpb24pOwogICAgfSk7CiAgfSk7CiAgby5vYnNlcnZlKGNvbnRleHQsIHsKICAgIGNoaWxkTGlzdDogdHJ1ZSwKICAgIHN1YnRyZWU6IHRydWUsCiAgfSk7Cn0KZnVuY3Rpb24gc2VhcmNoRnJvbVNjcmlwdHNCeVJlZ0V4cCAocGF0dGVybiwgY29udGV4dCkgewogIGNvbnN0IHNjcmlwdHMgPSBxdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnLCBjb250ZXh0KTsKICBjb25zdCBbLCAsIG1dID0gT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJmaW5kIl0pKHNjcmlwdHMsIChzKSA9PiB7CiAgICBjb25zdCBtID0gcy50ZXh0Q29udGVudC5tYXRjaChwYXR0ZXJuKTsKICAgIGlmICghbSkgewogICAgICByZXR1cm4gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXTsKICAgIH0KICAgIHJldHVybiBtOwogIH0pOwogIGlmIChtID09PSB1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9uZSJdKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIG07Cn0KZnVuY3Rpb24gc2VhcmNoRnJvbVNjcmlwdHNCeVN0cmluZyAocGF0dGVybiwgY29udGV4dCkgewogIGNvbnN0IHNjcmlwdHMgPSBxdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnLCBjb250ZXh0KTsKICBjb25zdCBbLCBtLF0gPSBPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImZpbmQiXSkoc2NyaXB0cywgKHMpID0+IHsKICAgIGNvbnN0IG0gPSBzLnRleHRDb250ZW50LmluZGV4T2YocGF0dGVybik7CiAgICBpZiAobSA8IDApIHsKICAgICAgcmV0dXJuIHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJub25lIl07CiAgICB9CiAgICByZXR1cm4gbTsKICB9KTsKICBpZiAobSA9PT0gdXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bIm5vbmUiXSkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIHJldHVybiBtLnRleHRDb250ZW50Owp9CmZ1bmN0aW9uIHNlYXJjaEZyb21TY3JpcHRzIChwYXR0ZXJuLCBjb250ZXh0KSB7CiAgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgIHJldHVybiBzZWFyY2hGcm9tU2NyaXB0c0J5UmVnRXhwKHBhdHRlcm4sIGNvbnRleHQpOwogIH0gZWxzZSBpZiAoT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJpc1N0cmluZyJdKShwYXR0ZXJuKSkgewogICAgcmV0dXJuIHNlYXJjaEZyb21TY3JpcHRzQnlTdHJpbmcocGF0dGVybiwgY29udGV4dCk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBudWxsOwogIH0KfQogfSksCiAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJvcGVuSW1hZ2UiLCBmdW5jdGlvbigpIHsgcmV0dXJuIG9wZW5JbWFnZTsgfSk7CiB2YXIgdXRpbF9saW5rX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTsKIHZhciB1dGlsX2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7CiB2YXIgdXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7CiB2YXIgdXRpbF9taXNjX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTsKIHZhciB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwphc3luYyBmdW5jdGlvbiBvcGVuSW1hZ2UgKGltZ1NyYywgb3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogIGNvbnN0IHJlcGxhY2UgPSAhIW9wdGlvbnMucmVwbGFjZTsKICBjb25zdCByZWZlcmVyID0gISFvcHRpb25zLnJlZmVyZXI7CiAgaWYgKHJlcGxhY2UpIHsKICAgIGF3YWl0IHJlcGxhY2VCb2R5KGltZ1NyYyk7CiAgICByZXR1cm47CiAgfQogIGNvbnN0IHJlZGlyZWN0SW1hZ2UgPSBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bIkdNQVBJIl0uZ2V0VmFsdWUoJ3JlZGlyZWN0X2ltYWdlJyk7CiAgaWYgKHJlZGlyZWN0SW1hZ2UpIHsKICAgIGF3YWl0IE9iamVjdCh1dGlsX2xpbmtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sib3BlbkxpbmsiXSkoaW1nU3JjLCB7CiAgICAgIHJlZmVyZXI6IHJlZmVyZXIsCiAgICB9KTsKICB9Cn0KZnVuY3Rpb24gZW5hYmxlU2Nyb2xsaW5nICgpIHsKICBjb25zdCBvID0gZG9jdW1lbnQuY29tcGF0TW9kZSA9PT0gJ0NTUzFDb21wYXQnID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuYm9keTsKICBvLnN0eWxlLm92ZXJmbG93ID0gJyc7Cn0KZnVuY3Rpb24gdG9nZ2xlU2hyaW5raW5nICgpIHsKICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ2Fkc2J5cGFzc2VyLXNocmlua2VkJyk7Cn0KZnVuY3Rpb24gY2hlY2tTY2FsaW5nICgpIHsKICBjb25zdCBudyA9IHRoaXMubmF0dXJhbFdpZHRoOwogIGNvbnN0IG5oID0gdGhpcy5uYXR1cmFsSGVpZ2h0OwogIGNvbnN0IGN3ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoOwogIGNvbnN0IGNoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsKICBpZiAoKG53ID4gY3cgfHwgbmggPiBjaCkgJiYgIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdhZHNieXBhc3Nlci1yZXNpemFibGUnKSkgewogICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhZHNieXBhc3Nlci1yZXNpemFibGUnKTsKICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYWRzYnlwYXNzZXItc2hyaW5rZWQnKTsKICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVTaHJpbmtpbmcpOwogIH0gZWxzZSB7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlU2hyaW5raW5nKTsKICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnYWRzYnlwYXNzZXItc2hyaW5rZWQnKTsKICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnYWRzYnlwYXNzZXItcmVzaXphYmxlJyk7CiAgfQp9CmFzeW5jIGZ1bmN0aW9uIHNjYWxlSW1hZ2UgKGkpIHsKICBjb25zdCBzaVVSTCA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1siR01BUEkiXS5nZXRSZXNvdXJjZVVybCgnc2NhbGVJbWFnZScpOwogIGFwcGVuZFN0eWxlVVJMKHNpVVJMKTsKICBpZiAoaS5uYXR1cmFsV2lkdGggJiYgaS5uYXR1cmFsSGVpZ2h0KSB7CiAgICBjaGVja1NjYWxpbmcuY2FsbChpKTsKICB9IGVsc2UgewogICAgaS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY2hlY2tTY2FsaW5nKTsKICB9CiAgbGV0IGggPSAwOwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7CiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGgpOwogICAgaCA9IHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrU2NhbGluZy5iaW5kKGkpLCAxMDApOwogIH0pOwp9CmFzeW5jIGZ1bmN0aW9uIGNoYW5nZUJhY2tncm91bmQgKCkgewogIGNvbnN0IGJnSW1hZ2UgPSBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bIkdNQVBJIl0uZ2V0UmVzb3VyY2VVcmwoJ2JnSW1hZ2UnKTsKICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMjIyMjIyJzsKICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJyR7YmdJbWFnZX0nKWA7Cn0KYXN5bmMgZnVuY3Rpb24gYWxpZ25DZW50ZXIgKCkgewogIGNvbnN0IGFjVVJMID0gYXdhaXQgdXRpbF9wbGF0Zm9ybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fWyJHTUFQSSJdLmdldFJlc291cmNlVXJsKCdhbGlnbkNlbnRlcicpOwogIGFwcGVuZFN0eWxlVVJMKGFjVVJMKTsKfQpmdW5jdGlvbiBpbmplY3RTdHlsZSAoZCwgaSkgewogIE9iamVjdCh1dGlsX2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJyZW1vdmUiXSkoJ3N0eWxlLCBsaW5rW3JlbD1zdHlsZXNoZWV0XScpOwogIGQuaWQgPSAnYWRzYnlwYXNzZXItd3JhcHBlcic7CiAgaS5pZCA9ICdhZHNieXBhc3Nlci1pbWFnZSc7Cn0KZnVuY3Rpb24gYXBwZW5kU3R5bGVVUkwgKHVybCkgewogIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7CiAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7CiAgbGluay50eXBlID0gJ3RleHQvY3NzJzsKICBsaW5rLmhyZWYgPSB1cmw7CiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTsKfQphc3luYyBmdW5jdGlvbiByZXBsYWNlQm9keSAoaW1nU3JjKSB7CiAgY29uc3QgcmVkaXJlY3RJbWFnZSA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1siR01BUEkiXS5nZXRWYWx1ZSgncmVkaXJlY3RfaW1hZ2UnKTsKICBpZiAoIXJlZGlyZWN0SW1hZ2UpIHsKICAgIHJldHVybjsKICB9CiAgaWYgKCFpbWdTcmMpIHsKICAgIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJ3YXJuIl0pKCdmYWxzZSB1cmwnKTsKICAgIHJldHVybjsKICB9CiAgT2JqZWN0KHV0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bImluZm8iXSkoYHJlcGxhY2luZyBib2R5IHdpdGggXGAke2ltZ1NyY31cYCAuLi5gKTsKICBPYmplY3QodXRpbF9taXNjX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bInJlbW92ZUFsbFRpbWVyIl0pKCk7CiAgZW5hYmxlU2Nyb2xsaW5nKCk7CiAgZG9jdW1lbnQuYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTsKICBjb25zdCBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkKTsKICBjb25zdCBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7CiAgaS5zcmMgPSBpbWdTcmM7CiAgZC5hcHBlbmRDaGlsZChpKTsKICBjb25zdCBhYyA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1siR01BUEkiXS5nZXRWYWx1ZSgnYWxpZ25fY2VudGVyJyk7CiAgY29uc3Qgc2kgPSBhd2FpdCB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bIkdNQVBJIl0uZ2V0VmFsdWUoJ3NjYWxlX2ltYWdlJyk7CiAgaWYgKGFjIHx8IHNpKSB7CiAgICBpbmplY3RTdHlsZShkLCBpKTsKICB9CiAgaWYgKGFjKSB7CiAgICBhd2FpdCBhbGlnbkNlbnRlcigpOwogIH0KICBjb25zdCBjYiA9IGF3YWl0IHV0aWxfcGxhdGZvcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1siR01BUEkiXS5nZXRWYWx1ZSgnY2hhbmdlX2JhY2tncm91bmQnKTsKICBpZiAoY2IpIHsKICAgIGF3YWl0IGNoYW5nZUJhY2tncm91bmQoKTsKICB9CiAgaWYgKHNpKSB7CiAgICBhd2FpdCBzY2FsZUltYWdlKGkpOwogIH0KfQogfSksCiAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJvcGVuTGluayIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gb3Blbkxpbms7IH0pOwogdmFyIHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKIHZhciB1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKZnVuY3Rpb24gcHJlcGFyZSAoZSkgewogIGlmICghZG9jdW1lbnQuYm9keSkgewogICAgZG9jdW1lbnQuYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTsKICB9CiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKTsKICByZXR1cm4gT2JqZWN0KHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJ3YWl0Il0pKDApOwp9CmFzeW5jIGZ1bmN0aW9uIGdldCAodXJsKSB7CiAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICBhLmhyZWYgPSB1cmw7CiAgbGV0IGNsaWNrZWQgPSBmYWxzZTsKICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7CiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgIGNsaWNrZWQgPSB0cnVlOwogIH0sIHRydWUpOwogIGF3YWl0IHByZXBhcmUoYSk7CiAgYS5jbGljaygpOwogIGNvbnN0IHRpY2sgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICBpZiAoY2xpY2tlZCkgewogICAgICBPYmplY3QodXRpbF9sb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1siaW5mbyJdKSgnYWxyZWFkeSBjbGlja2VkJyk7CiAgICAgIGNsZWFySW50ZXJ2YWwodGljayk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJpbmZvIl0pKCd0cnkgYWdhaW4nKTsKICAgIGEuY2xpY2soKTsKICB9LCA1MDApOwp9CmFzeW5jIGZ1bmN0aW9uIHBvc3QgKHBhdGgsIHBhcmFtcykgewogIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTsKICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpOwogIGZvcm0ubWV0aG9kID0gJ3Bvc3QnOwogIGZvcm0uYWN0aW9uID0gcGF0aDsKICBPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImZvckVhY2giXSkocGFyYW1zLCAodmFsdWUsIGtleSkgPT4gewogICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogICAgaW5wdXQudHlwZSA9ICdoaWRkZW4nOwogICAgaW5wdXQubmFtZSA9IGtleTsKICAgIGlucHV0LnZhbHVlID0gdmFsdWU7CiAgICBmb3JtLmFwcGVuZENoaWxkKGlucHV0KTsKICB9KTsKICBhd2FpdCBwcmVwYXJlKGZvcm0pOwogIGZvcm0uc3VibWl0KCk7Cn0KYXN5bmMgZnVuY3Rpb24gb3BlbkxpbmsgKHRvLCBvcHRpb25zKSB7CiAgaWYgKCFPYmplY3QodXRpbF9jb3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImlzU3RyaW5nIl0pKHRvKSAmJiAhdG8pIHsKICAgIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJ3YXJuIl0pKCdmYWxzZSBVUkwnKTsKICAgIHJldHVybjsKICB9CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgY29uc3Qgd2l0aFJlZmVyZXIgPSB0eXBlb2Ygb3B0aW9ucy5yZWZlcmVyID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLnJlZmVyZXI7CiAgY29uc3QgcG9zdERhdGEgPSBvcHRpb25zLnBvc3Q7CiAgY29uc3QgZnJvbSA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpOwogIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJpbmZvIl0pKGAke2Zyb219IC0+ICR7dG99YCk7CiAgaWYgKHBvc3REYXRhKSB7CiAgICBhd2FpdCBwb3N0KHRvLCBwb3N0RGF0YSk7CiAgICByZXR1cm47CiAgfQogIGlmICh3aXRoUmVmZXJlcikgewogICAgYXdhaXQgZ2V0KHRvKTsKICAgIHJldHVybjsKICB9CiAgd2luZG93LnRvcC5sb2NhdGlvbi5yZXBsYWNlKHRvKTsKfQogfSksCiAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJyZW1vdmVBbGxUaW1lciIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVtb3ZlQWxsVGltZXI7IH0pOwogX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJudWtlIiwgZnVuY3Rpb24oKSB7IHJldHVybiBudWtlOyB9KTsKIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCAiZ2VuZXJhdGVSYW5kb21JUCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZ2VuZXJhdGVSYW5kb21JUDsgfSk7CiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgImV2aWwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGV2aWw7IH0pOwogdmFyIHV0aWxfY29yZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKIHZhciB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwogdmFyIHV0aWxfbG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpOwpmdW5jdGlvbiByZW1vdmVBbGxUaW1lciAoKSB7CiAgbGV0IGhhbmRsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9wIl0sIDEwKTsKICB3aGlsZSAoaGFuZGxlID4gMCkgewogICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaGFuZGxlLS0pOwogIH0KICBoYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dCh1dGlsX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1sibm9wIl0sIDEwKTsKICB3aGlsZSAoaGFuZGxlID4gMCkgewogICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUtLSk7CiAgfQp9CmZ1bmN0aW9uIG51a2UgKHVybCkgewogIHRyeSB7CiAgICB1dGlsX3BsYXRmb3JtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bInVzdyJdLmRvY3VtZW50LndyaXRlKCdudWtlZCBieSBBZHNCeXBhc3NlciwgbGVhZGluZyB0byAuLi48YnIvPicpOwogIH0gY2F0Y2ggKGUpIHsKICAgIE9iamVjdCh1dGlsX2xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJ3YXJuIl0pKCdudWtlIGZhaWxlZCcsIGUpOwogIH0KICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIGEuaHJlZiA9IHVybDsKICBhLnRleHRDb250ZW50ID0gdXJsOwogIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7Cn0KZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21JUCAoKSB7CiAgcmV0dXJuIFswLCAwLCAwLCAwXS5tYXAoKCkgPT4gewogICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1Nik7CiAgfSkuam9pbignLicpOwp9CmZ1bmN0aW9uIGV2aWwgKHNjcmlwdCkgewogIHJldHVybiAoKAogICAgR00sCiAgICBHTV9kZWxldGVWYWx1ZSwKICAgIEdNX2dldFJlc291cmNlVVJMLAogICAgR01fZ2V0VmFsdWUsCiAgICBHTV9vcGVuSW5UYWIsCiAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kLAogICAgR01fc2V0VmFsdWUsCiAgICBHTV94bWxodHRwUmVxdWVzdCwKICAgIHVuc2FmZVdpbmRvdywKICAgIHdpbmRvdywKICApID0+IHsKICAgIHJldHVybiBldmFsKHNjcmlwdCk7CiAgfSkoKTsKfQogfSkKIF0pOw==","resources":[{"meta":{"name":"align_center.css","url":"https://raw.githubusercontent.com/adsbypasser/adsbypasser/v7.7.0/resources/css/align_center.css","ts":1567889243769,"mimetype":"text/css"},"source":"aHRtbCB7CiAgaGVpZ2h0OiAxMDAlOwp9Cgpib2R5IHsKICBoZWlnaHQ6IDEwMCU7CiAgbWFyZ2luOiAwOwp9CgojYWRzYnlwYXNzZXItd3JhcHBlciB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCiNhZHNieXBhc3Nlci1pbWFnZSB7CiAgbWFyZ2luOiBhdXRvOwogIHRvcDogMDsKICBib3R0b206IDA7CiAgbGVmdDogMDsKICByaWdodDogMDsKfQo="},{"meta":{"name":"scale_image.css","url":"https://raw.githubusercontent.com/adsbypasser/adsbypasser/v7.7.0/resources/css/scale_image.css","ts":1567889243774,"mimetype":"text/css"},"source":"I2Fkc2J5cGFzc2VyLWltYWdlLmFkc2J5cGFzc2VyLXJlc2l6YWJsZSB7CiAgY3Vyc29yOiAtd2Via2l0LXpvb20tb3V0OwogIGN1cnNvcjogLW1vei16b29tLW91dDsKICBjdXJzb3I6IHpvb20tb3V0Owp9CgojYWRzYnlwYXNzZXItaW1hZ2UuYWRzYnlwYXNzZXItcmVzaXphYmxlLmFkc2J5cGFzc2VyLXNocmlua2VkIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgbWF4LWhlaWdodDogMTAwJTsKICBjdXJzb3I6IC13ZWJraXQtem9vbS1pbjsKICBjdXJzb3I6IC1tb3otem9vbS1pbjsKICBjdXJzb3I6IHpvb20taW47Cn0K"},{"meta":{"name":"imagedoc-darknoise.png","url":"https://raw.githubusercontent.com/adsbypasser/adsbypasser/v7.7.0/resources/img/imagedoc-darknoise.png","ts":1567889243788,"mimetype":"image/png"},"source":"wolQTkcNChoKAAAADUlIRFIAAABYAAAAWAQDAAAAwoPCuy0HAAAAG1BMVEXDvsO+w74BAQHDv8O/w78KCgoDAwN/f3/DtcO1w7XCgMKAwoDDvMO8w7zDoQ8Ew7YAAAAJdFJOUwUFBQUFBQUFBcKHDsOTw70AAAvDgklEQVR4Xg3DijljwrJaEADDkBnDtnIue3lxL0HCjUkJwpp8wrEEw6NWwoJLTAkaE0swbj/Du8K9w64UB37DhS1uKsOzwqLDsMOCWHzDqMKfw4BICSlZwqjDvirCtsObw59Rw7MfQsKjc2tIwpfCtMKADcKlwpvCpcKQTxPCl13Cs8Kow4k3I13CjAzCilrCp2vCoMKIwrFZFAhjwqE/wpDDpjvChMKHIi/Dtl/CrAPCt1zDv8O0w6gLwpQnecKSd8O8w73DpMOgfcK8wobCpcOQM8OlacKVwoc/wrREw6gyF8KOYsKqKkvChsKvw6xNZylOwp49RkpVCsK+fFkME8KIw403w4x7R8OJwoDCnsOcw7xiCDnDlS4rFjIEVQ7DjsO2OgAuQF8fEcO6wo5Ow6EtI8OTCsKBND3DhMKswoYmw71xw4VtCMOtH1MXD8KXVG7CnX04V2PCkDlywrPDocOSw4LCsGAdG8OLw7cFTcO+wpjCvFYjwojDgcOLw78PUcKRW8KlLg7DskstADnClCI1w64lHcKwwqYpOsOmHzAEw4bCnsKZw79mw43DlsOqCi/Dp1HCvsO9Wz0DL8O/w4HDrmTCh8OLwrDCvEPDrsKbwqo5HkDDjA3CvcOZWsOpw7DCtsKvwpTDjENUw7DDmmENw5bDrzbDksKMw55Jw7HDpgjCulDDhMKQwpfDp8KGwrPDrcK7wprCtsKDwrcXwpZ0f8KTw6tlLMO8bMKlEsOaw7sKw58jwpXCt8KXKsOwH8OmwonDscOwPcKuVsOdScO8ZsOlV8Olw5DDiMKlCMKcw6UGw6PCh8Oqwo3DizMrbsK6w4h1woABwoHCvXpIb8OLwol4McKmwrjDojYVw4ldwpEUS8KSw6fCh8K2HcOLMMK2Y13CqR/DvlfCg8O0O8OXwrheelbCgxVSQkNXwqXCgwLDhMKeFXpdJcKaLnrCjnYIIMKQEDJ3RcO7NMOEwosrwqPDt2rDt8KKMlPDlMOtGsKUw7QnLWJvJMK0e18ew5fCg8OXw6bDtQPCqhbDryjDm8OZwrdBCsKFw4HCk3huSMK/RsKKazbDkwoqw5EET8OYwozCsMKcworCpkjCoMK4CivCn2zCs8KSw70wG3M1EEVDJMO+VTfCucKuLjYCwoJcw50ZDsObwqHCgcKgRmorw44UQ8Krw43DoMKCWDLClC/CoQTCsTLDi8KmUFjDnALCmmrCrcOow7vDhMOECsKGEA9Vw5lyE8Ojw7fDksO4wo3CnMOHWcO5wrXDnznCkMOgwqMdw7PDlk4Ow7YUwp/DvsK8wqPCssKCC37CrytFbEDDiVjCv8KmPwpgw4PCocOtFMKyB8Kawq4ow5ptZ2fDmxorCMKKEMOkw5Vmw5XCpcKewqHDjgzDu8K9w6PDlV8oP8Kzw47Cl8Oywp3Dn8OZZU5IWcKdHcKCesKRHC4uOBpBwrE/DcOtwobDhScwA8KJbcKewqPDtMO9w6/Dk8KKFxY8w45Pw74dH8ONNEkzwoEgbMKYDcO5ScKswrPDlm/Drm8YJmEDwqZ9w7zCkcKHw5gdw4fCjcKmUVXDucOXaipaR8OxAzzCrkgsccOVw4zCsMOHeMOIXsOlw4kQRsOswrMpwqjDkxMyw60rJCVvQsOkwoPDmMKuwoPDsELDqcOtw63DvkUQw7PDlyTCtcKRbGHDnC/ChDfCsx3DkywDelvCrsO2wq/DsjkIwqkLw6s0wrDDgk0AI8OPwqIEJMKvw5XCjsOQQMO+UUrCgsOEw5tuw67Di8OLw6fDm2Y6dhLDgcKASxHCh18cTGjDiMK/fMK+w6tCwqbCt3YAZQXDvMKpw73DmyQ1HMO/wppdwo7DmMK+KwAZw7Rsw7NDN3bDncOdSQQJw5LCvWkWB8OGH8KwwoHCpcKywpHDosK0w5jCjD3Cg8OFfR/CjnnDhG4/LGB+woPDvcO8eRHDncOEdsOswoohwonCoMOXCk/Dt1TDk8O6wpTCjE/DtTBnwrDDh8KAAUZlwqLCrsKPw7DCpREsGw0Ww6jCgMOcwrsNw73Dn2rCpCfCiijCgGBLOw3Dpk/Cq3Ydw67Ch0VbwrzDi8KOIsKJwokPV8OBOiDCqiLDi8OkwpUuWzkITGnCqEkLw6Rcw7vCqXPDuUvDscKawq05Py/Ci8KgYhDClMKywq/ClcOGwofCsFHCvVIuwrofw7rCnR8+wrvCsMO0RsKGwo/Cq8K4L3ZCA3kkQyYuw4ZREEjCicK7wr8FJcK8wrNPw4FsdMKvdF7CgRx7OcO2R8KYwotTNmFzMmZ/XMKNY3gJNMKVEMK9wrpTw450w4BudXknw4jCi8Oiwq3CjlrDqEkSd1ZVPMKEwq/DgzlUZMOWwrbDs8KmUsKNQ8Kyc8KswqlxOWcywoTDsMKuP8Oxw4l8w7nDjVcCwrp1RULCs8O6IsKPw7fCqMO2FcOFJgPDq8O0HnErw5IlHUrCtErDpcObwoDCj1FQamvDqcKJwqXDkcOYwpddD8KoPMKfwoTCshcfw5/CjT4LwpAvwqDChMKXJMKPV8K1w4DDv8KDwqx6w6kiIxo8fkXDlsK3GkbDvBlZw7Enw6nDvH7DvC7Dj3VwARjCs0rCjsK9VEnCnlfDiHjDrGnDtcOMEsKFw63CgsOgH8KPKQzCisKDDBzChMKXVAc9w4kGOcKjwpQgw7DDgzTCnhXCggNhw6jCiEgBc1EHw7sGwqsuPEfDnMK5w7rDsMOPw5zCiFrCiMOVwrHCtMKYE8KxwojDmsOeOsOkwqERw7/DvcKkwozDocKbUGHDmcOGw5hXGcO2IcKEO3pYw5jCpcKmw7/DpEdPF2PDksKZw4zCvsOraMO6e2HDgTzDlsOew7vDglUyw6RQBsK1wp0vw5vCgcKHwobDmG0GwpAnTsOFw4nDtykKw6vDksK7FTJiM8O6asO7w7DDtgTDnAI9Lk1aIUsDwocMNsKHTsOPJ8OJwqchMBcWwqFQw5bCp3/DpVoKwp4IwrMneAUhSsOoQ8OZEmnCucOyw45KLsOewpsTwpXChcKLDhrCicKVw5jCkMKEKjXCrsOuS8Kqw4LDp8KyFEnCg8KBWFHDkl4oHn8Ww7PCtRnCuxbDvMKJw554SxHDlsKJKcOPKnMyAhzDncKGLcKwN8OwKB9zwpjDgMK2wqPCuybDgcOyH8OQeMKSYl9YCMK3w6dfwoo/wqDCr0DCiUV0NmNOEMOqwq8xHzfDlsKbw5FIwoHDiGJbT8KXw7PCq0jCosOSBsONEcK1woBDWirCiRDCkMK5w74VdnbDh3LClHLCnsOdw7zDlSzCmMOpwoUIb8Oiw5N2AcOywpjCtHojUsOgwrUIfA06AMKrw59CY8O/VAXDksOUA8O2wpMyfsO0wrAaTcKnw68XI8K7bz8Uw7TDoMKpwpXDncKqw5XDocOGwrbDj8KZFsK7dMOgCcKIwpbDpsOOPMO+w5drJ8Oiw77CvS3CiX3CmmjDtMO9Dz4+TVPDgcKheyMcPMOWfsK5wprDgMOrGX5gU8O+TcK+c8KrM8O+G8ODw6cIw6vCjT7Dl8KBGWcTM8OuZcOqw6bCi1jDqn1Kw4TDnsKuw5V0V8OJwrvCmhPDtAd+VUh1fMKMCBYQcsOxOcKMwroSHl9lw6nCmsKIJsK9LULDncKbwrDCiyR8w63ClMKrwo9Cb8OUOkQBwokbcMK9w5HCpjZXwpnCmk9XwonClx/DjMO8Nh8CS8Okfj7ClxPCnkhywq/ClQlpKMKzw5MIw4rDm2EwwpfDrMOSw7rClMOuwoNDw5DDkCTCpyUOS33DlHvDrsO1WcK5w7gjwpEPw7J1w74Vw6c6RGjDmsK+JcKZwqtAwq7ClnXCkFpyYwcvw5RmLnPDlMKzT8OMYwYFw47CjMKrXcKEDExxwoBQwpPCn8K6ZHnCr8K/TGTDrcK8DMKBF0FUw7nDgGw9w7U2NU9Bwo4IL8OBw41rw7xEQAPDgMKAwp3DkMK4w5Q0wqnDhMOow6RVa0lOwp7CqGg7S8O3w55cFnMBdMOKdMOgTsKRccOLw60OKcOaYTQ1wonClH8ubMKqBsOpYlfCtMKsQMOBwrsiwpbCkEkHw6HCgcOCKcKvTsOAwqvCv1R7LSXDvRMZAMODwo4ZEcOMVMOcwr50OHnDigMiwpk1w61fwoofwqFWwqItRGDCg3/CuyHCusO5wp7DulTDlsK1w6XDucKhwovCnMOnw4NrCcKqwqNgworDiFdDw4XDiQfCocOZwpzDmRLCo1LDq0LDrsKGc8O5w4MHwozCkkbClMO3ekMDw7RWPMOXwobCpMOwwoHCgiUeDsO1dC9TX3UTw78efmLDrsK1CsOuR8OtwpTChcKeIUIYbsOcw7MWX2fClMKHwpo1w7oXw7sfw6rDiWzDiAASw5NkNsOewqvDuENmwpxgw5oJIcO4woDCn0lPDlLCknzDiWY1w67DpDkQZsK+GGXChcKaesOBd8Obw5fDnMKjwq15wokJaMOKT8OAwp4Two8ww6NuGQ4wwqnCligpc1TCncKgw7NWBhZfw5zDkxPDiCp3ICRnVCrDtmhRQm7DkgYaIAh6E0xNeQ15wqrCklfDjMOSE8KBw74Ww7sPw6hRwqLCjjPCngQxSMK1wo/CnMKvOCsEe8OCWMKnBUbCj8Kdw6U2I8OMY8OUZcK2B3jCicOKfMOZw7vDjcOrw5zDpEgVCMOjScOJSRTDnh8+w6HDlMKFw7jDmCrDtMKSVcKjw4YzwrTDpMOEwpfDlMKGwpN4OcKTRGEeKsOwL8K1wqbCgWjCtCfCjcO7Ric/wrhyMXLDi8Kvw6IKMsOGF2/DoFvDqMOQwoRFMWxAT8OJDMOXwovDoFvDokc9w4DCriMjA0tZwrwQAMOrWCkSw5rCisKQw4fDuX4TPMOzwobDsDDCjWPCggLDtyBkw5bCpyJuOFTCgRnDg3HDvcO5wqZfXcOmwotbwr0Iw44heUTCu8KXVcK2bktFwqLCuSlnA8O8w7XDui3CocKdw5vCkMKuNHHCv8K+B8KIB1kcwqQpwp7DuMKfInZXI3wQCwDClMKgwoM5w6wYccKOAMKYHRnDm8KMwp3CmD5sBsKeGATChlfDlsOhw719wrA+w4VTwpgSw7HCmTTDkMKwEcKFwpBDwqRkwpTDrBgJwr4ewrtMDcK1wrDCvTXDjsK6w5XDtcK7wrBxIsKvV8KJwr7Cg8KQUxtSK012wrYsUMK5GsKGw4AhBEh9FjdzL8OQTQEcU0rCvsOTw57DrWsTw6IWUmDCiMKnBMOZHcKQwq7Dpl9THCvCgnDDqFnCqcO3wqTCuQxjQ8KxKMOIZQkDAMKvw77CrUk6w6JeCcOPw7fClknDm8OvwqzDgMKqw6PCvwwEISvDvsK2cMO/F8Oaw43DviASw4jChsOyw7xEeinCoHpIAsKycsKxwoTDk8KYw4MewrnCs8OXwofDhcK7w6tALzFRw7rDrjrCoMKDTsK+w753wrkxwp7Ct8OXPsKyRMOoZcKiHcOdPQjCq2bCgSnCr8ONMMKCw5/DnBHCuFsBBMOmRMK7RsKHw4lxCwDDgQXCvk54wp4aEsKtwrlcE0xPasOzWcOnVsObMjPCj8OgwoIMwqlnwpciQcONPzXCqBXCqcOrw5h7wr5Ww7dOYRXDuDNmw5rCusKjw5Ykw7sFC8KwVVsuPkwqw5XDrk/DssOYDcKNVsOIwpTDjMOwXcOjNcOWRmrCjx3DiihTwonDjcONw4IDIVXChi8fw4VWeRbDuF0Aw45mM8KpEsOow6gKwrtewowWCWrDn8O2w79BUjB3DsOHUCzCnltOCT4wwrl0w6/ChgvDk8KfwqnDsHhVf8Kww4LDqMKfwrfDq2HCs2TCrMOeLsKnwpDDoT4kXMKDw7sCwoUvw6XCjF/CqcOww4A7w5rDkS1/O8ODJcKeJ1rDq8OTw6HDt8Knw64Ww7DCqETDi8OXwpwnw6wsw7PDpgvDuEDDpRnDjDROHwzCrSlUw6Q4BHLDmhLCvMOvw78Aw73DtABmwozDlmTDkAAAAABJRU5Ewq5CYMKC"}]},{"name":"Anti-Adblock Killer | Reek","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":true,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://*/*","https://*/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":["raw.githubusercontent.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":["*"]}},"storage":{"ts":1567932790434,"data":{"nextchecklist":"s1568019190434","nextcheckupdate":"s1568182999175"}},"enabled":true,"position":3,"file_url":"https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer.user.js","uuid":"528d8528-f0db-46dc-8441-b8bfc11a9592","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgQW50aS1BZGJsb2NrIEtpbGxlciB8IFJlZWsKLy8gQG5hbWVzcGFjZSBodHRwczovL3VzZXJzY3JpcHRzLm9yZy9zY3JpcHRzL3Nob3cvMTU1ODQwCi8vIEBkZXNjcmlwdGlvbiBIZWxwcyB5b3Uga2VlcCB5b3VyIEFkLUJsb2NrZXIgYWN0aXZlLCB3aGVuIHlvdSB2aXNpdCBhIHdlYnNpdGUgYW5kIGl0IGFza3MgeW91IHRvIGRpc2FibGUuCi8vIEBhdXRob3IgUmVlayB8IHJlZWtzaXRlLmNvbQovLyBAdmVyc2lvbiAxMC4wCi8vIEBlbmNvZGluZyB1dGYtOAovLyBAbGljZW5zZSBodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvNC4wLwovLyBAaWNvbiBodHRwczovL3Jhdy5naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9tYXN0ZXIvYW50aS1hZGJsb2NrLWtpbGxlci1pY29uLnBuZwovLyBAaG9tZXBhZ2UgaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci8KLy8gQHR3aXR0ZXJVUkwgaHR0cHM6Ly90d2l0dGVyLmNvbS9hbnRpYWRia2lsbGVyCi8vIEBjb250YWN0VVJMIGh0dHBzOi8vcmVlay5naXRodWIuaW8vYW50aS1hZGJsb2NrLWtpbGxlci8jY29udGFjdAovLyBAc3VwcG9ydFVSTCBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3VlcwovLyBAY29udHJpYnV0aW9uVVJMIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIjZG9uYXRlCi8vIEB1cGRhdGVVUkwgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9tYXN0ZXIvYW50aS1hZGJsb2NrLWtpbGxlci51c2VyLmpzCi8vIEBkb3dubG9hZFVSTCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL21hc3Rlci9hbnRpLWFkYmxvY2sta2lsbGVyLnVzZXIuanMKLy8gQGluY2x1ZGUgaHR0cDovLyovKgovLyBAaW5jbHVkZSBodHRwczovLyovKgovLyBAZ3JhbnQgdW5zYWZlV2luZG93Ci8vIEBncmFudCBHTV9hZGRTdHlsZQovLyBAZ3JhbnQgR01fZ2V0VmFsdWUKLy8gQGdyYW50IEdNX3NldFZhbHVlCi8vIEBncmFudCBHTV94bWxodHRwUmVxdWVzdAovLyBAZ3JhbnQgR01fcmVnaXN0ZXJNZW51Q29tbWFuZAovLyBAZ3JhbnQgR01fZGVsZXRlVmFsdWUKLy8gQGdyYW50IEdNX2xpc3RWYWx1ZXMKLy8gQGdyYW50IEdNX2dldFJlc291cmNlVGV4dAovLyBAZ3JhbnQgR01fZ2V0UmVzb3VyY2VVUkwKLy8gQGdyYW50IEdNX2xvZwovLyBAZ3JhbnQgR01fb3BlbkluVGFiCi8vIEBncmFudCBHTV9zZXRDbGlwYm9hcmQKLy8gQGdyYW50IEdNX2luZm8KLy8gQGdyYW50IEdNX2dldE1ldGFkYXRhCi8vIEBydW4tYXQgZG9jdW1lbnQtc3RhcnQKLy8gQGNvbm5lY3QgKgovLyA9PS9Vc2VyU2NyaXB0PT0KLypqc2hpbnQgZXZpbDp0cnVlIG5ld2NhcDpmYWxzZSovCi8qZ2xvYmFsIHVuc2FmZVdpbmRvdywgR01fYWRkU3R5bGUsIEdNX2dldFZhbHVlLCBHTV9zZXRWYWx1ZSwgR01feG1saHR0cFJlcXVlc3QsIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQsIEdNX2RlbGV0ZVZhbHVlLCBHTV9saXN0VmFsdWVzLCBHTV9nZXRSZXNvdXJjZVRleHQsIEdNX2dldFJlc291cmNlVVJMLCBHTV9sb2csIEdNX29wZW5JblRhYiwgR01fc2V0Q2xpcGJvYXJkLCBHTV9pbmZvLCBHTV9nZXRNZXRhZGF0YSwgJCwgZG9jdW1lbnQsIGNvbnNvbGUsIGxvY2F0aW9uLCBzZXRJbnRlcnZhbCwgc2V0VGltZW91dCwgY2xlYXJJbnRlcnZhbCovCi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICBUaGFua3MKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogIERvbm9yczogTS4gSG93YXJkLCBTaHVuam91LCBDaGFybWluZSwgS2llcmVrOTMsIEcuIEJhcm5hcmQsIEguIFlvdW5nLCBTZWluaG9yOSwgSW1HbG9kYXIsIEl2YW5vc2V2aXRjaCwgSG9tZURpcG8sIFIuIE1hcnRpbiwgRHJGaVosIFRpcHB5LCBCLiBSb2huZXIsIFAuIEtvemljYSwgTS4gUGF0ZWwsIFc0cmVsbCwgVHNjaGVja29mZiwgQWRCbG9jayBQb2xza2EsIEFWRU5JUiBJTlRFUk5FVCwgY29vbE5BTywgQmVuLCBKLiBQYXJrLCBDLiBZb3VuZywgSi4gQm91LCBNLiBDYW5vLCBKLiBKdW5nLCBBLiBTb25pbm8sIEouIExpdHRlbiwgTS4gU2NocnVtcGYsIEcuIFBlcGUsIEEuIFRydWZhbm92LCBSLiBQYWxtZXIsIEouIFJhdXRpYWluZW4sIFMuIEJseXN0b25lLCBNLiBTaWx2ZWlyYSwgSy4gTWFjQXJ0aHVyLCBNLiBJdmFub3YsIEEuIFNjaG1pZHQsIEEuIFdhYWdlLCBGLiBUaXNtZXIsIFMuIEVobmVydCwgSi4gQ29ycHVzLCBKLiBEbHVob3MsIE1ha2xlbWVueiwgU3Ryb2JlbGl4LCBNb2RlbGxwaWxvdC5FVSwgRS4gQmVuZWRldHRpLCBWLiBWZW5kaXR0aSwgU2hha29zLCBBLiBFbGlhc29uLCBBLiBTYWxvcmFudGEsIFMuIEdlaWdlciwgQS4gT3R0ZXJsb28sIE0uIENvcHBlbiwgUy4gRmlzY2hlciwgSC4gQmVja2VyLCBELiBBY2tlcm1hbiwgUy4gUGl0c2NoLCBLLiBQZXJ0Y2hlY2ssIFMuIEFiZWwsIEsuIE8nQ29ubm9yLCBCLiBPYnJpZW4sIFMuIFZvZ2xlciwgUy4gR29lYmwsIEEuIEJpYXIsIFMuIFNjb3R0LCBCYXNzbW9iaWxlLm9yZywgUy4gR3Jvw59lLCBNLiBQZW90LCBSLiBDaGFuIEJhbGFtLCBMLiBCb25kLUtlbm5lZHksIFIuIEVtb25kLCBBLiBQYXZsb3YsIFcuIFRyYWNleSwgQS4gU2VyZ2V5LCBSLiBMw7NwZXogTMOzcGV6LCBSLiBSZWRkeSBLYXNpcmVkZHksIEEuIE1vdWplZXIsIE0uIEJldHosIE0uIExlZsOodnJlLCBSLiBNY0N1cmR5LCBMUiBHZWVrcywgTS4gQmVhdXJlZ2FyZCwgQ2FzcGVyVGVjaCBMdGQsIE0uIER1ZGFzLCBTLiBTY2hhcmYsIFMuIFByb2tob3JvdiwgSy4gUGFwYWxpYXMsIEouIFdvam5vd3NraSwgQi4gQ3VydGlzLCBELiBMYXdyZW5jZSwgRC4gSGUsIE4uIEtlbHNhbGwsIElkb2dld2FsbGV0LCBKLiBTcGF1bGRpbmcsIFMuIExhZm9uLCBNYXQsIEguIFJvYmVydHMsIEMuIEhlZGx1bmQsIEouIEhhd2tpbnMsIEouIEFuZGVyc2VuLCBNLiBCam9ya3N0ZW4sIEIuIFdvbGZlIElJSSwgVC4gWW9jb20sIMWgLiBJbnRhcywgUy4gTW9lbmljaCwgSi4gQ2hhbmcsIEMuIE11bmssIEEuIE5hcnV0YSwg0JEuINCc0LjRhdCw0LjQuywgSi4gQmVueiwgRi4gU2xvb3QsIEouIENyZWVkLCBNLiBHaWxsYW0sIEMuIExlaWNodCwgQS4gR25hbmEsIFMuIFN1bmRhcmFtLCBBLiBLb2xsZXIsIE0uIEtvdGxhciwgUy4gQWJlbCwgVC4gRmxhbmFnYW4sIE0uIEFyZHVpbmksIFAuIFN0YWNraG91c2UsIEIuIE9saXZlciwgTS4gSm9obnNvbiwgUi4gTWFubmVydCwgRS4gU2lvcmRpYQoKICBDb2xsYWJvcmF0b3JzOiBJbmZpbml0eUNvZGluZywgQ291Y2h5LCBEaW5kb2csIEZsb3hmbG9iLCBVIEJsZXNzLCBXYXRpbGluLCBAcHJkb25haHVlLCBIb3NoaWUsIDNsZjNuTGkzZCwgQWxleG8sIENyaXRzLCBOb25hbWUxMjAsIENydDMyLCBKaXh1bk1vZSwgQXRob3JjaXMsIEtpbGxlcmJhZGdlciwgU01lZDc5LCBBbGV4YW5kZXIyNTUsIEFub25zdWJtaXR0ZXIsIFJhcG9yTG9McHJvLCBNYXluYWswMCwgUm9ib3RleCwgVmluY3R1eCwgQmxhaHgsIE1hamtpSVQsIEY0eiwgQW5nZWxzbCwgTWlraGFlbGssIE1hcmVrLCBIYW1zdGVyYmFja2UsIEdvcmhpbGwsIEhhY2tlcjk5OSwgeHhjcml0aWN4eCwgU2tyNHRjaEdyM2F6eU1vbmtpQmFsbGxsbGxaenp6LCBHaXdheXVtZSwgTXJTaGVybG9ja0hvbG1lcywgeERhcmtBUkcsIE5vYWhwNzgsIE1hcHgtCgogIFVzZXJzOiBUaGFuayB5b3UgdG8gYWxsIHRob3NlIHdobyB1c2UgQW50aSBBZGJsb2NrIEtpbGxlciwgd2hvIHJlcG9ydCBwcm9ibGVtcywgd2hvIHdyaXRlIHRoZSByZXZpZXcsIHdoaWNoIGFkZCB0byB0aGVpciBmYXZvcml0ZXMsIG1ha2luZyBkb25hdGlvbnMsIHdoaWNoIHN1cHBvcnQgdGhlIHByb2plY3QgYW5kIGhlbHAgaW4gaXRzIGRldmVsb3BtZW50IG9yIHByb21vdGUuCgo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgTWlycm9ycwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogIEdpdGh1YjogaHR0cDovL3Rpbnl1cmwuY29tL21jcmEzZG4KICBHcmVhc3lmb3JrOiBodHRwOi8vdGlueXVybC5jb20vcGJiZG5oNgogIE9wZW51c2VyanM6IGh0dHA6Ly90aW55dXJsLmNvbS9ubnFqZTMyCiAgTW9ua2V5R3V0czogaHR0cDovL3Rpbnl1cmwuY29tL2thNWZjcW0KICBVc2Vyc2NyaXB0czogaHR0cDovL3Rpbnl1cmwuY29tL3E4eGNlamwKCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICBEb2N1bWVudGF0aW9uCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgR3JlYXNlbW9ua2V5OiBodHRwOi8vdGlueXVybC5jb20veWVlZm5qNQogIFNjcmlwdGlzaDogaHR0cDovL3Rpbnl1cmwuY29tL2NuZDlua2QKICBUYW1wZXJtb25rZXk6IGh0dHA6Ly90aW55dXJsLmNvbS9wZHl0ZmRlCiAgVmlvbGVudG1vbmtleTogaHR0cDovL3Rpbnl1cmwuY29tL24zNHduNmoKICBOaW5qYUtpdDogaHR0cDovL3Rpbnl1cmwuY29tL3Bra205dWcKCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICBTY3JpcHQKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCihmdW5jdGlvbiAod2luZG93KSB7CiAgInVzZSBzdHJpY3QiOwogIAogIHZhciBBYWsgPSB7CiAgICBuYW1lIDogJ0FudGktQWRibG9jayBLaWxsZXInLAogICAgdmVyc2lvbiA6ICcxMC4wJywKICAgIHNjcmlwdGlkIDogJ2dKV0VwMHZCJywKICAgIGhvbWVVUkwgOiAnaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci8nLAogICAgY2hhbmdlbG9nVVJMIDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIjY2hhbmdlbG9nJywKICAgIGRvbmF0ZVVSTCA6ICdodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyI2RvbmF0ZScsCiAgICBmZWF0dXJlc1VSTCA6ICdodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyI2ZlYXR1cmVzJywKICAgIHJlcG9ydFVSTCA6ICdodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL3dpa2kvUmVwb3J0LUd1aWRlJywKICAgIGNvbnRhY3RVUkwgOiAnaHR0cHM6Ly9yZWVrLmdpdGh1Yi5pby9hbnRpLWFkYmxvY2sta2lsbGVyLyNjb250YWN0JywKICAgIHNldHRpbmdzVVJMIDogJ2h0dHBzOi8vcmVlay5naXRodWIuaW8vYW50aS1hZGJsb2NrLWtpbGxlci8jc2V0dGluZ3MnLAogICAgdHdpdHRlclVSTCA6ICdodHRwczovL3R3aXR0ZXIuY29tL2FudGlhZGJraWxsZXInLAogICAgZG93bmxvYWRVUkwgOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9tYXN0ZXIvYW50aS1hZGJsb2NrLWtpbGxlci51c2VyLmpzJywKICAgIHN1YnNjcmliZVVSTCA6ICdodHRwczovL3JlZWsuZ2l0aHViLmlvL2FudGktYWRibG9jay1raWxsZXIvI2ZpbHRlcmxpc3QnLAogICAgbGlzdFVSTCA6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL21hc3Rlci9hbnRpLWFkYmxvY2sta2lsbGVyLWZpbHRlcnMudHh0IiwKICAgIG5hdGl2ZVVSTCA6ICdodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL3dpa2kvTmF0aXZlLU1vZGUnLAogICAgaWNvblVSTCA6ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL21hc3Rlci9hbnRpLWFkYmxvY2sta2lsbGVyLWljb24ucG5nJywKICAgIGltZ0JhaXQgOiAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FRQUFBRFpjN0ovQUFBQUdrbEVRVlI0Mm1OZzBHQVlCYU5nRkl5Q1VUQUtSc0VvUUFZQVROOEFLWU5aL3g0QUFBQUFTVVZPUks1Q1lJST0nLAogICAgaW5pdGlhbGl6ZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgQWFrLnJlZ2lzdGVyU2V0dGluZ3MoKTsgLy8gcmVnaXN0ZXJpbmcgeW91ciBzZXR0aW5ncy4KICAgICAgQWFrLnJlZ2lzdGVyQ29uc29sZSgpOyAvLyByZWdpc3RlcmluZyBjdXN0b216ZWQgY29uc29sZS4KICAgICAgQWFrLnJlZ2lzdGVyQ29tbWFuZHMoKTsgLy8gYWRkIGNvbW1hbmRzIHRvIG1lbnUKICAgICAgQWFrLmNoZWNrVXBkYXRlKHRydWUpOyAvLyBjaGVjayBpZiBBYWtTY3JpcHQgaXMgdXAgdG8gZGF0ZS4KICAgICAgQWFrLmNoZWNrTGlzdCgpOyAvLyBjaGVjayBpZiBBYWtMaXN0IGlzIGVuYWJsZWQuCiAgICAgIEFhay5ibG9ja0RldGVjdCgpOyAvLyBkZXRlY3QgYW5kIGtpbGwgYW50aS1hZGJsb2Nrcy4KICAgIH0sCiAgICBhYWJzIDoge30sCiAgICBvcHRzIDoge30sCiAgICBvcHRpb25zIDogewogICAgICBhdXRvUGxheSA6IHsKICAgICAgICBncm91cCA6ICdnZW5lcmFsJywKICAgICAgICB0eXBlIDogJ2NoZWNrYm94JywKICAgICAgICB2YWx1ZSA6IGZhbHNlLAogICAgICAgIGxhYmVsIDogJ1BsYXkgdmlkZW8gYXV0b21hdGljYWxseS4gKicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0sCiAgICAgIHZpZGVvSEQgOiB7CiAgICAgICAgZ3JvdXAgOiAnZ2VuZXJhbCcsCiAgICAgICAgdHlwZSA6ICdjaGVja2JveCcsCiAgICAgICAgdmFsdWUgOiBmYWxzZSwKICAgICAgICBsYWJlbCA6ICdQbGF5IHZpZGVvIGluIEhEIHF1YWxpdHkuICoqJywKICAgICAgICBpbmZvIDogJycKICAgICAgfSwKICAgICAgZm9yY2VWTEMgOiB7CiAgICAgICAgZ3JvdXAgOiAnZ2VuZXJhbCcsCiAgICAgICAgdHlwZSA6ICdjaGVja2JveCcsCiAgICAgICAgdmFsdWUgOiBmYWxzZSwKICAgICAgICBsYWJlbCA6ICdQbGF5IHZpZGVvIHdpdGggVkxDIHBsdWdpbi4gKicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0sCiAgICAgIGNoZWNrTGlzdCA6IHsKICAgICAgICBncm91cCA6ICdnZW5lcmFsJywKICAgICAgICB0eXBlIDogJ2NoZWNrYm94JywKICAgICAgICB2YWx1ZSA6IHRydWUsCiAgICAgICAgbGFiZWwgOiAnQ2hlY2sgQWFrTGlzdCBzdWJzY3JpcHRpb24uJywKICAgICAgICBpbmZvIDogJycKICAgICAgfSwKICAgICAgY2hlY2tVcGRhdGUgOiB7CiAgICAgICAgZ3JvdXAgOiAnZ2VuZXJhbCcsCiAgICAgICAgdHlwZSA6ICdjaGVja2JveCcsCiAgICAgICAgdmFsdWUgOiB0cnVlLAogICAgICAgIGxhYmVsIDogJ0NoZWNrIG5ld2VyIEFha1NjcmlwdCB2ZXJzaW9uLicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0sCiAgICAgIGRlYnVnIDogewogICAgICAgIGdyb3VwIDogJ2RlYnVnJywKICAgICAgICB0eXBlIDogJ2NoZWNrYm94JywKICAgICAgICB2YWx1ZSA6IGZhbHNlLAogICAgICAgIGxhYmVsIDogJ0VuYWJsZSBMb2dzLicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0sCiAgICAgIGxvZ0luc2VydGVkTm9kZXMgOiB7CiAgICAgICAgZ3JvdXAgOiAnZGVidWcnLAogICAgICAgIHR5cGUgOiAnY2hlY2tib3gnLAogICAgICAgIHZhbHVlIDogZmFsc2UsCiAgICAgICAgbGFiZWwgOiAnTG9nIGluc2VydGVkIG5vZGVzLicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0sCiAgICAgIGxvZ1JlbW92ZWROb2RlcyA6IHsKICAgICAgICBncm91cCA6ICdkZWJ1ZycsCiAgICAgICAgdHlwZSA6ICdjaGVja2JveCcsCiAgICAgICAgdmFsdWUgOiBmYWxzZSwKICAgICAgICBsYWJlbCA6ICdMb2cgcmVtb3ZlZCBub2Rlcy4nLAogICAgICAgIGluZm8gOiAnJwogICAgICB9LAogICAgICBsb2dFeGNsdWRlZCA6IHsKICAgICAgICBncm91cCA6ICdkZWJ1ZycsCiAgICAgICAgdHlwZSA6ICdjaGVja2JveCcsCiAgICAgICAgdmFsdWUgOiBmYWxzZSwKICAgICAgICBsYWJlbCA6ICdMb2cgZXhjbHVkZXMgZG9tYWlucy4nLAogICAgICAgIGluZm8gOiAnJwogICAgICB9LAogICAgICBsb2dYaHIgOiB7CiAgICAgICAgZ3JvdXAgOiAnZGVidWcnLAogICAgICAgIHR5cGUgOiAnY2hlY2tib3gnLAogICAgICAgIHZhbHVlIDogZmFsc2UsCiAgICAgICAgbGFiZWwgOiAnTG9nIEhUVFAgcmVxdWVzdHMnLAogICAgICAgIGluZm8gOiAnJwogICAgICB9LAogICAgICBsb2dQbGF5ZXIgOiB7CiAgICAgICAgZ3JvdXAgOiAnZGVidWcnLAogICAgICAgIHR5cGUgOiAnY2hlY2tib3gnLAogICAgICAgIHZhbHVlIDogZmFsc2UsCiAgICAgICAgbGFiZWwgOiAnTG9nIHBsYXllciBpbnN0YW5jZXMuJywKICAgICAgICBpbmZvIDogJycKICAgICAgfSwKICAgICAgbG9nSW50ZXJjZXB0ZWRTY3JpcHRzIDogewogICAgICAgIGdyb3VwIDogJ2RlYnVnJywKICAgICAgICB0eXBlIDogJ2NoZWNrYm94JywKICAgICAgICB2YWx1ZSA6IGZhbHNlLAogICAgICAgIGxhYmVsIDogJ0xvZyBpbnRlcmNlcHRlZCBzY3JpcHRzLicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0sCiAgICAgIGxvZ0RldGVjdGVkIDogewogICAgICAgIGdyb3VwIDogJ2RlYnVnJywKICAgICAgICB0eXBlIDogJ2NoZWNrYm94JywKICAgICAgICB2YWx1ZSA6IGZhbHNlLAogICAgICAgIGxhYmVsIDogJ0xvZyBkZXRlY3RlZCBhbnRpLWFkYmxvY2tzLicsCiAgICAgICAgaW5mbyA6ICcnCiAgICAgIH0KICAgIH0sCiAgICByZWdpc3RlclNldHRpbmdzIDogZnVuY3Rpb24gKCkgewogICAgICBmb3IgKHZhciBvcHROYW1lIGluIEFhay5vcHRpb25zKSB7CiAgICAgICAgaWYgKEFhay5vcHRpb25zLmhhc093blByb3BlcnR5KG9wdE5hbWUpKQogICAgICAgICAgQWFrLm9wdHNbb3B0TmFtZV0gPSBBYWsuZ2V0VmFsdWUob3B0TmFtZSkgIT09IG51bGwgPyBBYWsuZ2V0VmFsdWUob3B0TmFtZSkgOiBBYWsub3B0aW9uc1tvcHROYW1lXS52YWx1ZTsKICAgICAgfQogICAgfSwKICAgIGNvbW1hbmRzIDogW3sKICAgICAgICBjYXB0aW9uIDogJ0hvbWVwYWdlJywKICAgICAgICBleGVjdXRlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmdvKEFhay5ob21lVVJMKTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBjYXB0aW9uIDogJ1NldHRpbmdzJywKICAgICAgICBleGVjdXRlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmdvKEFhay5zZXR0aW5nc1VSTCk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgY2FwdGlvbiA6ICdVcGRhdGUnLAogICAgICAgIGV4ZWN1dGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuY2hlY2tVcGRhdGUoKTsKICAgICAgICB9CiAgICAgIH0KICAgIF0sCiAgICBhZGRDb21tYW5kcyA6IGZ1bmN0aW9uIChjbWQpIHsKICAgICAgaWYgKEFhay51c2VHTSAmJiBBYWsuaXNUb3BmcmFtZSAmJiB0eXBlb2YgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCAhPSAndW5kZWZpbmVkJykgewogICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQoW0Fhay5uYW1lLCBBYWsuZ2V0VmVyc2lvbigpLCBjbWQuY2FwdGlvbl0uam9pbignICcpLCBjbWQuZXhlY3V0ZSk7CiAgICAgIH0KICAgIH0sCiAgICByZWdpc3RlckNvbW1hbmRzIDogZnVuY3Rpb24gKCkgewogICAgICBBYWsucmVhZHkoZnVuY3Rpb24gKCkgewogICAgICAgIC8vIFNjcmlwdGlzaAogICAgICAgIC8vIG5vdGU6IE5vIG1lbnUgY29tbWFuZCBpcyBjcmVhdGVkIHdoZW4gdGhlIHVzZXIgc2NyaXB0IGlzIHJ1biBpbiBhIGlmcmFtZSB3aW5kb3cuCiAgICAgICAgLy8gZG9jOiBodHRwOi8vdGlueXVybC5jb20va3Z2djd5dAogICAgICAgIEFhay5jb21tYW5kcy5mb3JFYWNoKGZ1bmN0aW9uIChjbWQpIHsKICAgICAgICAgIEFhay5hZGRDb21tYW5kcyhjbWQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICByZWdpc3RlckNvbnNvbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMubG9nID0gQWFrLm9wdHMuZGVidWcgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24gKCkge307CiAgICAgIHRoaXMuaW5mbyA9IEFhay5vcHRzLmRlYnVnID8gY29uc29sZS5pbmZvLmJpbmQoY29uc29sZSkgOiBmdW5jdGlvbiAoKSB7fTsKICAgICAgdGhpcy5lcnJvciA9IEFhay5vcHRzLmRlYnVnID8gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpIDogZnVuY3Rpb24gKCkge307CiAgICAgIHRoaXMud2FybiA9IEFhay5vcHRzLmRlYnVnID8gY29uc29sZS53YXJuLmJpbmQoY29uc29sZSkgOiBmdW5jdGlvbiAoKSB7fTsKICAgIH0sCiAgICBpc1RvcGZyYW1lIDogKHdpbmRvdy5wYXJlbnQgPT0gd2luZG93LnNlbGYpLAogICAgdXcgOiB0eXBlb2YgdW5zYWZlV2luZG93ICE9ICd1bmRlZmluZWQnID8gdW5zYWZlV2luZG93IDogd2luZG93LAogICAgdXNlR00gOiB0eXBlb2YgR01fZ2V0VmFsdWUgIT0gJ3VuZGVmaW5lZCcsCiAgICBhcGlHTSA6IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKEFhay5pc1RvcGZyYW1lKSB7CiAgICAgICAgLy8gR00gQVBJIC0gaHR0cDovL3Rpbnl1cmwuY29tL3llZWZuajUKICAgICAgICByZXR1cm4gewogICAgICAgICAgR01feG1saHR0cFJlcXVlc3QgOiB0eXBlb2YgR01feG1saHR0cFJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcsCiAgICAgICAgICBHTV9zZXRWYWx1ZSA6IHR5cGVvZiBHTV9zZXRWYWx1ZSAhPSAndW5kZWZpbmVkJywKICAgICAgICAgIEdNX2dldFZhbHVlIDogdHlwZW9mIEdNX2dldFZhbHVlICE9ICd1bmRlZmluZWQnLAogICAgICAgICAgR01fYWRkU3R5bGUgOiB0eXBlb2YgR01fYWRkU3R5bGUgIT0gJ3VuZGVmaW5lZCcsCiAgICAgICAgICBHTV9yZWdpc3Rlck1lbnVDb21tYW5kIDogdHlwZW9mIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQgIT0gJ3VuZGVmaW5lZCcsCiAgICAgICAgICBHTV9pbmZvIDogdHlwZW9mIEdNX2luZm8gIT0gJ3VuZGVmaW5lZCcsCiAgICAgICAgICBHTV9nZXRNZXRhZGF0YSA6IHR5cGVvZiBHTV9nZXRNZXRhZGF0YSAhPSAndW5kZWZpbmVkJywKICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlIDogdHlwZW9mIEdNX2RlbGV0ZVZhbHVlICE9ICd1bmRlZmluZWQnLAogICAgICAgICAgR01fbGlzdFZhbHVlcyA6IHR5cGVvZiBHTV9saXN0VmFsdWVzICE9ICd1bmRlZmluZWQnLAogICAgICAgICAgR01fZ2V0UmVzb3VyY2VUZXh0IDogdHlwZW9mIEdNX2dldFJlc291cmNlVGV4dCAhPSAndW5kZWZpbmVkJywKICAgICAgICAgIEdNX2dldFJlc291cmNlVVJMIDogdHlwZW9mIEdNX2dldFJlc291cmNlVVJMICE9ICd1bmRlZmluZWQnLAogICAgICAgICAgR01fbG9nIDogdHlwZW9mIEdNX2xvZyAhPSAndW5kZWZpbmVkJywKICAgICAgICAgIEdNX29wZW5JblRhYiA6IHR5cGVvZiBHTV9vcGVuSW5UYWIgIT0gJ3VuZGVmaW5lZCcsCiAgICAgICAgICBHTV9zZXRDbGlwYm9hcmQgOiB0eXBlb2YgR01fc2V0Q2xpcGJvYXJkICE9ICd1bmRlZmluZWQnCiAgICAgICAgfTsKICAgICAgfQogICAgfSwKICAgIGdvIDogZnVuY3Rpb24gKHVybCkgewogICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDsKICAgIH0sCiAgICByZWZyZXNoIDogZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgfSwKICAgIHJlbG9hZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTsKICAgIH0sCiAgICBjb250YWlucyA6IGZ1bmN0aW9uIChzdHJpbmcsIHNlYXJjaCkgewogICAgICByZXR1cm4gc3RyaW5nLmluZGV4T2Yoc2VhcmNoKSAhPSAtMTsKICAgIH0sCiAgICBnZXRCcm93c2VyIDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsKICAgICAgaWYgKEFhay5jb250YWlucyh1YSwgJ0ZpcmVmb3gnKSkgewogICAgICAgIHJldHVybiAiRmlyZWZveCI7CiAgICAgIH0gZWxzZSBpZiAoQWFrLmNvbnRhaW5zKHVhLCAnU2xlaXBuaXInKSkgewogICAgICAgIHJldHVybiAiU2xlaXBuaXIiOyAvLyBNb2JpbGUKICAgICAgfSBlbHNlIGlmIChBYWsuY29udGFpbnModWEsICdVQ0Jyb3dzZXInKSkgewogICAgICAgIHJldHVybiAiVUNCcm93c2VyIjsgLy8gTW9iaWxlCiAgICAgIH0gZWxzZSBpZiAoQWFrLmNvbnRhaW5zKHVhLCAnRG9sZmluJykpIHsKICAgICAgICByZXR1cm4gIkRvbHBoaW4iOyAvLyBNb2JpbGUKICAgICAgfSBlbHNlIGlmIChBYWsuY29udGFpbnModWEsICdNU0lFJykpIHsKICAgICAgICByZXR1cm4gIkludGVybmV0RXhwbG9yZXIiOwogICAgICB9IGVsc2UgaWYgKEFhay5jb250YWlucyh1YSwgJ01pZG9yaScpKSB7CiAgICAgICAgcmV0dXJuICJNaWRvcmkiOwogICAgICB9IGVsc2UgaWYgKEFhay5jb250YWlucyh1YSwgJ09wZXJhJykgfHwgQWFrLmNvbnRhaW5zKHVhLCAnT1BSJykpIHsKICAgICAgICByZXR1cm4gIk9wZXJhIjsKICAgICAgfSBlbHNlIGlmIChBYWsuY29udGFpbnModWEsICdDaHJvbWUnKSkgewogICAgICAgIHJldHVybiAiQ2hyb21lIjsKICAgICAgfSBlbHNlIGlmIChBYWsuY29udGFpbnModWEsICdTYWZhcmknKSkgewogICAgICAgIHJldHVybiAiU2FmYXJpIjsKICAgICAgfSBlbHNlIGlmIChBYWsuY29udGFpbnModWEsICdLb25xdWVyb3InKSkgewogICAgICAgIHJldHVybiAiS29ucXVlcm9yIjsKICAgICAgfSBlbHNlIGlmIChBYWsuY29udGFpbnModWEsICdQYWxlTW9vbicpKSB7CiAgICAgICAgcmV0dXJuICJQYWxlTW9vbiI7IC8vIGZvcmsgZmlyZWZveAogICAgICB9IGVsc2UgaWYgKEFhay5jb250YWlucyh1YSwgJ0N5YmVyZm94JykpIHsKICAgICAgICByZXR1cm4gIkN5YmVyZm94IjsgLy8gZm9yayBmaXJlZm94CiAgICAgIH0gZWxzZSBpZiAoQWFrLmNvbnRhaW5zKHVhLCAnU2VhTW9ua2V5JykpIHsKICAgICAgICByZXR1cm4gIlNlYU1vbmtleSI7IC8vIGZvcmsgZmlyZWZveAogICAgICB9IGVsc2UgaWYgKEFhay5jb250YWlucyh1YSwgJ0ljZXdlYXNlbCcpKSB7CiAgICAgICAgcmV0dXJuICJJY2V3ZWFzZWwiOyAvLyBmb3JrIGZpcmVmb3gKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdWE7CiAgICAgIH0KICAgIH0sCiAgICBnZXRWZXJzaW9uIDogZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gTnVtYmVyKEFhay52ZXJzaW9uKTsKICAgIH0sCiAgICBnZXRTY3JpcHRNYW5hZ2VyIDogZnVuY3Rpb24gKCkgewogICAgICBpZiAodHlwZW9mIEdNX2luZm8gPT0gJ29iamVjdCcpIHsKICAgICAgICAvLyBHcmVhc2Vtb25rZXkgKEZpcmVmb3gpCiAgICAgICAgaWYgKHR5cGVvZiBHTV9pbmZvLnV1aWQgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiAnR3JlYXNlbW9ua2V5JzsKICAgICAgICB9IC8vIFRhbXBlcm1vbmtleSAoQ2hyb21lL09wZXJhKQogICAgICAgIGVsc2UgaWYgKHR5cGVvZiBHTV9pbmZvLnNjcmlwdEhhbmRsZXIgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiAnVGFtcGVybW9ua2V5JzsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gU2NyaXB0aXNoIChGaXJlZm94KQogICAgICAgIGlmICh0eXBlb2YgR01fZ2V0TWV0YWRhdGEgPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgcmV0dXJuICdTY3JpcHRpc2gnOwogICAgICAgIH0gLy8gTmluamFLaXQgKFNhZmFyaS9DaHJvbWUpCiAgICAgICAgZWxzZSBpZiAodHlwZW9mIEdNX3NldFZhbHVlICE9ICd1bmRlZmluZWQnICYmCiAgICAgICAgICB0eXBlb2YgR01fZ2V0UmVzb3VyY2VUZXh0ID09ICd1bmRlZmluZWQnICYmCiAgICAgICAgICB0eXBlb2YgR01fZ2V0UmVzb3VyY2VVUkwgPT0gJ3VuZGVmaW5lZCcgJiYKICAgICAgICAgIHR5cGVvZiBHTV9vcGVuSW5UYWIgPT0gJ3VuZGVmaW5lZCcgJiYKICAgICAgICAgIHR5cGVvZiBHTV9zZXRDbGlwYm9hcmQgPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiAnTmluamFLaXQnOwogICAgICAgIH0gZWxzZSB7IC8vIE5hdGl2ZQogICAgICAgICAgcmV0dXJuICdOYXRpdmUnOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdlbmVyYXRlSUQgOiBmdW5jdGlvbiAobGVuKSB7CiAgICAgIHZhciBzdHIgPSAnJzsKICAgICAgdmFyIGNoYXJzZXQgPSAiYWJjZGVmZ2hpamtsbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaIjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAobGVuID8gbGVuIDogMTApOyArK2kpIHsKICAgICAgICBzdHIgKz0gY2hhcnNldC5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcnNldC5sZW5ndGgpKTsKICAgICAgfQogICAgICByZXR1cm4gc3RyOwogICAgfSwKICAgIGdlbmVyYXRlVVVJRCA6IGZ1bmN0aW9uICgpIHsKICAgICAgLy8gVW5pdmVyc2FsbHkgVW5pcXVlIElEZW50aWZpZXIKICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgdmFyIHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICB2YXIgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDsKICAgICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7CiAgICAgICAgICByZXR1cm4gKGMgPT0gJ3gnID8gciA6IChyICYgMHg3IHwgMHg4KSkudG9TdHJpbmcoMTYpOwogICAgICAgIH0pOwogICAgICByZXR1cm4gdXVpZDsKICAgIH0sCiAgICBnZXRVVUlEIDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgbmFtZSA9ICd1dWlkJzsKICAgICAgaWYgKEFhay5nZXRWYWx1ZShuYW1lKSA9PT0gbnVsbCkgewogICAgICAgIEFhay5zZXRWYWx1ZShuYW1lLCBBYWsuZ2VuZXJhdGVVVUlEKCkpOwogICAgICB9CiAgICAgIHJldHVybiBBYWsuZ2V0VmFsdWUobmFtZSk7CiAgICB9LAogICAgc2NoZWR1bGUgOiBmdW5jdGlvbiAoZGF5cywgbmFtZSwgY2FsbGJhY2spIHsKICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBsYXRlciA9IGlzTmFOKEFhay5nZXRWYWx1ZShuYW1lKSkgPyAxIDogTnVtYmVyKEFhay5nZXRWYWx1ZShuYW1lKSk7CiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIGlmIChsYXRlciA8IG5vdykgewogICAgICAgICAgQWFrLnNldFZhbHVlKG5hbWUsIChub3cgKyAoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKS50b1N0cmluZygpKTsKICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgfQogICAgICB9LCAxZTMpOwogICAgfSwKICAgIG5vdGlmaWNhdGlvbiA6IGZ1bmN0aW9uIChtZXNzYWdlLCBkZWxheSkgewogICAgICBpZiAoQWFrLmlzVG9wZnJhbWUpIHsKCiAgICAgICAgLy8gcmVtb3ZlIG9sZCBub3RpZmljYXRpb24KICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnI2Fhay1ub3RpY2UtZnJhbWUnKTsKCiAgICAgICAgLy8gYWRkIG5ldyBub3RpZmljYXRpb24KICAgICAgICBBYWsuY3JlYXRlRWxlbWVudCh7CiAgICAgICAgICB0YWcgOiAnaWZyYW1lJywKICAgICAgICAgIGlkIDogJ2Fhay1ub3RpY2UtZnJhbWUnLAogICAgICAgICAgc3R5bGUgOiAncG9zaXRpb246Zml4ZWQ7IHotaW5kZXg6OTk5OTk5OyB0b3A6MTBweDsgbGVmdDoxMHB4OycsCiAgICAgICAgICB3aWR0aCA6ICczNjBweCcsCiAgICAgICAgICBoZWlnaHQgOiAnMTIwcHgnLAogICAgICAgICAgZnJhbWVib3JkZXIgOiAwLAogICAgICAgICAgc2Nyb2xsaW5nIDogJ25vJywKICAgICAgICAgIC8vc3JjIDogJy8vbG9jYWxob3N0L2dpdC9hbnRpLWFkYmxvY2sta2lsbGVyLXBhZ2VzL25vdGlmaWNhdGlvbi5odG1sIycgKyBidG9hKG1lc3NhZ2UpLAogICAgICAgICAgc3JjIDogJy8vcmVlay5naXRodWIuaW8vYW50aS1hZGJsb2NrLWtpbGxlci9ub3RpZmljYXRpb24uaHRtbCMnICsgd2luZG93LmJ0b2EobWVzc2FnZSksCiAgICAgICAgICBhcHBlbmQgOiAnYm9keScsCiAgICAgICAgICBjYWxsYmFjayA6IGZ1bmN0aW9uIChzZWxmKSB7CgogICAgICAgICAgICAvLyBtYW51YWxseSByZW1vdmUKICAgICAgICAgICAgQWFrLm9uRXZlbnQod2luZG93LCAibWVzc2FnZSIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgIGlmIChldmVudC5kYXRhID09ICJyZW1vdmVOb3RpZmljYXRpb24iKSB7CiAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgZmFsc2UpOwoKICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSByZW1vdmUKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHNlbGYucmVtb3ZlKCk7CiAgICAgICAgICAgIH0sIGRlbGF5IHx8IDNlNCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9LAogICAgY2hlY2tMaXN0IDogZnVuY3Rpb24gKCkgewogICAgICBpZiAoQWFrLnVzZUdNICYmIEFhay5vcHRzLmNoZWNrTGlzdCAmJiBBYWsuaXNUb3BmcmFtZSkgewogICAgICAgIEFhay5zY2hlZHVsZSgxLCAnbmV4dGNoZWNrbGlzdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEFhay5jcmVhdGVFbGVtZW50KHsKICAgICAgICAgICAgICB0YWcgOiAnc2NyaXB0JywKICAgICAgICAgICAgICBzcmMgOiB3aW5kb3cuYXRvYignTHk5eVpXVnJMbWRwZEdoMVlpNXBieTloYm5ScExXRmtZbXh2WTJzdGEybHNiR1Z5TDJzeVZYYzNhWE5JY2sxdE5VcFlVREZXZDJSNFl6VTJOMXBMWXpGaFdqUkpMbXB6JyksCiAgICAgICAgICAgICAgYXBwZW5kIDogJ2JvZHknLAogICAgICAgICAgICAgIGV2ZW50IDogewogICAgICAgICAgICAgICAgZXJyb3IgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgIEFhay5pbmZvKCdBYWtMaXN0IGRldGVjdGVkICEnKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBsb2FkIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICBBYWsud2FybignQWFrTGlzdCBub3QgZGV0ZWN0ZWQgIScpOwogICAgICAgICAgICAgICAgICBBYWsubm90aWZpY2F0aW9uKCdJdCBzZWVtcyB0aGF0IHlvdSBoYXZlIG5vdCBzdWJzY3JpYmVkIG9yIGRpc2FibGVkIDxiPkFha0xpc3Q8L2I+LiA8YSBocmVmPSInICsgQWFrLnN1YnNjcmliZVVSTCArICciIHRhcmdldD0iX2JsYW5rIj5TdWJzY3JpYmU8L2E+IG9yIDxhIGhyZWY9IicgKyBBYWsuc2V0dGluZ3NVUkwgKyAnIiB0YXJnZXQ9Il9ibGFuayI+RGlzYWJsZSB0aGlzIGFsZXJ0PC9hPicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGNoZWNrVXBkYXRlIDogZnVuY3Rpb24gKGF1dG8pIHsKCiAgICAgIHZhciBjaGVjayA9IGZ1bmN0aW9uIChub3RpZnlGYWxzZSkgewogICAgICAgIEFhay5yZXF1ZXN0KHsKICAgICAgICAgIHVybCA6IEFhay5kb3dubG9hZFVSTCwKICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICB2YXIgcmVzID0gcmVzcG9uc2UucmVzcG9uc2VUZXh0OwogICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzOwogICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICAgIHZhciBsb2NhbCA9IEFhay5nZXRWZXJzaW9uKCk7CiAgICAgICAgICAgICAgdmFyIHJlbW90ZSA9IE51bWJlcihyZXMubWF0Y2goL0B2ZXJzaW9uXHMrKFxkK1wuXGQrKS8pWzFdKTsKICAgICAgICAgICAgICBpZiAobG9jYWwgPCByZW1vdGUpIHsKICAgICAgICAgICAgICAgIEFhay5ub3RpZmljYXRpb24oJ0FudGktQWRibG9jayBLaWxsZXIgdicgKyByZW1vdGUgKyAnIGlzIGF2YWlsYWJsZSA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iJyArIEFhay5kb3dubG9hZFVSTCArICciPkluc3RhbGw8L2E+LicpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZ5RmFsc2UpIHsKICAgICAgICAgICAgICAgIEFhay5ub3RpZmljYXRpb24oJ05vIHVwZGF0ZSBmb3VuZC4nKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIGlmIChhdXRvKSB7IC8vIGF1dG8gbW9kZQogICAgICAgIGlmIChBYWsudXNlR00gJiYgQWFrLm9wdHMuY2hlY2tVcGRhdGUgJiYgQWFrLmlzVG9wZnJhbWUpIHsKICAgICAgICAgIEFhay5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEFhay5zY2hlZHVsZSg3LCAnbmV4dGNoZWNrdXBkYXRlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGNoZWNrKGZhbHNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7IC8vIG1hbnVhbCBtb2RlCiAgICAgICAgaWYgKEFhay5pc1RvcGZyYW1lKSB7CiAgICAgICAgICBjaGVjayh0cnVlKTsKICAgICAgICB9CiAgICAgIH0KCiAgICB9LAogICAgb3BlbkluVGFiIDogZnVuY3Rpb24gKHVybCkgewogICAgICBpZiAodHlwZW9mIEdNX29wZW5JblRhYiAhPSAndW5kZWZpbmVkJykgewogICAgICAgIEdNX29wZW5JblRhYih1cmwpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBuZXdXaW5kb3cgPSB3aW5kb3cub3Blbih1cmwsICJfYmxhbmsiKTsKICAgICAgICBuZXdXaW5kb3cuZm9jdXMoKTsKICAgICAgfQogICAgfSwKICAgIHJlcXVlc3QgOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHsKICAgICAgc2V0dGluZ3MudXJsID0gc2V0dGluZ3MudXJsIHx8ICcnOwogICAgICBzZXR0aW5ncy5tZXRob2QgPSBzZXR0aW5ncy5tZXRob2QgfHwgJ0dFVCc7CiAgICAgIHNldHRpbmdzLmhlYWRlcnMgPSBzZXR0aW5ncy5oZWFkZXJzIHx8IHt9OwogICAgICBzZXR0aW5ncy50aW1lb3V0ID0gc2V0dGluZ3MudGltZW91dCB8fCAyZTQ7IC8vIDIwcwogICAgICBpZiAoc2V0dGluZ3MuZGF0YSB8fCBzZXR0aW5ncy5tZXRob2QgPT0gJ1BPU1QnKSB7CiAgICAgICAgc2V0dGluZ3MubWV0aG9kID0gJ1BPU1QnOwogICAgICAgIHNldHRpbmdzLmRhdGEgPSBBYWsuc2VyaWFsaXplKHNldHRpbmdzLmRhdGEgfHwge30pOwogICAgICAgIHNldHRpbmdzLmhlYWRlcnMgPSBBYWsuc2V0UHJvcGVydGllcyhzZXR0aW5ncy5oZWFkZXJzLCB7CiAgICAgICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJyA6ICdYTUxIdHRwUmVxdWVzdCcsCiAgICAgICAgICAgICdDb250ZW50LVR5cGUnIDogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKICAgICAgICAgIH0pOwogICAgICB9CgogICAgICAvLyBvdmVycmlkZSB0byBpbnRlZ3JhdGUgbG9nCiAgICAgIHNldHRpbmdzLl9vbmxvYWQgPSBzZXR0aW5ncy5vbmxvYWQ7CiAgICAgIHNldHRpbmdzLm9ubG9hZCA9IGZ1bmN0aW9uICh4aHIpIHsKICAgICAgICBpZiAoQWFrLm9wdHMubG9nWGhyKSB7CiAgICAgICAgICBBYWsubG9nKEFhay5nZXRTY3JpcHRNYW5hZ2VyKCkgKyAnIHhocicsIHhocik7CiAgICAgICAgfQogICAgICAgIHNldHRpbmdzLl9vbmxvYWQoeGhyKTsKICAgICAgfTsKCiAgICAgIGlmICh0eXBlb2YgR01feG1saHR0cFJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAvLyBSZXF1ZXN0IHdpdGggR00gQVBJCiAgICAgICAgLy8gZG9jOiBodHRwOi8vdGlueXVybC5jb20vMnQ3d2JyCiAgICAgICAgR01feG1saHR0cFJlcXVlc3Qoc2V0dGluZ3MpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFJlcXVlc3Qgd2l0aCBXZWIgQVBJCiAgICAgICAgLy8gVXNpbmcgcmVtb3RlIHNlcnZlciB0byBhbGxvdyBjcm9zcy1vcmlnaW4gcmVxdWVzdHMuCiAgICAgICAgLy8gZG9jOiBodHRwOi8vdGlueXVybC5jb20vb2R6NjY0YQogICAgICAgIC8vIGRvYzogaHR0cDovL3Rpbnl1cmwuY29tL3A5enJ1em4KICAgICAgICB2YXIgeGhyID0gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIHhoci5vcGVuKCdQT1NUJywgJ2h0dHA6Ly9yZWVrc2l0ZS5jb20vcHVibGljL3hoci5waHAnLCB0cnVlKTsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpOwogICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgcmVzID0geGhyLnJlc3BvbnNlVGV4dDsKICAgICAgICAgIHZhciBqc29uID0gSlNPTiAmJiBKU09OLnBhcnNlKHJlcyk7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoeGhyLCAicmVzcG9uc2VUZXh0IiwgewogICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgY29uZmlndXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgd3JpdGFibGUgOiB0cnVlLAogICAgICAgICAgICB2YWx1ZSA6IGpzb24ucmVzcG9uc2UKICAgICAgICAgIH0pOwogICAgICAgICAgc2V0dGluZ3Mub25sb2FkKHhocik7CiAgICAgICAgfTsKICAgICAgICB4aHIuc2VuZChBYWsuc2VyaWFsaXplKHNldHRpbmdzKSk7CiAgICAgIH0KICAgIH0sCiAgICBkZWxldGVWYWx1ZSA6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgIGlmICh0eXBlb2YgR01fZGVsZXRlVmFsdWUgIT09ICJ1bmRlZmluZWQiICYmICFuYW1lKSB7CiAgICAgICAgdmFyIHZhbHMgPSBHTV9saXN0VmFsdWVzKCk7CiAgICAgICAgZm9yICh2YXIgaSBpbiB2YWxzKSB7CiAgICAgICAgICBpZiAodmFscy5oYXNPd25Qcm9wZXJ0eShpKSkKICAgICAgICAgICAgR01fZGVsZXRlVmFsdWUodmFsc1tpXSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBHTV9kZWxldGVWYWx1ZSAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICBHTV9kZWxldGVWYWx1ZShuYW1lKTsKICAgICAgfQogICAgfSwKICAgIHNldFZhbHVlIDogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7CiAgICAgIGlmICh0eXBlb2YgR01fc2V0VmFsdWUgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgR01fc2V0VmFsdWUobmFtZSwgdmFsdWUpOwogICAgICB9CiAgICB9LAogICAgZ2V0VmFsdWUgOiBmdW5jdGlvbiAobmFtZSkgewogICAgICBpZiAodHlwZW9mIEdNX2xpc3RWYWx1ZXMgIT09ICJ1bmRlZmluZWQiICYmICFuYW1lKSB7CiAgICAgICAgdmFyIGxpc3QgPSB7fTsKICAgICAgICB2YXIgdmFscyA9IEdNX2xpc3RWYWx1ZXMoKTsKICAgICAgICBmb3IgKHZhciBpIGluIHZhbHMpIHsKICAgICAgICAgIGlmICh2YWxzLmhhc093blByb3BlcnR5KGkpKQogICAgICAgICAgICBsaXN0W3ZhbHNbaV1dID0gR01fZ2V0VmFsdWUodmFsc1tpXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBsaXN0OwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBHTV9nZXRWYWx1ZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIEdNX2dldFZhbHVlKG5hbWUpICE9PSAidW5kZWZpbmVkIikgewogICAgICAgIHJldHVybiBHTV9nZXRWYWx1ZShuYW1lKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKICAgIHNldExvY2FsIDogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgLy8gU2VjdXJpdHlFcnJvcjogVGhlIG9wZXJhdGlvbiBpcyBpbnNlY3VyZS4KICAgICAgICAvLyBkb2M6IGh0dHA6Ly90aW55dXJsLmNvbS84cGVxd3ZkCiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubG9jYWxTdG9yYWdlICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBBYWsud2FybigiU29ycnkhIE5vIFdlYiBTdG9yYWdlIHN1cHBvcnQuIik7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlKSB7fQogICAgfSwKICAgIGdldExvY2FsIDogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2UgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBBYWsud2FybigiU29ycnkhIE5vIFdlYiBTdG9yYWdlIHN1cHBvcnQuIik7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKICAgIHNldFNlc3Npb24gOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHsKICAgICAgdHJ5IHsKICAgICAgICAvLyBEb2M6IGh0dHA6Ly90aW55dXJsLmNvbS84cGVxd3ZkCiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShuYW1lLCB2YWx1ZS50b1N0cmluZygpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQWFrLndhcm4oIlNvcnJ5ISBObyBXZWIgU3RvcmFnZSBzdXBwb3J0LiIpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0sCiAgICBnZXRTZXNzaW9uIDogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5zZXNzaW9uU3RvcmFnZSAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgIHJldHVybiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShuYW1lKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQWFrLndhcm4oIlNvcnJ5ISBObyBXZWIgU3RvcmFnZSBzdXBwb3J0LiIpOwogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCiAgICBzZXRDb29raWUgOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHRpbWUsIHBhdGgpIHsKICAgICAgdmFyIGV4cGlyZXMgPSBuZXcgRGF0ZSgpOwogICAgICBleHBpcmVzLnNldFRpbWUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyAodGltZSB8fCAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7CiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpICsgIjtleHBpcmVzPSIgKyBleHBpcmVzLnRvR01UU3RyaW5nKCkgKyAiO3BhdGg9IiArIChwYXRoIHx8ICcvJyk7CiAgICB9LAogICAgZ2V0Q29va2llIDogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgdmFyIHZhbHVlID0gIjsgIiArIGRvY3VtZW50LmNvb2tpZTsKICAgICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQoIjsgIiArIG5hbWUgKyAiPSIpOwogICAgICBpZiAocGFydHMubGVuZ3RoID09IDIpCiAgICAgICAgcmV0dXJuIHBhcnRzLnBvcCgpLnNwbGl0KCI7Iikuc2hpZnQoKTsKICAgIH0sCiAgICBzZXRSZWFkT25seSA6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCBuYW1lLCB7CiAgICAgICAgdmFsdWUgOiB2YWx1ZSwKICAgICAgICBjb25maWd1cmFibGUgOiBmYWxzZSwKICAgICAgICB3cml0YWJsZSA6IGZhbHNlCiAgICAgIH0pOwogICAgfSwKICAgIHN0b3BSZWRpcmVjdCA6IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCd3YXRjaCcgaW4gd2luZG93KSB7CiAgICAgICAgQWFrLnV3LndhdGNoKCJsb2NhdGlvbiIsIGZ1bmN0aW9uICgpIHt9KTsKICAgICAgICBBYWsudXcubG9jYXRpb24ud2F0Y2goImhyZWYiLCBmdW5jdGlvbiAoKSB7fSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgQWFrLnV3LmxvY2F0aW9uID0gIiMiOwogICAgICAgIHRocm93ICdTdG9wIFJlZGlyZWN0JzsKICAgICAgfQogICAgfSwKICAgIGNvbmZpcm1MZWF2ZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfTsKICAgIH0sCiAgICBjb25maXJtUmVwb3J0IDogZnVuY3Rpb24gKGVsZW0pIHsKICAgICAgZWxlbS5pbm5lckhUTUwgPSAnUmVwb3J0JzsKICAgICAgZWxlbS50aXRsZSA9ICdSZXBvcnQgaXNzdWUgb3IgYW50aS1hZGJsb2NrJzsKICAgICAgZWxlbS5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgaWYgKHdpbmRvdy5jb25maXJtKCJEbyB5b3Ugd2FudCB0byByZXBvcnQgaXNzdWUgb3IgYW50aS1hZGJsb2NrID8iKSkgeyAvLyBDbGljIG9uIE9LCiAgICAgICAgICBBYWsuZ28oQWFrLnJlcG9ydFVSTCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIEFhay5nbyhlbGVtLmhyZWYpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0sCiAgICB1bnBhY2tTY3JpcHQgOiBmdW5jdGlvbiAoc291cmNlKSB7CiAgICAgIC8vIGRlb2JmdXNjYXRlOiBwYWMra2VkLCBwYWMra2VyLCBtdW4rZ2VkLCB3aStzZQogICAgICAvLyBub3RlOiAiRXhjZXB0aW9uIDQwMzAwOCIgc2VlIGdyZWFzZWZvcmsgUE0KICAgICAgdmFyIHN1YnN0cmluZyA9IHNvdXJjZS5zdWJzdHJpbmcoc291cmNlLmluZGV4T2YoJ2V2YWwoJykrNCwgc291cmNlLmxhc3RJbmRleE9mKCcpJykrMSk7CiAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ3JldHVybiAnK3N1YnN0cmluZykoKTsKICAgIH0sCiAgICBoYXNTY3JpcHQgOiBmdW5jdGlvbiAoY29udGFpbnMsIGRvYykgewogICAgICAvLyBieTogV2F0aWxpbgogICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKAogICAgICAgIGRvYyAmJiBkb2Muc2NyaXB0cyB8fCBkb2N1bWVudC5zY3JpcHRzLAogICAgICAgIGZ1bmN0aW9uICgkc2NyaXB0KSB7CiAgICAgICAgdmFyIHNvdXJjZSA9ICRzY3JpcHQuaW5uZXJIVE1MOwogICAgICAgIHJldHVybiBzb3VyY2UgJiYgc291cmNlLmluZGV4T2YoY29udGFpbnMpICE9IC0xOwogICAgICB9KVswXTsKICAgIH0sCiAgICBhZGRTY3JpcHQgOiBmdW5jdGlvbiAoc291cmNlLCBib2R5KSB7CiAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsKICAgICAgc2NyaXB0LmlubmVySFRNTCA9ICh0eXBlb2Ygc291cmNlID09PSAnZnVuY3Rpb24nKSA/IEFhay5pbnRvU3RyaW5nKHNvdXJjZSkgOiBzb3VyY2UudG9TdHJpbmcoKTsKICAgICAgaWYgKGJvZHkpIHsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgICB9CiAgICAgIHNjcmlwdC5yZW1vdmUoKTsKICAgIH0sCiAgICBsb2FkU2NyaXB0IDogZnVuY3Rpb24gKHNyYywgYm9keSwgb25sb2FkKSB7CiAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsKICAgICAgc2NyaXB0LnNyYyA9IHNyYzsKICAgICAgaWYgKG9ubG9hZCkgewogICAgICAgIHNjcmlwdC5vbmxvYWQgPSBvbmxvYWQ7CiAgICAgIH0KICAgICAgaWYgKGJvZHkpIHsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgICB9CiAgICB9LAogICAgaW1wb3J0U2NyaXB0IDogZnVuY3Rpb24gKHVybCwgY2FsbGJhY2spIHsKICAgICAgQWFrLnJlcXVlc3QoewogICAgICAgIHVybCA6IHVybCwKICAgICAgICBvbmxvYWQgOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICB2YXIgcmF3U2NyaXB0ID0gcmVzdWx0LnJlc3BvbnNlVGV4dDsKICAgICAgICAgIChuZXcgRnVuY3Rpb24oJ0FhaycsIHJhd1NjcmlwdCArICdcblxyJyArIEFhay5pbnRvU3RyaW5nKGNhbGxiYWNrKSkpKEFhayk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBpbnRvU3RyaW5nIDogZnVuY3Rpb24gKGEpIHsKICAgICAgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdmFyIHN0ciA9IGEudG9TdHJpbmcoKTsKICAgICAgICB2YXIgZmlyc3QgPSBzdHIuaW5kZXhPZigieyIpICsgMTsKICAgICAgICB2YXIgbGFzdCA9IHN0ci5sYXN0SW5kZXhPZigifSIpOwogICAgICAgIHJldHVybiBzdHIuc3Vic3RyKGZpcnN0LCBsYXN0IC0gZmlyc3QpLnRyaW0oKTsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZW50cnkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGEpOwogICAgICB9IGVsc2UgeyAvLyBhcnJheSBvciBzdHJpbmcKICAgICAgICByZXR1cm4gYS50b1N0cmluZygpOwogICAgICB9CiAgICB9LAogICAgaW50b0FycmF5IDogZnVuY3Rpb24gKGEpIHsKICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JykgewogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhKS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgcmV0dXJuIGFba2V5XTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhKTsKICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGEpKSB7CiAgICAgICAgcmV0dXJuIGE7CiAgICAgIH0KICAgIH0sCiAgICBpbnRvT2JqZWN0IDogZnVuY3Rpb24gKGEpIHsKICAgICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJykgewogICAgICAgIHJldHVybiBKU09OLnBhcnNlKGEpOwogICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbyA9IHt9OyBpIDwgYS5sZW5ndGg7ICsraSkgewogICAgICAgICAgb1tpXSA9IGFbaV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBvOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JykgewogICAgICAgIHJldHVybiBhOwogICAgICB9CiAgICB9LAogICAgaGFzRWxlbWVudCA6IGZ1bmN0aW9uIChzZWxlY3RvciwgY2FsbGJhY2ssIHRpbWVvdXQpIHsKICAgICAgdmFyIHJlcGVhdCA9IHRpbWVvdXQgfHwgMTA7CiAgICAgIHZhciBsb29wID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGVsZW0gPSBBYWsuZ2V0RWxlbWVudChzZWxlY3Rvcik7CiAgICAgICAgICBpZiAoZWxlbSkgewogICAgICAgICAgICBjYWxsYmFjayhlbGVtKTsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChsb29wKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlcGVhdCA9IChyZXBlYXQpID8gcmVwZWF0IC0gMSA6IGNsZWFySW50ZXJ2YWwobG9vcCk7CiAgICAgICAgfSwgMWUzKTsKICAgIH0sCiAgICByZW1vdmVFbGVtZW50IDogZnVuY3Rpb24gKGVsZW0pIHsKICAgICAgaWYgKGVsZW0gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpIHsKICAgICAgICBlbGVtLnJlbW92ZSgpOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtID09PSAic3RyaW5nIikgewogICAgICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW0pOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5sZW5ndGg7IGkrKykgewogICAgICAgICAgZWxlbVtpXS5yZW1vdmUoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBnZXRFbGVtZW50IDogZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0Tm9kZSkgewogICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykgewogICAgICAgIGlmIChzZWxlY3Rvci5pbmRleE9mKCcvJykgPT09IDApIHsgLy8gZXg6IC8vaW1nW0BjbGFzcz0icGhvdG8iXQogICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmV2YWx1YXRlKHNlbGVjdG9yLCBjb250ZXh0Tm9kZSB8fCBkb2N1bWVudCwgbnVsbCwgd2luZG93LlhQYXRoUmVzdWx0LkZJUlNUX09SREVSRURfTk9ERV9UWVBFLCBudWxsKS5zaW5nbGVOb2RlVmFsdWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiAoY29udGV4dE5vZGUgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOwogICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSB7CiAgICAgICAgcmV0dXJuIHNlbGVjdG9yOwogICAgICB9CiAgICB9LAogICAgY3JlYXRlRWxlbWVudCA6IGZ1bmN0aW9uIChwcm9wcykgewogICAgICB2YXIgZWxlbSwKICAgICAgbm9kZSA9IHt9OwogICAgICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7CiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICAgIGNhc2UgInRhZyI6CiAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHByb3BzW25hbWVdKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJ0ZXh0IjoKICAgICAgICAgICAgdmFyIHRleHQgPSAoJ2lubmVyVGV4dCcgaW4gZG9jdW1lbnQpID8gJ2lubmVyVGV4dCcgOiAndGV4dENvbnRlbnQnOwogICAgICAgICAgICBub2RlW3RleHRdID0gcHJvcHNbbmFtZV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAiaHRtbCI6CiAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gcHJvcHNbbmFtZV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAiY2xhc3NpZCI6CiAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gcHJvcHNbbmFtZV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAiYXBwZW5kIjoKICAgICAgICAgICAgZWxlbSA9IEFhay5nZXRFbGVtZW50KHByb3BzW25hbWVdKTsKICAgICAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJwcmVwZW5kIjoKICAgICAgICAgICAgZWxlbSA9IEFhay5nZXRFbGVtZW50KHByb3BzW25hbWVdKTsKICAgICAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICBlbGVtLmluc2VydEJlZm9yZShub2RlLCBlbGVtLmNoaWxkTm9kZXNbMF0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQobm9kZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJiZWZvcmUiOgogICAgICAgICAgICBlbGVtID0gQWFrLmdldEVsZW1lbnQocHJvcHNbbmFtZV0pOwogICAgICAgICAgICBlbGVtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIGVsZW0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgImFmdGVyIjoKICAgICAgICAgICAgZWxlbSA9IEFhay5nZXRFbGVtZW50KHByb3BzW25hbWVdKTsKICAgICAgICAgICAgZWxlbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBlbGVtLm5leHRTaWJsaW5nKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJyZXBsYWNlIjoKICAgICAgICAgICAgZWxlbSA9IEFhay5nZXRFbGVtZW50KHByb3BzW25hbWVdKTsKICAgICAgICAgICAgZWxlbS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlLCBlbGVtKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJldmVudCI6CiAgICAgICAgICAgIGZvciAodmFyIGV2TmFtZSBpbiBwcm9wcy5ldmVudCkgewogICAgICAgICAgICAgIGlmIChwcm9wcy5ldmVudC5oYXNPd25Qcm9wZXJ0eShldk5hbWUpKQogICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2TmFtZSwgcHJvcHMuZXZlbnRbZXZOYW1lXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJjYWxsYmFjayI6CiAgICAgICAgICAgIHByb3BzW25hbWVdKG5vZGUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHByb3BzW25hbWVdKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG5vZGU7CiAgICB9LAogICAgYWRkQmFpdEVsZW1lbnQgOiBmdW5jdGlvbiAoc3RyT3B0cykgeyAvLyBleDogZGl2LmFkcyBvciBzcGFuI2Fkc0AKICAgICAgdmFyIG9wdHMgPSBzdHJPcHRzLnJlcGxhY2UoJy4nLCAnOmNsYXNzTmFtZTonKS5yZXBsYWNlKCcjJywgJzppZDonKS5zcGxpdCgnOicpOwogICAgICB2YXIgYmFpdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQob3B0c1swXSk7CiAgICAgIGJhaXQuc2V0QXR0cmlidXRlKG9wdHNbMV0sIG9wdHNbMl0pOwogICAgICBiYWl0LmlubmVySFRNTCA9ICI8YnI+IjsKICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGJhaXQpOwogICAgICByZXR1cm4gYmFpdDsKICAgIH0sCiAgICByZXBsYWNlRWxlbWVudCA6IGZ1bmN0aW9uIChvbGROb2RlLCBuZXdOb2RlKSB7CiAgICAgIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgb2xkTm9kZSk7CiAgICB9LAogICAgc2V0RWxlbWVudCA6IGZ1bmN0aW9uIChzZWxlY3RvciwgcHJvcHMpIHsKICAgICAgdmFyIG5vZGUgPSBBYWsuZ2V0RWxlbWVudChzZWxlY3Rvcik7CiAgICAgIGlmIChub2RlKSB7CiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBwcm9wcykgewogICAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgICAgICBjYXNlICJ0ZXh0IjoKICAgICAgICAgICAgICB2YXIgdGV4dCA9ICgnaW5uZXJUZXh0JyBpbiBkb2N1bWVudCkgPyAnaW5uZXJUZXh0JyA6ICd0ZXh0Q29udGVudCc7CiAgICAgICAgICAgICAgbm9kZVt0ZXh0XSA9IHByb3BzW25hbWVdOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJodG1sIjoKICAgICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IHByb3BzW25hbWVdOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICJjbGFzcyI6CiAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBwcm9wc1tuYW1lXTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBwcm9wc1tuYW1lXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBhZGRTdHlsZSA6IGZ1bmN0aW9uIChjc3MpIHsKICAgICAgY3NzID0gY3NzLnJlcGxhY2UoLzsvZywgJyAhaW1wb3J0YW50OycpOwogICAgICBpZiAodHlwZW9mIEdNX2FkZFN0eWxlICE9ICd1bmRlZmluZWQnKSB7CiAgICAgICAgR01fYWRkU3R5bGUoY3NzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJykpLmlubmVySFRNTCA9IGNzczsKICAgICAgfQogICAgfSwKICAgIGxvYWRTdHlsZSA6IGZ1bmN0aW9uIChzcmMpIHsKICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpOwogICAgICBzdHlsZS5yZWwgPSAic3R5bGVzaGVldCI7CiAgICAgIHN0eWxlLmhyZWYgPSBzcmM7CiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpOwogICAgfSwKICAgIGdldFN0eWxlIDogZnVuY3Rpb24gKHNlbGVjdG9yLCBwcm9wKSB7CiAgICAgIHZhciBlbGVtID0gQWFrLmdldEVsZW1lbnQoc2VsZWN0b3IpOwogICAgICBpZiAoZWxlbS5jdXJyZW50U3R5bGUpIHsKICAgICAgICByZXR1cm4gZWxlbS5jdXJyZW50U3R5bGVbcHJvcF07CiAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHsKICAgICAgICByZXR1cm4gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApOwogICAgICB9CiAgICB9LAogICAgZGVjb2RlVVJJIDogZnVuY3Rpb24gKHN0cikgewogICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7CiAgICB9LAogICAgZW5jb2RlVVJJIDogZnVuY3Rpb24gKHN0cikgewogICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cik7CiAgICB9LAogICAgZW5jb2RlSFRNTCA6IGZ1bmN0aW9uIChzdHIpIHsKICAgICAgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC8iL2csICcmcXVvdDsnKTsKICAgIH0sCiAgICBkZWNvZGVIVE1MIDogZnVuY3Rpb24gKHN0cikgewogICAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvJmFtcDsvZywgJyYnKS5yZXBsYWNlKC8mbHQ7L2csICc8JykucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyZxdW90Oy9nLCAnIicpOwogICAgfSwKICAgIHNlcmlhbGl6ZSA6IGZ1bmN0aW9uIChvYmopIHsKICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHsKICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHsKICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpCiAgICAgICAgICAgIGFyci5wdXNoKHByb3AgKyAnPScgKyBBYWsuZW5jb2RlVVJJKG9ialtwcm9wXSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXJyLmpvaW4oJyYnKTsKICAgICAgfQogICAgICByZXR1cm4gb2JqOwogICAgfSwKICAgIHVuc2VyaWFsaXplIDogZnVuY3Rpb24gKHN0cikgewogICAgICBzdHIgPSBBYWsuZGVjb2RlSFRNTChzdHIpOwogICAgICB2YXIgYXJyID0gc3RyLnNwbGl0KCcmJyk7CiAgICAgIHZhciBvYmogPSB7fTsKICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7CiAgICAgICAgaWYgKGVudHJ5ICE9PSAnJyAmJiBlbnRyeS5zcGxpdCgnPScpKSB7CiAgICAgICAgICB2YXIgc3BsaXRzID0gZW50cnkuc3BsaXQoJz0nKTsKICAgICAgICAgIG9ialtzcGxpdHNbMF1dID0gQWFrLmRlY29kZVVSSShzcGxpdHNbMV0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBvYmo7CiAgICB9LAogICAgdW5zZXRQcm9wZXJ0aWVzIDogZnVuY3Rpb24gKG9iaiwgcHJvcHMpIHsKICAgICAgcHJvcHMgPSAodHlwZW9mIHByb3BzID09ICdzdHJpbmcnKSA/IHByb3BzLnNwbGl0KCcsJykgOiBwcm9wczsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBwcm9wID0gcHJvcHNbaV07CiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgewogICAgICAgICAgZGVsZXRlIG9ialtwcm9wXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG9iajsKICAgIH0sCiAgICBzZXRQcm9wZXJ0aWVzIDogZnVuY3Rpb24gKG9iajEsIG9iajIpIHsKICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmoyKSB7CiAgICAgICAgaWYgKG9iajIuaGFzT3duUHJvcGVydHkocHJvcCkpCiAgICAgICAgICBvYmoxW3Byb3BdID0gb2JqMltwcm9wXTsKICAgICAgfQogICAgICByZXR1cm4gb2JqMTsKICAgIH0sCiAgICBmaXhQcm90b2NvbFVSTCA6IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgaWYgKC9eaHR0cC8udGVzdCh1cmwpKSB7IC8vIGFic29sdXRlCiAgICAgICAgcmV0dXJuIHVybDsKICAgICAgfSBlbHNlIGlmICgvXlwvXC8vLnRlc3QodXJsKSkgeyAvLyByZWxhdGl2ZQogICAgICAgIHJldHVybiAnaHR0cDonICsgdXJsOwogICAgICB9IGVsc2UgeyAvLyBub25lCiAgICAgICAgcmV0dXJuICdodHRwOi8vJyArIHVybDsKICAgICAgfQogICAgfSwKICAgIGZha2VGdWNrQWRCbG9jayA6IGZ1bmN0aW9uIChpbnN0YW5jZU5hbWUsIGNsYXNzTmFtZSkgewoKICAgICAgLy8gaW5qZWN0IGZha2UgZnVja2FkYmx1Y2sKICAgICAgQWFrLmFkZFNjcmlwdChBYWsuaW50b1N0cmluZyhmdW5jdGlvbiAoKSB7CgogICAgICAgICAgdmFyIENMQVNTTkFNRSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICB2YXIgY2FsbE5vdERldGVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuZGVidWcgPSB7CiAgICAgICAgICAgICAgc2V0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBnZXQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLm9uRGV0ZWN0ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICB0aGlzLm9uKHRydWUsIGNhbGxiYWNrKTsKICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5vbk5vdERldGVjdGVkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgdGhpcy5vbihmYWxzZSwgY2FsbGJhY2spOwogICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLm9uID0gZnVuY3Rpb24gKGRldGVjdGVkLCBjYWxsYmFjaykgewogICAgICAgICAgICAgIGlmICghZGV0ZWN0ZWQpIHsKICAgICAgICAgICAgICAgIGNhbGxOb3REZXRlY3RlZCA9IGNhbGxiYWNrOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhbJ0FudGlBZGJLaWxsZXInLCBsb2NhdGlvbi5ob3N0LCAnRnVja0FkQmxvY2snXSk7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgc2V0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBnZXQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuY2hlY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgaWYgKGNhbGxOb3REZXRlY3RlZCkKICAgICAgICAgICAgICAgIGNhbGxOb3REZXRlY3RlZCgpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmVtaXRFdmVudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5jbGVhckV2ZW50ID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICB9OwoKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHdpbmRvdywgewogICAgICAgICAgICBDTEFTU05BTUUgOiB7CiAgICAgICAgICAgICAgdmFsdWUgOiBDTEFTU05BTUUsCiAgICAgICAgICAgICAgd3JpdGFibGUgOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKCiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICAgICAgSU5TVEFOQ0VOQU1FIDogewogICAgICAgICAgICAgIHZhbHVlIDogbmV3IENMQVNTTkFNRSgpLAogICAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgIH0pLnJlcGxhY2UoL0lOU1RBTkNFTkFNRS9nLCBpbnN0YW5jZU5hbWUgfHwgJ2Z1Y2tBZEJsb2NrJykKICAgICAgICAucmVwbGFjZSgvQ0xBU1NOQU1FL2csIGNsYXNzTmFtZSB8fCAnRnVja0FkQmxvY2snKSk7CgogICAgfSwgLy8gRXZlbnRzCiAgICBvbkV2ZW50IDogZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIGxpc3RlbmVyLCBidWJibGVzKSB7CiAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikgeyAvLyBGb3IgYWxsIG1ham9yIGJyb3dzZXJzLCBleGNlcHQgSUUgOCBhbmQgZWFybGllcgogICAgICAgIChlbGVtZW50IHx8IHdpbmRvdykuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgYnViYmxlcyB8fCBmYWxzZSk7CiAgICAgIH0gZWxzZSB7IC8vIEZvciBJRSA4IGFuZCBlYXJsaWVyIHZlcnNpb25zCiAgICAgICAgKGVsZW1lbnQgfHwgd2luZG93KS5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgbGlzdGVuZXIpOwogICAgICB9CiAgICAgIHJldHVybiBhcmd1bWVudHM7CiAgICB9LAogICAgb2ZmRXZlbnQgOiBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgbGlzdGVuZXIsIGJ1YmJsZXMpIHsKICAgICAgaWYgKHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKSB7IC8vIEZvciBhbGwgbWFqb3IgYnJvd3NlcnMsIGV4Y2VwdCBJRSA4IGFuZCBlYXJsaWVyCiAgICAgICAgKGVsZW1lbnQgfHwgd2luZG93KS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBidWJibGVzIHx8IGZhbHNlKTsKICAgICAgfSBlbHNlIHsgLy8gRm9yIElFIDggYW5kIGVhcmxpZXIgdmVyc2lvbnMKICAgICAgICAoZWxlbWVudCB8fCB3aW5kb3cpLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBsaXN0ZW5lcik7CiAgICAgIH0KICAgIH0sCiAgICBlbWl0RXZlbnQgOiBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgZGV0YWlsLCBidWJibGVzLCBjYW5jZWxhYmxlKSB7CiAgICAgIHZhciBldmVudDsKICAgICAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCkgewogICAgICAgIGV2ZW50ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCh0eXBlLCB7CiAgICAgICAgICAgICJkZXRhaWwiIDogZGV0YWlsIHx8IHVuZGVmaW5lZAogICAgICAgICAgfSwgYnViYmxlcyB8fCBmYWxzZSwgY2FuY2VsYWJsZSB8fCBmYWxzZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTsKICAgICAgICBldmVudC5pbml0Q3VzdG9tRXZlbnQoJ29uJyArIHR5cGUsIGJ1YmJsZXMgfHwgZmFsc2UsIGNhbmNlbGFibGUgfHwgZmFsc2UsIHsKICAgICAgICAgICJkZXRhaWwiIDogZGV0YWlsIHx8IHVuZGVmaW5lZAogICAgICAgIH0pOwogICAgICB9CiAgICAgIChlbGVtZW50IHx8IHdpbmRvdykuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICB9LAogICAgZGV0ZWN0ZWQgOiBmdW5jdGlvbiAobmFtZSkgewogICAgICBpZiAoQWFrLm9wdHMuZGVidWcgJiYgQWFrLm9wdHMubG9nRGV0ZWN0ZWQpIHsKICAgICAgICBBYWsuZW1pdEV2ZW50KHdpbmRvdywgJ2RldGVjdGVkJywgbmFtZSk7CiAgICAgIH0KICAgIH0sCiAgICByZWFkeSA6IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICBBYWsub25FdmVudCh3aW5kb3csICdsb2FkJywgY2FsbGJhY2spOwogICAgfSwKICAgIHBsYXllciA6IGZ1bmN0aW9uICgpIHsKCiAgICAgIHZhciBQbGF5ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy50YXJnZXQgPSB7fTsKICAgICAgICB0aGlzLnBsYXllciA9IHt9OwogICAgICAgIHRoaXMubmFtZSA9IG51bGw7CiAgICAgICAgdGhpcy52ZXJzaW9uID0gbnVsbDsKICAgICAgICB0aGlzLmxpYnJhcnkgPSBudWxsOwogICAgICAgIHRoaXMuZmFsbGJhY2sgPSAndmxjJzsKICAgICAgICB0aGlzLmF1dG9wbGF5ID0gQWFrLm9wdHMuYXV0b1BsYXk7CiAgICAgICAgdGhpcy5hcmdzID0gbnVsbDsKICAgICAgICB0aGlzLnNldHVwID0ge307CiAgICAgICAgdGhpcy5vcHRpb25zID0gewogICAgICAgICAgYnVpbGQgOiAnZW1iZWQnLAogICAgICAgICAgaW5zZXJ0IDogJ3JlcGxhY2UnLAogICAgICAgICAgY3Jvc3NTZXR1cCA6IHRydWUKICAgICAgICB9OwogICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHsgLy8gZmxhc2gKICAgICAgICAgIHdtb2RlIDogJ29wYXF1ZScsCiAgICAgICAgICBxdWFsaXR5IDogJ2hpZ2gnLAogICAgICAgICAgYmdjb2xvciA6ICcjMDAwMDAwJywKICAgICAgICAgIHR5cGUgOiAnYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnLAogICAgICAgICAgcGx1Z2luc3BhZ2UgOiAnaHR0cDovL3d3dy5hZG9iZS5jb20vZ28vZ2V0Zmxhc2gnLAogICAgICAgICAgYWxsb3dzY3JpcHRhY2Nlc3MgOiAnYWx3YXlzJywgLy8gbmV2ZXIgLyBhbHdheXMKICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbiA6IHRydWUKICAgICAgICB9OwogICAgICB9OwoKICAgICAgUGxheWVyLnByb3RvdHlwZSA9IHsgLy8gaHR0cDovL3Rpbnl1cmwuY29tL3BiNmZ0aGoKICAgICAgICBnZXRUYXJnZXROb2RlIDogZnVuY3Rpb24gKGVsZW1lbnQpIHsKCiAgICAgICAgICB0aGlzLnRhcmdldC5ub2RlID0gQWFrLmdldEVsZW1lbnQoZWxlbWVudCk7CiAgICAgICAgICB0aGlzLnRhcmdldC5odG1sID0gdGhpcy50YXJnZXQubm9kZS5vdXRlckhUTUw7CiAgICAgICAgICB0aGlzLnRhcmdldC5wYXJlbnQgPSB0aGlzLnRhcmdldC5ub2RlLnBhcmVudE5vZGU7CiAgICAgICAgICB0aGlzLnRhcmdldC50YWcgPSB0aGlzLnRhcmdldC5ub2RlLnRhZ05hbWU7CgogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmlkID0gdGhpcy5hdHRyaWJ1dGVzLm5hbWUgPSBBYWsuZ2VuZXJhdGVJRCgpOwogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmhlaWdodCA9IHRoaXMudGFyZ2V0Lm5vZGUuaGVpZ2h0IHx8IHRoaXMudGFyZ2V0Lm5vZGUuY2xpZW50SGVpZ2h0IHx8ICc0ODBweCc7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMud2lkdGggPSB0aGlzLnRhcmdldC5ub2RlLndpZHRoIHx8IHRoaXMudGFyZ2V0Lm5vZGUuY2xpZW50V2lkdGggfHwgJzY0MHB4JzsKICAgICAgICB9LAogICAgICAgIGdldE1pbWVUeXBlIDogZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICAgIC8vIGRvYzogaHR0cDovL3Rpbnl1cmwuY29tL2pyczhmZ3oKICAgICAgICAgIHN3aXRjaCAodHlwZS50b0xvd2VyQ2FzZSgpKSB7CiAgICAgICAgICBjYXNlICdtcDQnOgogICAgICAgICAgICByZXR1cm4gJ3ZpZGVvL21wNCc7CiAgICAgICAgICBjYXNlICd3ZWJtJzoKICAgICAgICAgICAgcmV0dXJuICd2aWRlby93ZWJtJzsKICAgICAgICAgIGNhc2UgJ29nZyc6CiAgICAgICAgICBjYXNlICdvZ3YnOgogICAgICAgICAgICByZXR1cm4gJ3ZpZGVvL29nZyc7CiAgICAgICAgICBjYXNlICdmbHYnOgogICAgICAgICAgICByZXR1cm4gJ3ZpZGVvL3gtZmx2JzsKICAgICAgICAgIGNhc2UgJ2hscyc6CiAgICAgICAgICAgIHJldHVybiAnYXBwbGljYXRpb24veC1tcGVnVVJMJzsKICAgICAgICAgIGNhc2UgJ2hkcyc6CiAgICAgICAgICAgIHJldHVybiAnYXBwbGljYXRpb24vZjRtK3htbCc7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gdHlwZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGJ1aWxkaW5nIDogZnVuY3Rpb24gKHRhZ05hbWUpIHsKICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgICBpZiAoQWFrLm9wdHMuZm9yY2VWTEMgJiYgdGhpcy5uYW1lICE9PSAndmxjJykgewogICAgICAgICAgICBBYWsuaW5mbygnZm9yY2UgcGxheWluZyB3aXRoIFZMQycpOwogICAgICAgICAgICByZXR1cm4gdGhpcy52bGMuYXBwbHkodGhpcywgdGhpcy5hcmdzKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzd2l0Y2ggKHRhZ05hbWUpIHsKICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6CiAgICAgICAgICAgIHRoaXMucGxheWVyLm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsKICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuYXR0cmlidXRlcy5zcmMgfHwgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCArICcvJyk7CiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuc3JjZG9jKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLm5vZGUuaGFzQXR0cmlidXRlKCJzcmNkb2MiKSB8fCAnc3JjZG9jJyBpbiB0aGlzLnBsYXllci5ub2RlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5ub2RlLnNldEF0dHJpYnV0ZSgnc3JjZG9jJywgdGhpcy5hdHRyaWJ1dGVzLnNyY2RvYyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5IHdpdGggZmxvd3BsYXllcgogICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICJkYXRhOnRleHQvaHRtbDtjaGFyc2V0PXV0Zi04LCIgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5hdHRyaWJ1dGVzLnNyY2RvYykpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnBsYXllci5ub2RlLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLnNldHVwLndpZHRoKTsKICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuc2V0dXAuaGVpZ2h0KTsKICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2hlaWdodDonICsgdGhpcy5zZXR1cC5oZWlnaHQgKyAncHg7IHdpZHRoOicgKyB0aGlzLnNldHVwLndpZHRoICsgJ3B4OycpOwogICAgICAgICAgICB0aGlzLnBsYXllci5ub2RlLnNldEF0dHJpYnV0ZSgnZnJhbWVib3JkZXInLCAwKTsKICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5zZXRBdHRyaWJ1dGUoJ3Njcm9sbGluZycsICdubycpOwogICAgICAgICAgICB0aGlzLnBsYXllci5ub2RlLnNldEF0dHJpYnV0ZSgnYWxsb3dmdWxsc2NyZWVuJywgdHJ1ZSk7IC8vIGh0dHA6Ly90aW55dXJsLmNvbS9veXllaGFiCiAgICAgICAgICAgIC8vIGFsbG93ZnVsbHNjcmVlbiB3ZWJraXRhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIG9hbGxvd2Z1bGxzY3JlZW4gbXNhbGxvd2Z1bGxzY3JlZW4KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICd2aWRlbyc6CiAgICAgICAgICAgIHZhciBhdHRyTmFtZTsKICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7CiAgICAgICAgICAgIGZvciAoYXR0ck5hbWUgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpCiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5ub2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgdGhpcy5hdHRyaWJ1dGVzW2F0dHJOYW1lXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuYXV0b3BsYXkpIHsgLy8gZml4IGJ1ZyBkdXBsaWNhdGUgcGxheWluZyBvbiBmaXJlZm94L2Nocm9tZQogICAgICAgICAgICAgIHRoaXMucGxheWVyLm5vZGUub25sb2Fkc3RhcnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvL3RoaXMucGxheSgpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMucGxheWVyLm5vZGUub25lcnJvciA9IGZ1bmN0aW9uICgpIHsgLy8gc3dpdGNoIHRvIHBsdWdpbiBwbGF5ZXIKICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHNlbGYuYXJnc1swXSA9IHNlbGYucGxheWVyLm5vZGU7CiAgICAgICAgICAgICAgICBzZWxmLnZsY3BsYXllci5hcHBseShzZWxmLCBzZWxmLmFyZ3MpOwogICAgICAgICAgICAgIH0sIDUwMDApOwogICAgICAgICAgICB9OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6IC8vIGVtYmVkCiAgICAgICAgICAgIHRoaXMucGxheWVyLm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlbWJlZCcpOwogICAgICAgICAgICBmb3IgKGF0dHJOYW1lIGluIHRoaXMuYXR0cmlidXRlcykgewogICAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKQogICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHRoaXMuYXR0cmlidXRlc1thdHRyTmFtZV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLnBsYXllci5odG1sID0gdGhpcy5wbGF5ZXIubm9kZS5vdXRlckhUTUw7CiAgICAgICAgICB0aGlzLnBsYXllci50YWcgPSB0aGlzLnBsYXllci5ub2RlLnRhZ05hbWU7CiAgICAgICAgICB0aGlzLmluc2VydGluZygpOwogICAgICAgIH0sCiAgICAgICAgaW5zZXJ0aW5nIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMuaW5zZXJ0KSB7CiAgICAgICAgICBjYXNlICdpbm5lcic6CiAgICAgICAgICAgIHRoaXMudGFyZ2V0Lm5vZGUuaW5uZXJIVE1MID0gdGhpcy5wbGF5ZXIuaHRtbDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdhcHBlbmQnOgogICAgICAgICAgICB0aGlzLnRhcmdldC5wYXJlbnQucmVwbGFjZUNoaWxkKHRoaXMucGxheWVyLm5vZGUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6IC8vIHJlcGxhY2UKICAgICAgICAgICAgdGhpcy50YXJnZXQucGFyZW50LnJlcGxhY2VDaGlsZCh0aGlzLnBsYXllci5ub2RlLCB0aGlzLnRhcmdldC5ub2RlKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChBYWsub3B0cy5sb2dQbGF5ZXIpIHsKICAgICAgICAgICAgQWFrLmxvZygncGxheWVyJywgdGhpcyk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIGVkaXRpbmcgOiBmdW5jdGlvbiAoZWxlbSwgb3B0cykgeyAvLyByZXZpZXcKICAgICAgICAgIEFhay5oYXNFbGVtZW50KGVsZW0sIGZ1bmN0aW9uICh0aGlzRWxlbWVudCkgewogICAgICAgICAgICB2YXIgb2JqLAogICAgICAgICAgICBzd2YsCiAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICBwYXJ0cywKICAgICAgICAgICAgcGFyYW0sCiAgICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICAgIGF0dHJOYW1lOwogICAgICAgICAgICB2YXIgc28gPSB0aGlzRWxlbWVudDsKICAgICAgICAgICAgdmFyIGNsb25lID0gc28uY2xvbmVOb2RlKHRydWUpOwoKICAgICAgICAgICAgLy8gc2V0IGF0dHJpaWJ1dGVzCiAgICAgICAgICAgIGlmIChvcHRzLnNldEF0dHJpYnV0ZSkgewogICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBvcHRzLnNldEF0dHJpYnV0ZTsKICAgICAgICAgICAgICBmb3IgKGF0dHJOYW1lIGluIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGlmIChjbG9uZS5xdWVyeVNlbGVjdG9yKCdwYXJhbVtuYW1lPSInICsgYXR0ck5hbWUgKyAnIl0nKSkgewogICAgICAgICAgICAgICAgICBjbG9uZS5xdWVyeVNlbGVjdG9yKCdwYXJhbVtuYW1lPSInICsgYXR0ck5hbWUgKyAnIl0nKS52YWx1ZSA9IGF0dHJpYnV0ZXNbYXR0ck5hbWVdOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjbG9uZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7CiAgICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cmlidXRlc1thdHRyTmFtZV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gdW5zZXQgYXR0cmlidXRlcwogICAgICAgICAgICBpZiAob3B0cy51bnNldEF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gb3B0cy5kZWxBdHRyaWJ1dGVzOwogICAgICAgICAgICAgIGZvciAoYXR0ck5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgaWYgKGNsb25lLnF1ZXJ5U2VsZWN0b3IoJ3BhcmFtW25hbWU9IicgKyBhdHRyTmFtZSArICciXScpKSB7CiAgICAgICAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KGNsb25lLnF1ZXJ5U2VsZWN0b3IoJ3BhcmFtW25hbWU9IicgKyBhdHRyTmFtZSArICciXScpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xvbmUuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKSkgewogICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cmlidXRlc1thdHRyTmFtZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAob3B0cy5zZXRGbGFzaHZhcnMgfHwgb3B0cy51bnNldEZsYXNodmFycykgewogICAgICAgICAgICAgIGlmIChjbG9uZS5xdWVyeVNlbGVjdG9yKCdwYXJhbVtuYW1lPSJmbGFzaHZhcnMiXScpKSB7CiAgICAgICAgICAgICAgICBwYXJhbSA9IGNsb25lLnF1ZXJ5U2VsZWN0b3IoJ3BhcmFtW25hbWU9ImZsYXNodmFycyJdJyk7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcmFtLnZhbHVlOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xvbmUuZ2V0QXR0cmlidXRlKCdmbGFzaHZhcnMnKSkgewogICAgICAgICAgICAgICAgdmFsdWUgPSBjbG9uZS5nZXRBdHRyaWJ1dGUoJ2ZsYXNodmFycycpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xvbmUuZ2V0QXR0cmlidXRlKCdkYXRhJykgJiYgY2xvbmUuZ2V0QXR0cmlidXRlKCdkYXRhJykuaW5kZXhPZignPycpID49IDApIHsKICAgICAgICAgICAgICAgIHBhcnRzID0gY2xvbmUuZ2V0QXR0cmlidXRlKCdkYXRhJykuc3BsaXQoJz8nLCAyKTsKICAgICAgICAgICAgICAgIHN3ZiA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBvYmogPSBBYWsudW5zZXJpYWxpemUodmFsdWUpOwogICAgICAgICAgICAgIGlmIChvcHRzLnNldEZsYXNodmFycykgewogICAgICAgICAgICAgICAgb2JqID0gQWFrLnNldFByb3BlcnRpZXMob2JqLCBvcHRzLnNldEZsYXNodmFycyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChvcHRzLnVuc2V0Rmxhc2h2YXJzKSB7CiAgICAgICAgICAgICAgICBvYmogPSBBYWsudW5zZXRQcm9wZXJ0aWVzKG9iaiwgb3B0cy51bnNldEZsYXNodmFycyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhbHVlID0gQWFrLnNlcmlhbGl6ZShvYmopOwoKICAgICAgICAgICAgICBpZiAocGFyYW0pIHsKICAgICAgICAgICAgICAgIHBhcmFtLnZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzd2YpIHsKICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgnZGF0YScsIHN3ZiArICc/JyArIHZhbHVlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY2xvbmUuc2V0QXR0cmlidXRlKCdmbGFzaHZhcnMnLCB2YWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIHJlcGxhY2UKICAgICAgICAgICAgQWFrLmxvZyhzbywgY2xvbmUsIG9iaik7CiAgICAgICAgICAgIEFhay5yZXBsYWNlRWxlbWVudChzbywgY2xvbmUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBlbWJlZGRpbmcgOiBmdW5jdGlvbiAoaWQsIHNldHVwLCBhdHRyaWJ1dGVzLCBvcHRpb25zKSB7IAogICAgICAgIAogICAgICAgICAgdGhpcy5nZXRUYXJnZXROb2RlKGlkKTsKICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IEFhay5zZXRQcm9wZXJ0aWVzKHRoaXMuYXR0cmlidXRlcywgYXR0cmlidXRlcyB8fCB7fSk7CiAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBBYWsuc2V0UHJvcGVydGllcyh0aGlzLm9wdGlvbnMsIG9wdGlvbnMgfHwge30pOwoKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5zcmMgPSBzZXR1cC5zd2Y7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaWQgPSB0aGlzLmF0dHJpYnV0ZXMubmFtZSA9IEFhay5nZW5lcmF0ZUlEKCk7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaGVpZ2h0ID0gc2V0dXAuaGVpZ2h0IHx8IHRoaXMuYXR0cmlidXRlcy5oZWlnaHQ7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMud2lkdGggPSBzZXR1cC53aWR0aCB8fCB0aGlzLmF0dHJpYnV0ZXMud2lkdGg7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuZmxhc2h2YXJzID0gQWFrLnNlcmlhbGl6ZShzZXR1cCk7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBYWsudW5zZXRQcm9wZXJ0aWVzKHRoaXMuYXR0cmlidXRlcywgJ3N3ZicpOwoKICAgICAgICAgIHRoaXMuYnVpbGRpbmcoJ2VtYmVkJyk7CiAgICAgICAgfSwKICAgICAgICBqd3BsYXllciA6IGZ1bmN0aW9uIChpZCwgc2V0dXAsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHsKICAgICAgICAgIC8vIEp3UGxheWVyIDcgKGZsYXNoL2h0bWw1KQogICAgICAgICAgLy8gbm90ZTogcHJvYmxlbSB3aXRoIHNzbAogICAgICAgICAgLy8gc2V0dXA6IGh0dHA6Ly90aW55dXJsLmNvbS9oaHJnamFwLCBodHRwOi8vdGlueXVybC5jb20vZ3FzNDZ0bQogICAgICAgICAgLy8gYXBpOiBodHRwczovL2RldmVsb3Blci5qd3BsYXllci5jb20vanctcGxheWVyL2RvY3MvZGV2ZWxvcGVyLWd1aWRlL2FwaS9qYXZhc2NyaXB0X2FwaV9yZWZlcmVuY2UvCiAgICAgICAgICAvLyBobHM6IGh0dHA6Ly90aW55dXJsLmNvbS9weGw5c2NxCiAgICAgICAgICAvLyBobHMtdGVzdGVyOiBodHRwOi8vZGVtby5qd3BsYXllci5jb20vc3RyZWFtLXRlc3Rlci8KICAgICAgICAgIC8vIHJ0bXAtZGVtbzogaHR0cHM6Ly93d3cuc2NhbGVlbmdpbmUuY29tL2p3NgogICAgICAgICAgLy8gaWZyYW1lOiBodHRwOi8vdGlueXVybC5jb20vODZhZ2c2OAoKICAgICAgICAgIHRoaXMuZ2V0VGFyZ2V0Tm9kZShpZCk7CiAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBYWsuc2V0UHJvcGVydGllcyh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMgfHwge30pOwogICAgICAgICAgdGhpcy5vcHRpb25zID0gQWFrLnNldFByb3BlcnRpZXModGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTsKCiAgICAgICAgICB0aGlzLnNldHVwID0gc2V0dXA7CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNyb3NzU2V0dXAgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5zZXR1cCA9IHsKICAgICAgICAgICAgICBjb250cm9scyA6IHRydWUsCiAgICAgICAgICAgICAgZmlsZSA6IHNldHVwLnNvdXJjZSwKICAgICAgICAgICAgICBhYm91dHRleHQgOiBBYWsubmFtZSwKICAgICAgICAgICAgICBhYm91dGxpbmsgOiBBYWsuaG9tZVVSTCwKICAgICAgICAgICAgICB3aWR0aCA6IHNldHVwLndpZHRoIHx8IHRoaXMuYXR0cmlidXRlcy53aWR0aCwKICAgICAgICAgICAgICBoZWlnaHQgOiBzZXR1cC5oZWlnaHQgfHwgdGhpcy5hdHRyaWJ1dGVzLmhlaWdodCwKICAgICAgICAgICAgICBhdXRvc3RhcnQgOiBzZXR1cC5hdXRvcGxheSB8fCB0aGlzLmF1dG9wbGF5LAogICAgICAgICAgICAgIHByaW1hcnkgOiAnaHRtbDUnLAogICAgICAgICAgICAgIHByZWxvYWQgOiAnYXV0bycsCiAgICAgICAgICAgICAgc2tpbiA6IHsgLy8gU2V2ZW4gfCBTaXggfCBGaXZlIHwgR2xvdyB8IEJlZWxkZW4gfCBWYXBvciB8IEJla2xlIHwgUm91bmRzdGVyIHwgU3Rvcm10cm9vcGVyCiAgICAgICAgICAgICAgICBuYW1lIDogc2V0dXAuc2tpbiB8fCAic2l4IiAvLyBkZWZhdWx0IHNraW4gSldQNgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKFsnbXA0JywgJ3dlYm0nLCAnb2dnJywgJ29ndiddLmluZGV4T2Yoc2V0dXAudHlwZSkgPT09IC0xKSB7CiAgICAgICAgICAgICAgdGhpcy5zZXR1cC5wcmltYXJ5ID0gJ2ZsYXNoJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2V0dXAudHlwZSA9PT0gJ2hscycpIHsKICAgICAgICAgICAgICB0aGlzLnNldHVwLmhsc2h0bWwgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnNyY2RvYyA9ICc8aHRtbD48aGVhZD48c3R5bGUgdHlwZT0idGV4dC9jc3MiPkBmb250LWZhY2V7Zm9udC1mYW1pbHk6anctaWNvbnM7c3JjOnVybCgnICsgbG9jYXRpb24ucHJvdG9jb2wgKyAnc3NsLnAuandwY2RuLmNvbS9wbGF5ZXIvdi83LjQuMy9qdy1pY29ucy53b2ZmKSBmb3JtYXQoIndvZmYiKSx1cmwoJyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vc3NsLnAuandwY2RuLmNvbS9wbGF5ZXIvdi83LjQuMy9qdy1pY29ucy50dGYpIGZvcm1hdCgidHJ1ZXR5cGUiKTtmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9PC9zdHlsZT48c2NyaXB0IHNyYz0iJyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vY29udGVudC5qd3BsYXRmb3JtLmNvbS9saWJyYXJpZXMvVjZOZkV6VDcuanMiPjwvc2NyaXB0PjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+aHRtbCwgYm9keXtwYWRkaW5nOjA7IG1hcmdpbjowO308L3N0eWxlPjwvaGVhZD48Ym9keT48ZGl2IGlkPSJqdy1tb3ZpZSI+PC9kaXY+PHNjcmlwdD5qd3BsYXllcigianctbW92aWUiKS5zZXR1cCgnICsgSlNPTi5zdHJpbmdpZnkodGhpcy5zZXR1cCkgKyAnKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPic7CgogICAgICAgICAgdGhpcy5idWlsZGluZygnaWZyYW1lJyk7CiAgICAgICAgfSwKICAgICAgICB2aWRlb2pzIDogZnVuY3Rpb24gKGlkLCBzZXR1cCwgYXR0cmlidXRlcywgb3B0aW9ucykgeyAKICAgICAgICAgIC8vIFZpZGVvSnMgNSAoZmxhc2gvaHRtbDUpCiAgICAgICAgICAvLyBzZXR1cDogaHR0cDovL3Rpbnl1cmwuY29tL3BjZ3gyb2IKICAgICAgICAgIC8vIHBsYXliYWNrOiBodHRwOi8vdGlueXVybC5jb20vbnNjenRtbQogICAgICAgICAgLy8gZGVtbzogaHR0cDovL2pzZmlkZGxlLm5ldC9OOFpzNS8xOC8KICAgICAgICAgIC8vIHBsdWdpbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL3dpa2kvUGx1Z2lucwoKICAgICAgICAgIHRoaXMuZ2V0VGFyZ2V0Tm9kZShpZCk7CiAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBYWsuc2V0UHJvcGVydGllcyh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMgfHwge30pOwogICAgICAgICAgdGhpcy5vcHRpb25zID0gQWFrLnNldFByb3BlcnRpZXModGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTsKCiAgICAgICAgICB0aGlzLnNldHVwID0gc2V0dXA7CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNyb3NzU2V0dXAgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5zZXR1cCA9IHsKICAgICAgICAgICAgICBjb250cm9scyA6IHRydWUsCiAgICAgICAgICAgICAgcHJlbG9hZCA6ICdhdXRvJywKICAgICAgICAgICAgICB3aWR0aCA6IHNldHVwLndpZHRoIHx8IHRoaXMuYXR0cmlidXRlcy53aWR0aCwKICAgICAgICAgICAgICBoZWlnaHQgOiBzZXR1cC5oZWlnaHQgfHwgdGhpcy5hdHRyaWJ1dGVzLmhlaWdodCwKICAgICAgICAgICAgICB0ZWNoT3JkZXIgOiBbImh0bWw1IiwgImZsYXNoIl0sCiAgICAgICAgICAgICAgYXV0b3BsYXkgOiBzZXR1cC5hdXRvcGxheSB8fCB0aGlzLmF1dG9wbGF5LAogICAgICAgICAgICAgIHNvdXJjZXMgOiBbewogICAgICAgICAgICAgICAgICB0eXBlIDogdGhpcy5nZXRNaW1lVHlwZShzZXR1cC50eXBlKSwKICAgICAgICAgICAgICAgICAgc3JjIDogc2V0dXAuc291cmNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9OwogICAgICAgICAgICAvKiBkb24ndCB3b3JrIAogICAgICAgICAgICBpZiAoc2V0dXAudHlwZSA9PT0gJ2hscycpIHsKICAgICAgICAgICAgICB0ZWNoT3JkZXIgOiBbImZsYXNoIiwgImh0bWw1Il0sCiAgICAgICAgICAgICAgdGhpcy5zZXR1cC5mbGFzaCA9IHsKICAgICAgICAgICAgICAgIC8vc3dmIDogIi8vcmVla3NpdGUuY29tL3B1YmxpYy9zd2YvdmlkZW9qcy1mbGFzaGxzLnN3ZiIKICAgICAgICAgICAgICAgIHN3ZiA6ICdodHRwOi8vd3d3LmZsYXNobHMub3JnL3ZpZGVvanMvdmlkZW8tanMuc3dmJwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKi8KICAgICAgICAgIH0KCiAgICAgICAgICAvLyAKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5zcmNkb2MgPSAnPGh0bWw+PGhlYWQ+PGxpbmsgaHJlZj0iJyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3ZpZGVvLmpzLzUuMTAuNS9hbHQvdmlkZW8tanMtY2RuLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCI+PHNjcmlwdCBzcmM9IicgKyBsb2NhdGlvbi5wcm90b2NvbCArICcvL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy92aWRlby5qcy81LjEwLjUvdmlkZW8ubWluLmpzIj48L3NjcmlwdD48c2NyaXB0IHNyYz0iJyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3ZpZGVvanMtY29udHJpYi1obHMvMy4xLjAvdmlkZW9qcy1jb250cmliLWhscy5taW4uanMiPjwvc2NyaXB0PjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+aHRtbCwgYm9keXtwYWRkaW5nOjA7IG1hcmdpbjowO30udmpzLWRlZmF1bHQtc2tpbntjb2xvcjojZWVlfS52anMtZGVmYXVsdC1za2luIC52anMtcGxheS1wcm9ncmVzcywudmpzLWRlZmF1bHQtc2tpbiAudmpzLXZvbHVtZS1sZXZlbHtiYWNrZ3JvdW5kLWNvbG9yOiNlZWV9LnZqcy1kZWZhdWx0LXNraW4gLnZqcy1iaWctcGxheS1idXR0b24sLnZqcy1kZWZhdWx0LXNraW4gLnZqcy1jb250cm9sLWJhcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjIpfS52anMtZGVmYXVsdC1za2luIC52anMtc2xpZGVye2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMyl9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PHZpZGVvIGlkPSJ2anMtbW92aWUiIGNsYXNzPSJ2aWRlby1qcyB2anMtZGVmYXVsdC1za2luIHZqcy1iaWctcGxheS1jZW50ZXJlZCI+PC92aWRlbz48c2NyaXB0PnZpZGVvanMoInZqcy1tb3ZpZSIsICcgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnNldHVwKSArICcpPC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD4nOwoKICAgICAgICAgIHRoaXMuYnVpbGRpbmcoJ2lmcmFtZScpOwogICAgICAgIH0sCiAgICAgICAgZmxvd3BsYXllciA6IGZ1bmN0aW9uIChpZCwgc2V0dXAsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHsKICAgICAgICAgIC8vIEZsb3dQbGF5ZXIgNiAoZmxhc2gpCiAgICAgICAgICAvLyBub3RlOiBwcm9ibGVtIHdpdGggZmxhc2hwbGF5ZXIKICAgICAgICAgIC8vIHN1cHBvcnQ6IG1wNCwgZmx2LCBmNHYsIG00diwgbW92CiAgICAgICAgICAvLyBzZXR1cDogaHR0cHM6Ly9mbG93cGxheWVyLm9yZy9kb2NzL3NldHVwLmh0bWwKICAgICAgICAgIC8vIGFwaTogaHR0cHM6Ly9mbG93cGxheWVyLm9yZy9kb2NzL2FwaS5odG1sCiAgICAgICAgICAvLyBkZW1vOiBodHRwOi8vZGVtb3MuZmxvd3BsYXllci5vcmcvYmFzaWNzL2pzLXNldHVwLWF1dG9wbGF5Lmh0bWwKICAgICAgICAgIC8vIGhkczogaHR0cHM6Ly9mbG93cGxheWVyLmVsZWN0cm90ZXF1ZS5vcmcvaHR0cHN0cmVhbWluZy1oZHMvZnA2CiAgICAgICAgICAvLyBobHM6IGh0dHA6Ly9kZW1vcy5mbG93cGxheWVyLm9yZy9hcGkvaGxzanMuaHRtbAogICAgICAgICAgLy8gZmx2OiBodHRwOi8vZGVtb3MuZmxvd3BsYXllci5vcmcvYmFzaWNzL2Zsdi5odG1sCgogICAgICAgICAgdGhpcy5nZXRUYXJnZXROb2RlKGlkKTsKICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IEFhay5zZXRQcm9wZXJ0aWVzKHRoaXMuYXR0cmlidXRlcywgYXR0cmlidXRlcyB8fCB7fSk7CiAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBBYWsuc2V0UHJvcGVydGllcyh0aGlzLm9wdGlvbnMsIG9wdGlvbnMgfHwge30pOwoKICAgICAgICAgIHRoaXMuc2V0dXAgPSBzZXR1cDsKICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3Jvc3NTZXR1cCA9PT0gdHJ1ZSkgewogICAgICAgICAgICB0aGlzLnNldHVwID0gewogICAgICAgICAgICAgIHdpZHRoIDogc2V0dXAud2lkdGggfHwgdGhpcy5hdHRyaWJ1dGVzLndpZHRoLAogICAgICAgICAgICAgIGhlaWdodCA6IHNldHVwLmhlaWdodCB8fCB0aGlzLmF0dHJpYnV0ZXMuaGVpZ2h0LAogICAgICAgICAgICAgIGF1dG9wbGF5IDogc2V0dXAuYXV0b3BsYXkgfHwgdGhpcy5hdXRvcGxheSwKICAgICAgICAgICAgICBwcmVsb2FkIDogJ2F1dG8nCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChzZXR1cC50eXBlID09PSAnaGxzJykgewogICAgICAgICAgICAgIHRoaXMuc2V0dXAuc3dmID0gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy9yZWxlYXNlcy5mbG93cGxheWVyLm9yZy82LjAuNS9mbG93cGxheWVyaGxzLnN3Zic7CiAgICAgICAgICAgICAgdGhpcy5zZXR1cC5lbmdpbmUgPSAnaGxzanMnOwogICAgICAgICAgICB9IGVsc2UgaWYgKFsnbXA0JywgJ3dlYm0nLCAnb2dnJywgJ29ndiddLmluZGV4T2Yoc2V0dXAudHlwZSkgPT09IC0xKSB7CiAgICAgICAgICAgICAgdGhpcy5zZXR1cC5zd2YgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvL3JlbGVhc2VzLmZsb3dwbGF5ZXIub3JnLzYuMC41L2Zsb3dwbGF5ZXIuc3dmJzsKICAgICAgICAgICAgICB0aGlzLnNldHVwLmVuZ2luZSA9ICdmbGFzaCc7CiAgICAgICAgICAgICAgdGhpcy5zZXR1cC50eXBlID0gJ3ZpZGVvL2ZsYXNoJzsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnNldHVwLmNsaXAgPSB7CiAgICAgICAgICAgICAgc291cmNlcyA6IFt7CiAgICAgICAgICAgICAgICAgIHR5cGUgOiB0aGlzLmdldE1pbWVUeXBlKHRoaXMuc2V0dXAudHlwZSB8fCBzZXR1cC50eXBlKSwKICAgICAgICAgICAgICAgICAgc3JjIDogc2V0dXAuc291cmNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5zcmNkb2MgPSAnPGh0bWw+PGhlYWQ+PGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSInICsgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy9yZWxlYXNlcy5mbG93cGxheWVyLm9yZy82LjAuNS9za2luL2Z1bmN0aW9uYWwuY3NzIj48L3NjcmlwdD48c2NyaXB0IHNyYz0iJyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0xLjExLjIubWluLmpzIj48L3NjcmlwdD48c2NyaXB0IHNyYz0iJyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vcmVsZWFzZXMuZmxvd3BsYXllci5vcmcvNi4wLjUvZmxvd3BsYXllci5taW4uanMiPjwvc2NyaXB0PjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+aHRtbCwgYm9keXtwYWRkaW5nOjA7IG1hcmdpbjowO308L3N0eWxlPjwvaGVhZD48Ym9keT48ZGl2IGlkPSJmcC1tb3ZpZSI+PC9kaXY+PHNjcmlwdD5mbG93cGxheWVyKCIjZnAtbW92aWUiLCAnICsgSlNPTi5zdHJpbmdpZnkodGhpcy5zZXR1cCkgKyAnKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPic7CgogICAgICAgICAgdGhpcy5idWlsZGluZygnaWZyYW1lJyk7CiAgICAgICAgfSwKICAgICAgICBncmluZHBsYXllciA6IGZ1bmN0aW9uIChpZCwgc2V0dXAsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHsKICAgICAgICAgIC8vIEdyaW5kUGxheWVyIDEgKGZsYXNoKQogICAgICAgICAgLy8gc2V0dXA6IGh0dHA6Ly9vc21maGxzLmt1dHUucnUvZG9jcy9ncmluZC8KICAgICAgICAgIC8vIHN1cHBvcnQ6IGhscywgcnRtcAoKICAgICAgICAgIHRoaXMuZ2V0VGFyZ2V0Tm9kZShpZCk7CiAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBYWsuc2V0UHJvcGVydGllcyh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMgfHwge30pOwogICAgICAgICAgdGhpcy5vcHRpb25zID0gQWFrLnNldFByb3BlcnRpZXModGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTsKCiAgICAgICAgICB0aGlzLnNldHVwID0gc2V0dXA7CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNyb3NzU2V0dXAgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5zZXR1cCA9IHsKICAgICAgICAgICAgICBzcmMgOiBzZXR1cC5zb3VyY2UsCiAgICAgICAgICAgICAgc3RyZWFtVHlwZSA6ICJsaXZlIiwKICAgICAgICAgICAgICBzY2FsZU1vZGUgOiAibGV0dGVyYm94IiwKICAgICAgICAgICAgICBhdXRvUGxheSA6IHNldHVwLmF1dG9wbGF5IHx8IHRoaXMuYXV0b3BsYXkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHNldHVwLnR5cGUgPT09ICdobHMnKSB7CiAgICAgICAgICAgICAgdGhpcy5zZXR1cC5wbHVnaW5faGxzID0gIi8vcmVla3NpdGUuY29tL3B1YmxpYy9zd2YvZmxhc2hsc09TTUYuc3dmIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2V0dXAucHJveHkgPT09IHRydWUpIHsKICAgICAgICAgICAgICB0aGlzLnNldHVwLnNyYyA9ICcvL3d3dy5kaWFuc2hpYm8uY29tL2ZldGNoLnBocC8nICsgc2V0dXAuc291cmNlLnN1YnN0cmluZyhzZXR1cC5zb3VyY2UuaW5kZXhPZignLy8nKSArIDIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnNyYyA9IHNldHVwLnN3ZiB8fCB0aGlzLmF0dHJpYnV0ZXMuc3JjIHx8ICIvL3JlZWtzaXRlLmNvbS9wdWJsaWMvc3dmL0dyaW5kUGxheWVyLnN3ZiI7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaGVpZ2h0ID0gc2V0dXAuaGVpZ2h0IHx8IHRoaXMuYXR0cmlidXRlcy5oZWlnaHQ7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMud2lkdGggPSBzZXR1cC53aWR0aCB8fCB0aGlzLmF0dHJpYnV0ZXMud2lkdGg7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuZmxhc2h2YXJzID0gQWFrLnNlcmlhbGl6ZSh0aGlzLnNldHVwKTsKCiAgICAgICAgICB0aGlzLmJ1aWxkaW5nKCdlbWJlZCcpOwogICAgICAgIH0sCiAgICAgICAgdmxjIDogZnVuY3Rpb24gKGlkLCBzZXR1cCwgYXR0cmlidXRlcywgb3B0aW9ucykgewogICAgICAgICAgLy8gVkxDIFdlYiBQbHVnaW4gKHBsdWdpbikKICAgICAgICAgIC8vIGRvYzogaHR0cDovL3Rpbnl1cmwuY29tL29tbHpwMzkKICAgICAgICAgIC8vIHBsdWdpbnM6IGFib3V0OnBsdWdpbnMKICAgICAgICAgIC8vIGNocm9tZTovL2ZsYWdzLyNlbmFibGUtbnBhcGkKICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmNocm9taXVtLm9yZy9kZXZlbG9wZXJzL25wYXBpLWRlcHJlY2F0aW9uCiAgICAgICAgICAvLyBJbiBTZXB0ZW1iZXIgMjAxNSAoQ2hyb21lIDQ1KSB3ZSB3aWxsIHJlbW92ZSB0aGUgb3ZlcnJpZGUgYW5kIE5QQVBJIHN1cHBvcnQgd2lsbCBiZSBwZXJtYW5lbnRseSByZW1vdmVkIGZyb20gQ2hyb21lLiBJbnN0YWxsZWQgZXh0ZW5zaW9ucyB0aGF0IHJlcXVpcmUgTlBBUEkgcGx1Z2lucyB3aWxsIG5vIGxvbmdlciBiZSBhYmxlIHRvIGxvYWQgdGhvc2UgcGx1Z2lucy4KCiAgICAgICAgICB0aGlzLm5hbWUgPSAndmxjJzsKICAgICAgICAgIHRoaXMuZ2V0VGFyZ2V0Tm9kZShpZCk7CiAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBYWsuc2V0UHJvcGVydGllcyh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMgfHwge30pOwogICAgICAgICAgdGhpcy5vcHRpb25zID0gQWFrLnNldFByb3BlcnRpZXModGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTsKCiAgICAgICAgICB0aGlzLnNldHVwID0gc2V0dXA7CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNyb3NzU2V0dXAgPT09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnNyYyA9IHNldHVwLnNvdXJjZTsKICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmhlaWdodCA9IHNldHVwLmhlaWdodCB8fCB0aGlzLmF0dHJpYnV0ZXMuaGVpZ2h0OwogICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMud2lkdGggPSBzZXR1cC53aWR0aCB8fCB0aGlzLmF0dHJpYnV0ZXMud2lkdGg7CiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5jb250cm9scyA9IHRydWU7CiAgICAgICAgICAgIGlmIChzZXR1cC5hdXRvcGxheSB8fCB0aGlzLmF1dG9wbGF5KSB7CiAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF1dG9wbGF5ID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy50eXBlID0gImFwcGxpY2F0aW9uL3gtdmxjLXBsdWdpbiI7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMucGx1Z2luc3BhZ2UgPSAiaHR0cDovL3d3dy52aWRlb2xhbi5vcmciOwogICAgICAgICAgdGhpcy5idWlsZGluZygnZW1iZWQnKTsKICAgICAgICB9LAogICAgICAgIGh0bWw1IDogZnVuY3Rpb24gKGlkLCBzZXR1cCwgYXR0cmlidXRlcywgb3B0aW9ucykgeyAKICAgICAgICAgIC8vIFZpZGVvIFRhZyAoaHRtbDUpCiAgICAgICAgICAvLyBiYXNpY3M6IGh0dHBzOi8vaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL3ZpZGVvL2Jhc2ljcy8KICAgICAgICAgIC8vIHRhZzogaHR0cDovL3d3dy53M3NjaG9vbHMuY29tL3RhZ3MvdGFnX3ZpZGVvLmFzcAogICAgICAgICAgLy8gc3VwcG9ydDogbXA0LCB3ZWJtLCBvZ2cKICAgICAgICAgIC8vIHRlc3Q6IGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvaHRtbDUvdGVzdHMvdmlkZW8uaHRtbAoKICAgICAgICAgIHRoaXMub3B0aW9ucyA9IEFhay5zZXRQcm9wZXJ0aWVzKHRoaXMub3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7CgogICAgICAgICAgdGhpcy5nZXRUYXJnZXROb2RlKGlkKTsKICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IEFhay5zZXRQcm9wZXJ0aWVzKHt9LCBzZXR1cCB8fCB7fSk7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuc3JjID0gc2V0dXAuc291cmNlOwogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmlkID0gdGhpcy5hdHRyaWJ1dGVzLm5hbWUgPSBBYWsuZ2VuZXJhdGVJRCgpOwogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmhlaWdodCA9IHRoaXMuYXR0cmlidXRlcy5oZWlnaHQgfHwgdGhpcy50YXJnZXQubm9kZS5jbGllbnRIZWlnaHQgfHwgIjEwMCUiOwogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLndpZHRoID0gdGhpcy5hdHRyaWJ1dGVzLndpZHRoIHx8IHRoaXMudGFyZ2V0Lm5vZGUuY2xpZW50V2lkdGggfHwgIjEwMCUiOwogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnR5cGUgPSB0aGlzLmdldE1pbWVUeXBlKHRoaXMuYXR0cmlidXRlcy50eXBlKTsKICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5jb250cm9scyA9ICdjb250cm9scyc7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMucHJlbG9hZCA9ICdub25lJzsKICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuYXV0b3BsYXkgfHwgdGhpcy5hdXRvcGxheSkgewogICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYXV0b3BsYXkgPSAnYXV0b3BsYXknOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOyBtYXJnaW46MCBhdXRvOyc7CiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBYWsudW5zZXRQcm9wZXJ0aWVzKHRoaXMuYXR0cmlidXRlcywgJ3NvdXJjZScpOwoKICAgICAgICAgIHRoaXMuYnVpbGRpbmcoJ3ZpZGVvJyk7CiAgICAgICAgfQogICAgICB9OwogICAgICAKICAgICAgcmV0dXJuIG5ldyBQbGF5ZXIoKTsKICAgIH0sCiAgICBydWxlcyA6IHsKICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgLy8gQW50aS1BZGJsb2NrIEtpbGxlcgogICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICBzZXR0aW5ncyA6IHsKICAgICAgICBob3N0IDogWydsb2NhbGhvc3QnLCAncmVlay5naXRodWIuaW8nLCAncmVla3NpdGUuY29tJ10sCiAgICAgICAgb25FbmQgOiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgaWYgKC9cL2FudGktYWRibG9jay1raWxsZXIoLXBhZ2VzKT9cLyQvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpKSB7CiAgICAgICAgICAgIHZhciBzZXR0aW5nc0JveCA9IEFhay5nZXRFbGVtZW50KCcjYWFrLXNldHRpbmdzLWJveCcpOwogICAgICAgICAgICB2YXIgc2V0dGluZ3NOb3RpY2UgPSBBYWsuZ2V0RWxlbWVudCgnI2Fhay1zZXR0aW5ncy1ub3RpY2UnKTsKCiAgICAgICAgICAgIGlmICghQWFrLnVzZUdNKSB7CiAgICAgICAgICAgICAgc2V0dGluZ3NOb3RpY2UucXVlcnlTZWxlY3RvcignZGl2JykuaW5uZXJIVE1MID0gJ0luIG5hdGl2ZSBtb2RlLCB5b3UgbXVzdCBlZGl0IHRoZSBvcHRpb25zIG1hbnVhbGx5OiA8YSBocmVmPSInICsgQWFrLm5hdGl2ZVVSTCArICciPlNlZTwvYT4nOwogICAgICAgICAgICB9IGVsc2UgaWYgKHNldHRpbmdzQm94ICYmIHNldHRpbmdzTm90aWNlKSB7CiAgICAgICAgICAgICAgc2V0dGluZ3NOb3RpY2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICBzZXR0aW5nc0JveC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICBBYWsuaW5mbygnR00gc3RvcmFnZTonLCBBYWsuZ2V0VmFsdWUoKSk7CiAgICAgICAgICAgICAgQWFrLmluZm8oJ0dNIG9wdGlvbnM6JywgQWFrLm9wdHMpOwogICAgICAgICAgICAgIEFhay5pbmZvKCdHTSBhcGk6JywgQWFrLnVzZUdNICYmIEFhay5hcGlHTSgpKTsKCiAgICAgICAgICAgICAgLy8gdXNlciBjb25maWcKICAgICAgICAgICAgICBBYWsuY3JlYXRlRWxlbWVudCh7CiAgICAgICAgICAgICAgICB0YWcgOiAnZGl2JywKICAgICAgICAgICAgICAgIGh0bWwgOiAnVmVyc2lvbjogJyArIEFhay5nZXRWZXJzaW9uKCkgKyAnIDxicj5BYWtTY3JpcHQ6IHRydWUgPGJyPkFha0xpc3Q6ICcgKyAoIUFhay5nZXRFbGVtZW50KCcjazJVdzdpc0hyTW01SlhQMVZ3ZHhjNTY3WktjMWFaNEknKSkgKyAnIDxicj5Ccm93c2VyOiAnICsgQWFrLmdldEJyb3dzZXIoKSArICcgPGJyPlNjcmlwdE1hbmFnZXI6ICcgKyBBYWsuZ2V0U2NyaXB0TWFuYWdlcigpLAogICAgICAgICAgICAgICAgYXBwZW5kIDogJyNhYWstc2V0dGluZ3MtY29uZmlnJwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAvLyBjcmVhdGUgb3B0aW9ucyAKICAgICAgICAgICAgICBmb3IgKHZhciBvcHROYW1lIGluIEFhay5vcHRpb25zKSB7CiAgICAgICAgICAgICAgICBpZiAoQWFrLm9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0TmFtZSkpIHsKICAgICAgICAgICAgICAgICAgdmFyIG9wdCA9IEFhay5vcHRpb25zW29wdE5hbWVdOwogICAgICAgICAgICAgICAgICB2YXIgY2hlY2tlZCA9IEFhay5vcHRzW29wdE5hbWVdID09PSB0cnVlID8gImNoZWNrZWQiIDogJyc7CiAgICAgICAgICAgICAgICAgIEFhay5jcmVhdGVFbGVtZW50KHsKICAgICAgICAgICAgICAgICAgICB0YWcgOiAnZGl2JywKICAgICAgICAgICAgICAgICAgICBodG1sIDogJzxpbnB1dCBpZD0iJyArIG9wdE5hbWUgKyAnIiBjbGFzcz0iY3NzLWNoZWNrYm94IiAnICsgY2hlY2tlZCArICcgdHlwZT0iJyArIG9wdC50eXBlICsgJyIvPjxsYWJlbCBmb3I9IicgKyBvcHROYW1lICsgJyIgdGl0bGU9IicgKyBvcHQuaW5mbyArICciIGNsYXNzPSJjc3MtbGFiZWwiPicgKyBvcHQubGFiZWwgKyAnPC9sYWJlbD4nLAogICAgICAgICAgICAgICAgICAgIGFwcGVuZCA6ICcjYWFrLXNldHRpbmdzLScgKyBvcHQuZ3JvdXAKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvLyBzYXZlIG9wdGlvbnMgCiAgICAgICAgICAgICAgQWFrLm9uRXZlbnQoQWFrLmdldEVsZW1lbnQoIiNhYWstc2V0dGluZ3Mtc2F2ZSIpLCAiY2xpY2siLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY3NzLWNoZWNrYm94Jyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZWxlbXNbaV07CiAgICAgICAgICAgICAgICAgIGlmIChlbGVtLmNoZWNrZWQpIHsKICAgICAgICAgICAgICAgICAgICBBYWsuc2V0VmFsdWUoZWxlbS5pZCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgQWFrLnNldFZhbHVlKGVsZW0uaWQsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2luZG93LmFsZXJ0KCdTYXZlZCAhJyk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIC8vIENsZWFyIEdNIHN0b3JhZ2UKICAgICAgICAgICAgICBBYWsuYWRkQ29tbWFuZHMoewogICAgICAgICAgICAgICAgY2FwdGlvbiA6ICdDbGVhciBHTSBzdG9yYWdlJywKICAgICAgICAgICAgICAgIGV4ZWN1dGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIEFhay5kZWxldGVWYWx1ZSgpOwogICAgICAgICAgICAgICAgICB3aW5kb3cuYWxlcnQoJ0NsZWFyZWQgIScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB1c2Vyc2NyaXB0c19kb21haW5zIDogeyAvLyBSZWRpcmVjdCB0byBHaXRodWIKICAgICAgICBob3N0IDogWyd1c2Vyc2NyaXB0cy5vcmcnLCAndXNlcnNjcmlwdHMub3JnOjgwODAnLCAndXNlcnNjcmlwdHMtbWlycm9yLm9yZyddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoLzE1NTg0MCQvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpKSB7CiAgICAgICAgICAgIEFhay5nbyhBYWsuaG9tZVVSTCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBvcGVudXNlcmpzX29yZyA6IHsKICAgICAgICBob3N0IDogWydvcGVudXNlcmpzLm9yZyddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBlbGVtZW50ID0gQWFrLmdldEVsZW1lbnQoJ2FbaHJlZiQ9Ii9pc3N1ZXMiXScpOwogICAgICAgICAgaWYgKC9BbnRpLUFkYmxvY2tfS2lsbGVyX1JlZWsvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpICYmIGVsZW1lbnQpIHsKICAgICAgICAgICAgQWFrLmNvbmZpcm1SZXBvcnQoZWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBncmVhc3lmb3JrX29yZyA6IHsKICAgICAgICBob3N0IDogWydncmVhc3lmb3JrLm9yZyddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBlbGVtZW50ID0gQWFrLmdldEVsZW1lbnQoJ2FbaHJlZiQ9Ii9mZWVkYmFjayJdJyk7CiAgICAgICAgICBpZiAoLy1hbnRpLWFkYmxvY2sta2lsbGVyLXJlZWsvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpICYmIGVsZW1lbnQpIHsKICAgICAgICAgICAgQWFrLmNvbmZpcm1SZXBvcnQoZWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBtb25rZXlndXRzX2NvbSA6IHsKICAgICAgICBob3N0IDogWydtb25rZXlndXRzLmNvbSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBlbGVtZW50ID0gQWFrLmdldEVsZW1lbnQoJ2FbaHJlZio9ImNvZGUucGhwP25hdj1mb3J1bSJdJyk7CiAgICAgICAgICBpZiAoL21vbmtleWd1dHMuY29tXC9jb2RlLnBocFw/aWQ9MzUxLy50ZXN0KGxvY2F0aW9uLmhyZWYpICYmIGVsZW1lbnQpIHsKICAgICAgICAgICAgQWFrLmNvbmZpcm1SZXBvcnQoZWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAvLyBTcGVjaWZpYwogICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICBibG9nc3BvdCA6IHsKICAgICAgICAvLyBObyBDb3VudHJ5IFJlZGlyZWN0IChOQ1IpCiAgICAgICAgLy8gUHJldmVudCBCbG9nZ2VyIGZyb20gUmVkaXJlY3RpbmcgdG8gQ291bnRyeS1TcGVjaWZpYyBEb21haW5zCiAgICAgICAgLy8gZG9jOiBodHRwOi8vdGlueXVybC5jb20vN3JtMzRqbwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2ZyL2ZvcnVtL2Rpc2N1c3Npb24vNTk1MwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy80OTAKICAgICAgICAvLyB0ZXN0OiBodHRwOi8vdGlueXVybC5jb20vbm9tY3hrYwogICAgICAgIGhvc3QgOiBbJy5ibG9nc3BvdC4nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKEFhay5pc1RvcGZyYW1lKSB7IC8vIGZpeCByZWRpcmV0aW9uIGxvb3AKICAgICAgICAgICAgdmFyIGJsb2cgPSBsb2NhdGlvbi5ob3N0LnJlcGxhY2UoJ3d3dy4nLCAnJykuc3BsaXQoIi4iKTsKICAgICAgICAgICAgaWYgKGJsb2dbYmxvZy5sZW5ndGggLSAxXSAhPSAiY29tIikgewogICAgICAgICAgICAgIHZhciBwYXRoID0gbG9jYXRpb24uaHJlZi5zcGxpdCgiLyIpLnNsaWNlKDMpLmpvaW4oJy8nKTsKICAgICAgICAgICAgICBBYWsuZ28oImh0dHA6Ly8iICsgYmxvZ1swXSArICIuYmxvZ3Nwb3QuY29tL25jci8iICsgcGF0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJsb2dzcG90X2tub3dsZXQzMzg5IDogewogICAgICAgIC8vIG5vdGU6IGFsc28gYWRkZWQgYWJwIHJ1bGUKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODMKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vQTNtQ1hRNWkKICAgICAgICBob3N0IDogWydrbm93bGV0MzM4OS5ibG9nc3BvdC4nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldExvY2FsKCdub2FkJywgZmFsc2UpOwogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjZ0FkcyB7IGhlaWdodDogMTdweDsgfSAjZ0FkMiB7IGhlaWdodDogMTdweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdXB0b2JveF91cHRvc3RyZWFtIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8zNTEKICAgICAgICBob3N0IDogWyd1cHRvYm94LmNvbScsICd1cHRvc3RyZWFtLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBPbGQgc29sdXRpb24gW2RlcHJlY2F0ZWRdCiAgICAgICAgICB2YXIgaWQgPSBsb2NhdGlvbi5wYXRobmFtZS5tYXRjaCgvWzAtOWEtel17MTJ9Lyk7CiAgICAgICAgICBpZiAoaWQgIT09IG51bGwpIHsKICAgICAgICAgICAgQWFrLmFkZFN0eWxlKCIjIiArIGlkWzBdICsgIiB7IGhlaWdodDogMTJweDsgfSIpOwogICAgICAgICAgfQogICAgICAgICAgLy8gTmV3IDEyLjA1LjIwMTQKICAgICAgICAgIC8vICsgYWJwIHJ1bGUgKGFsdGVybmF0aXZlIHNvbHV0aW9uKQogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjYWRibG9ja3RyYXAgeyBoZWlnaHQ6IDEycHg7IH0iKTsKICAgICAgICB9LAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIHJlbW92ZSBhZHMKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCcqW3NyY149Imh0dHA6Ly9hZHMudXB0b2JveC5jb20vIl0sKltocmVmXj0iaHR0cDovL2Fkcy51cHRvYm94LmNvbS8iXScpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYW5pc3Vic2lhX2NvbSA6IHsKICAgICAgICBob3N0IDogWydhbmlzdWJzaWEuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vICsgYWJwIHJ1bGUgI0AjLmFkc2FudGlsb2sKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmFkc2FudGlsb2sgeyBoZWlnaHQ6IDVweDsgfSIpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmpBbnRpQmxvY2sgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIEFhay51dy5DZWtCbG9rID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBmcmVlZ2FtZXNlcnZlcmhvc3RfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNTEyCiAgICAgICAgaG9zdCA6IFsnZnJlZWdhbWVzZXJ2ZXJob3N0LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNmYWIxMyB7IGhlaWdodDogMTFweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZWxhaG1hZF9jb20gOiB7CiAgICAgICAgaG9zdCA6IFsnZWxhaG1hZC5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjYWRibG9jayB7IGhlaWdodDogMXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBtcnR6Y21wM19uZXQgOiB7CiAgICAgICAgaG9zdCA6IFsnbXJ0emNtcDMubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLnJ0bV9hZCB7IGhlaWdodDogMXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBoZWlnaHRfbXlUZXN0QWQgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEyNDEKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvOTgzCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI5MQogICAgICAgIGhvc3QgOiBbJ2JrbmltZS5jb20nLCAnZ280dXAuY29tJywgJ2RlYnJpZG8uY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLm15VGVzdEFkIHsgaGVpZ2h0OiAxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlYnJpZGZhc3RfbmV0d29yayA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9lbi9mb3J1bS9kaXNjdXNzaW9uLzk0MDYKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9lbi9mb3J1bS9kaXNjdXNzaW9uLzcwMTMKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTI3MgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy83NjkKICAgICAgICBob3N0IDogWydkZWJyaWRmYXN0LmNvbScsICdnZXRkZWJyaWQuY29tJywgJ2RlYnJpZC51cycsICdsZWVjaGVyLnVzJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLm15VGVzdEFkLCAubXkyNEFkLCAubmFiaWwgeyBoZWlnaHQ6IDFweDsgfSIpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpbXBsZUFkJykuaW5uZXJIVE1MID0gJzxwIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij5kZWJyaWRmYXN0LmNvbTwvcD4nOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYmdfZ2xlZGFpX3R2IDogewogICAgICAgIGhvc3QgOiBbJ2JnLWdsZWRhaS50diddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5teUFkIHsgaGVpZ2h0OiAxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHRoZXBjc3B5X2NvbSA6IHsgLy8gaHR0cDovL3RoZXBjc3B5LmNvbS9yZWFkL2hvd190b19ibG9ja19hZGJsb2NrLwogICAgICAgIGhvc3QgOiBbJ3RoZXBjc3B5LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5teVRlc3RBZCB7IGhlaWdodDogMXB4OyB9Iik7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5ibG9ja2VkIHsgZGlzcGxheTogbm9uZTsgfSIpOwogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJy5ibG9ja2VkJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICB2Z19lMjRfbm8gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI5MgogICAgICAgIGhvc3QgOiBbJ3ZnLm5vJywgJ2UyNC5ubyddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBBZGQgdGhpcyBydWxlLCBiZWNhdXNlIEVhc3lMaXN0IGFsbG93IGFsbCBoaWRkZW4gZWxlbWVudHMuCiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5hZCB7IGRpc3BsYXk6IG5vbmU7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGF1dG9tb2JpbGVfc3BvcnRpdmVfY29tIDogewogICAgICAgIGhvc3QgOiBbJ2F1dG9tb2JpbGUtc3BvcnRpdmUuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLm15VGVzdEFkIHsgaGVpZ2h0OiA1MXB4OyBkaXNwbGF5OiBub25lOyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBzbnN3X3VzIDogewogICAgICAgIGhvc3QgOiBbJ3Nuc3cudXMnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjYWRfMSB7IGhlaWdodDogMXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICB1cmxjaGVja2VyX25ldCA6IHsKICAgICAgICBob3N0IDogWyd1cmxjaGVja2VyLm5ldCddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNhZGNoZWNrZXIgeyBoZWlnaHQ6IDIwcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHNraXBsaW1pdGVfdHYgOiB7CiAgICAgICAgaG9zdCA6IFsnc2tpcGxpbWl0ZS50diddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoImRpdi5hZGR0aGlzX25hdGl2ZV90b29sYm94ICsgZGl2W2lkXSB7IGhlaWdodDogMTJweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmlsZWNvcmVfY29fbnogOiB7CiAgICAgICAgaG9zdCA6IFsnZmlsZWNvcmUuY28ubnonXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIuYWRzZW5zZSB7IGhlaWdodDogNXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICB0aG9tYXNfbl9ydXRoX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTExMQogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9mdTd2a1VBMQogICAgICAgIGhvc3QgOiBbJ3Rob21hcy1uLXJ1dGguY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLkdvb2dsZSB7IGhlaWdodDogNXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBpbnRlcmZhbnNfb3JnIDogewogICAgICAgIC8vIHRlc3Q6IGh0dHA6Ly93d3cuaW50ZXJmYW5zLm9yZy9mb3J1bS8KICAgICAgICBob3N0IDogWydpbnRlcmZhbnMub3JnJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmFkX2dsb2JhbF9oZWFkZXIgeyBoZWlnaHQ6IDFweDsgZGlzcGxheTogbm9uZTsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbWF4ZGVicmlkZXVyX2NvbSA6IHsKICAgICAgICBob3N0IDogWydtYXhkZWJyaWRldXIuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmNsZWFyICsgZGl2W2lkXSB7IGhlaWdodDogMTJweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdG9wem9uZV9pdCA6IHsKICAgICAgICBob3N0IDogWyd0b3B6b25lLmx0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmZvcnVtQWQgeyBoZWlnaHQ6IDFweDsgZGlzcGxheTogbm9uZTsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbmFuYTEwX2NvX2lsIDogewogICAgICAgIGhvc3QgOiBbJy5uYW5hMTAuJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2FkdmVydC10cmFja2VyIHsgaGVpZ2h0OiAxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHBsZWpfdHYgOiB7CiAgICAgICAgaG9zdCA6IFsncGxlai50diddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5hZHZlcnRfYm94IHsgaGVpZ2h0OiAxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG1hbmdhbWludF9jb20gOiB7CiAgICAgICAgLy8gbm90ZTogYWRkZWQgcnVsZSB0byBhbGxvdyAiLmFkNzI4IgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2lkL2ZvcnVtL2Rpc2N1c3Npb24vODUyNAogICAgICAgIGhvc3QgOiBbJ21hbmdhbWludC5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIuYWQ3MjggeyBoZWlnaHQ6IDMxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlYnJpZGV1cnN0cmVhbV9mciA6IHsKICAgICAgICBob3N0IDogWydkZWJyaWRldXJzdHJlYW0uZnInXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjY29udGVudCBkaXZbaWRdW2FsaWduPWNlbnRlcl0geyBoZWlnaHQ6IDEycHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHByZWVtbGlua3NfY29tIDogewogICAgICAgIGhvc3QgOiBbJ3ByZWVtbGlua3MuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2RpdmFkcyB7IGhlaWdodDogMXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBoZW50YWlfdG8gOiB7CiAgICAgICAgaG9zdCA6IFsnaGVudGFpLnRvJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2hlbnRhaXRvMTIzIHsgaGVpZ2h0OiAxMXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBwcm90b3R1cmtfY29tIDogewogICAgICAgIGhvc3QgOiBbJ3Byb3RvdHVyay5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjcmVrbGFtIHsgaGVpZ2h0OiAxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG11ZmFfZGUgOiB7CiAgICAgICAgaG9zdCA6IFsnbXVmYS5kZSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNsZWFkZXJib2FyZCB7IGhlaWdodDogNXB4OyB9Iik7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNsYXJnZS1yZWN0YW5nbGUgeyBoZWlnaHQ6IDVweDsgfSIpOwogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjYWQtaGVhZGVyLTQ2OHg2MCB7IGhlaWdodDogNXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICB3YXRjaGFyYWJfY29tIDogewogICAgICAgIGhvc3QgOiBbJ3dhdGNoYXJhYi5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gKyBhZHAgcnVsZSB3YXRjaGFyYWIuY29tI0AjI2FkYmxvY2sKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2FkYmxvY2sgeyBoZWlnaHQ6IDVweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZnJlZWRvbWlwX2NvbSA6IHsKICAgICAgICBob3N0IDogWydmcmVlZG9tLWlwLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5wdWJfdmVydGljYWwgaW5zLCAucHViX3ZlcnRpY2FsIGRpdiB7IGhlaWdodDogMTFweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgd2FrYW5pbV90diA6IHsKICAgICAgICBob3N0IDogWyd3YWthbmltLnR2J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2RldGVjdG9yIHsgZGlzcGxheTogbm9uZTsgfSIpOwogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjbm9wdWIgeyBkaXNwbGF5OiBibG9jazsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgc2ltcGx5X2RlYnJpZF9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzMzMgogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9iN01BWVhzNAogICAgICAgIGhvc3QgOiBbJ3NpbXBseS1kZWJyaWQuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5hZHNieWdvb2dsZSA9IHt9OwogICAgICAgICAgQWFrLnV3LmFkc2J5Z29vZ2xlLmxvYWRlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9LAogICAgICBtYW5nYTlfY29tIDogewogICAgICAgIGhvc3QgOiBbJ21hbmdhOS5jb20nLCAnbWFuZ2FiZWUuY28nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIuYWRibG9jayB7IGhlaWdodDogMzFweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgb25lbWFuZ2EyX2NvbSA6IHsKICAgICAgICBob3N0IDogWydvbmVtYW5nYTIuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmFmc19hZHMgeyBoZWlnaHQ6IDVweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbWFuZ2FiaXJkX2NvbSA6IHsKICAgICAgICBob3N0IDogWydtYW5nYWJpcmQuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmFmc19hZHMgeyBoZWlnaHQ6IDVweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAga29kaWxpdmVfZXUgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE1MjgKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vWnh2WEtxdGMKICAgICAgICBob3N0IDogWydrb2RpbGl2ZS5ldSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5BZCB7IGhlaWdodDogNXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBiYWNraW5fbmV0IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWJhY2tpbi5uZXQKICAgICAgICBob3N0IDogWydiYWNraW4ubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2RpdmFkIHsgaGVpZ2h0OiAzMXB4OyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBtb2JpbGVfdHJhY2tlcl9mcmVlX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTA4MgogICAgICAgIGhvc3QgOiBbJ21vYmlsZS10cmFja2VyLWZyZWUuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI215QWRzIHsgaGVpZ2h0OiAxcHg7IH0iKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHdvcmt1cGxvYWRfY29tIDogewogICAgICAgIC8vIG5vdGU6IG9iZnVzY2F0ZWQKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTMzNAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMjkwCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL0NQemQyU3d4CiAgICAgICAgaG9zdCA6IFsnd29ya3VwbG9hZC5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLmFkQmxvY2ssIC5hZHNieWdvb2dsZSwgI3NhZCB7IGhlaWdodDogMTFweDsgfSIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdG9kYXlfaW4gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9aW50b2RheS5pbgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWJ1c2luZXNzdG9kYXkuaW4KICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vZ3o1MzlHN20KICAgICAgICBob3N0IDogWyJpbnRvZGF5LmluIiwgImJ1c2luZXNzdG9kYXkuaW4iXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24oKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoJyNhZGJvY2tlcl9hbHQgeyBkaXNwbGF5OiBub25lOyB9Jyk7CiAgICAgICAgICBBYWsudXcub3BlblBvcHVwID0gZnVuY3Rpb24oKXt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgamNfbXBfY29tIDogewogICAgICAgIC8vIGJ5OiBHaXdheXVtZQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNTk3CiAgICAgICAgaG9zdCA6IFsiamMtbXAuY29tIl0sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCcuYWRzZW5zZSB7d2lkdGg6IDFweDsgaGVpZ2h0OiAxcHg7IHZpc2liaWxpdHk6IGhpZGRlbjsgZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTt9Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBtYXJpYWdlX2ZyYW5jb19tYXJvY2Fpbl9uZXQgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9bWFyaWFnZS1mcmFuY28tbWFyb2NhaW4ubmV0CiAgICAgICAgaG9zdCA6IFsibWFyaWFnZS1mcmFuY28tbWFyb2NhaW4ubmV0Il0sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCcjbXlfYWRfZGl2IHtoZWlnaHQ6IDFweDt9Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBoYXBweV9oYWNrX3J1IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWhhcHB5LWhhY2sucnUKICAgICAgICBob3N0IDogWydoYXBweS1oYWNrLnJ1J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2Jsb2NrYmxvY2tGNCB7dmlzaWJpbGl0eTppbnZpc2libGU7ZGlzcGxheTpub25lO30gI2Jsb2NrYmxvY2tGNCB0ZCB7dmlzaWJpbGl0eTppbnZpc2libGU7ZGlzcGxheTpub25lO30gI2Jsb2NrYmxvY2tGNCB0ZCBwIHt2aXNpYmlsaXR5OmludmlzaWJsZTtkaXNwbGF5Om5vbmU7fSAjYmxvY2tibG9ja0QzIHt2aXNpYmlsaXR5OnZpc2libGU7ZGlzcGxheTpibG9jazt9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBmb3JiZXNfY29tIDogewogICAgICAgIC8vIGJ5OiBHaXdheXVtZQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy84NjUKICAgICAgICBob3N0IDogWydmb3JiZXMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZignL3dlbGNvbWUnKSA+IC0xKSB7CiAgICAgICAgICAgIEFhay5zZXRDb29raWUoJ3dlbGNvbWVBZCcsICd0cnVlJywgODY0MDAwMDAsICcvJyk7CiAgICAgICAgICAgIEFhay5zZXRDb29raWUoJ2RhaWx5V2VsY29tZUNvb2tpZScsICd0cnVlJywgODY0MDAwMDAsICcvJyk7CiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IEFhay5nZXRDb29raWUoJ3RvVXJsJykgfHwgJ2h0dHA6Ly93d3cuZm9yYmVzLmNvbS8nOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgYmFpdF9hZHNieWdvb2dsZSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTQ3CiAgICAgICAgaG9zdCA6IFsnYml0Y29pbmFsaWVucy5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdpbnMuYWRzYnlnb29nbGUnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJhaXRfdGVzdGVyIDogewogICAgICAgIGhvc3QgOiBbJ29zb2FyY2FkZS5jb20nLCAnZDNicmlkNHkwdS5pbmZvJywgJ2ZpbGVpY2UubmV0JywgJ25vc3RlYW0ucm8nLCAnb3BlbnJ1bm5lci5jb20nLCAnZWFzeWJpbGxldHMuY29tJywgJ3Nwb3guZnInLCAneW92b3lhZ2VzLmNvbScsICd0djMuY28ubnonLCAnZnJlZWFsbG11c2ljLmluZm8nLCAncHV0bG9ja2VyLmNvbScsICdzb2Nrc2hhcmUuY29tJywgJ2RyYW1hcGFzc2lvbi5jb20nLCAneW9vY2xpY2suY29tJywgJ29ubGluZS51YSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiN0ZXN0ZXInKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJhaXRfYWRkIDogewogICAgICAgIGhvc3QgOiBbJ2ZpbGVjb20ubmV0JywgJ3Vwc2hhcmUub3JnJywgJ3NraXBweWZpbGUuY29tJywgJ213ZmlsZXMubmV0JywgJ3VwLWZsb3cub3JnJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2FkZCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYmFpdF9hZHBidGVzdCA6IHsKICAgICAgICBob3N0IDogWydsZWFndWVzZWNyZXRhcnkuY29tJywgJ3Rla25vZ29kcy5jb20nLCAnaGVsbHNtZWRpYS5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjYWRwYnRlc3QnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJhaXRfYWR0ZXN0ZXIgOiB7CiAgICAgICAgaG9zdCA6IFsnZnJlZXNwb3J0c2JldC5jb20nLCAnc3BvcnRzcGxheXMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2FkLXRlc3RlcicpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdGdvX3R2X2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMzAzCiAgICAgICAgaG9zdCA6IFsndGdvLXR2LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNhZGIsICNiYW5uZXJhZDEsIC5sb2FkX3N0cmVhbSB7IGRpc3BsYXk6IG5vbmU7IH0iKTsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I3Rlc3RlcicpOwogICAgICAgIH0sCiAgICAgICAgb25FbmQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcudGhyZXNob2xkID0gMTAwMDsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCcuY2hhdF9mcmFtZScpOyAvLyBidWcgcmVsb2FkIGlmcmFtZQogICAgICAgIH0KICAgICAgfSwKICAgICAgZnJlZWdhbWVob3N0aW5nX25sIDogewogICAgICAgIGhvc3QgOiBbJ2ZyZWVnYW1laG9zdGluZy5ubCddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNhZHRlc3QnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHRoZXdlYXRoZXJzcGFjZV9jb20gOiB7CiAgICAgICAgaG9zdCA6IFsndGhld2VhdGhlcnNwYWNlLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNhYi1ibC1hZHZlcnRpc2VtZW50Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBjbGVvZGVza3RvcF9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzcxMQogICAgICAgIGhvc3QgOiBbJ2NsZW9kZXNrdG9wLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNteVRlc3RBZCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgaW1hZ2VyYWlkZXJfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy84MjYKICAgICAgICBob3N0IDogWydpbWFnZXJhaWRlci5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjbXlHQ29udGFpbmVyJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICB2b2ljaV9mciA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9mci9mb3J1bS9kaXNjdXNzaW9uLzEwMDkzCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzgyNgogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS96RVZRSFRpRAogICAgICAgIGhvc3QgOiBbJ3ZvaWNpLmZyJywgJ3Byb2dyYW1tZS10di5uZXQnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjc2FzX3NjcmlwdDInKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG1pbF9pbmsgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE2NTIKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vNDc0Tlp6UEoKICAgICAgICBob3N0IDogWydtaWwuaW5rJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2Fkc19kaXYnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGN1YmV1cGxvYWRfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2VuL2ZvcnVtL2Rpc2N1c3Npb24vNTkxOQogICAgICAgIGhvc3QgOiBbJ2N1YmV1cGxvYWQuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5jcmVhdGVFbGVtZW50KHsKICAgICAgICAgICAgdGFnIDogJ2lmcmFtZScsCiAgICAgICAgICAgIG5hbWUgOiAnaWZyYW1lJywKICAgICAgICAgICAgc3JjIDogJ2Fib3V0OmJsYW5rJywKICAgICAgICAgICAgc3R5bGUgOiAnZGlzcGxheTpub25lOycsCiAgICAgICAgICAgIGFwcGVuZCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBzdHJlYW00ZnJlZV9ldSA6IHsKICAgICAgICBob3N0IDogWydzdHJlYW00ZnJlZS5ldSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyArYWJwIGFsdCBzb2x1dGlvbgogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjanBheWRheScpOwogICAgICAgICAgQWFrLnV3LmpwYXlkYXlfYWxlcnQgPSAxOwogICAgICAgIH0KICAgICAgfSwKICAgICAgXzNkbmV3c19ydSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9ydS9mb3J1bS9kaXNjdXNzaW9uLzU3NTAKICAgICAgICBob3N0IDogWyczZG5ld3MucnUnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgnYWRibG9ja3dhcm4nLCAxKTsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI2VhckFkcyB7IHdpZHRoOiA0MDFweDsgfSIpOwogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjZWFyQWRzJyk7CiAgICAgICAgICBBYWsudXcuX19BVF9kZXRlY3RlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9LAogICAgICBfM2RzdGhlbV9lcyA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT0zZHN0aGVtCiAgICAgICAgaG9zdCA6IFsnM2RzdGhlbS5lcyddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvL0Fhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkge30pOwogICAgICAgIH0sCiAgICAgICAgb25CZWZvcmVTY3JpcHQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgLyoKICAgICAgICAgIHJldHVybiBbewogICAgICAgICAgICAgIGNvbnRhaW5zIDogJ21haW4uanMnLAogICAgICAgICAgICAgIGV4dGVybmFsIDogdHJ1ZSwKICAgICAgICAgICAgICBvdmVycmlkZSA6ICcvL3Bhc3RlYmluLmNvbS9yYXcvMnlHUlBoUlonCiAgICAgICAgICAgIH0KICAgICAgICAgIF07CiAgICAgICAgKi8KICAgICAgICB9CiAgICAgIH0sCiAgICAgIF84bXVzZXNfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPThtdXNlcwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2ZvcnVtL2Rpc2N1c3Npb24vODUxNQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2VuL2ZvcnVtL2Rpc2N1c3Npb24vNjQwNwogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9iTU5EeGVjcwogICAgICAgIGhvc3QgOiBbJzhtdXNlcy5jb20nXSwKICAgICAgICBvbkJlZm9yZVNjcmlwdCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbewogICAgICAgICAgICAgIGNvbnRhaW5zIDogInR5cGVvZiBleG8iLAogICAgICAgICAgICAgIGV4dGVybmFsIDogZmFsc2UsCiAgICAgICAgICAgICAgcmVtb3ZlIDogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgfSwKICAgICAgaGFwcHl0cmlwc19jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9aGFwcHl0cmlwcwogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9FV1NFYm52dgogICAgICAgIGhvc3QgOiBbJ2hhcHB5dHJpcHMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRSZWFkT25seSgnY2FuUnVuJywgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBsZ19maXJtd2FyZV9yb21fY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWxnLWZpcm13YXJlLXJvbS5jb20KICAgICAgICBob3N0IDogWydsZy1maXJtd2FyZS1yb20uY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRSZWFkT25seSgna2lsbGFkcycsIHRydWUpOwogICAgICAgIH0KICAgICAgfSwgICAgICAKICAgICAgbWlkX2RheV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9bWlkLWRheS5jb20KICAgICAgICBob3N0IDogWydtaWQtZGF5LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0UmVhZE9ubHkoJ2NhblJ1bicsIHRydWUpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYmFkdHZfbmV0d29yayA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1iYWR0di5pdAogICAgICAgIGhvc3QgOiBbJ2JhZHR2Lml0JywgJ2JhZHRhc3RlLml0JywgJ2JhZGdhbWVzLml0JywgJ2JhZGNvbWljcy5pdCddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCdhZEJsb2NrQ2hlY2tlZCcsICdkaXNhdHRpdm8nKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGluZGVwZW5kZW50X2NvX3VrIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWluZGVwZW5kZW50LmNvLnVrCiAgICAgICAgaG9zdCA6IFsnaW5kZXBlbmRlbnQuY28udWsnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgnYWRibG9ja19kZXRlY3RlZCcsICdpZ25vcmVkJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBlc21hc19jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9ZXNtYXMuY29tCiAgICAgICAgaG9zdCA6IFsnZXNtYXMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRSZWFkT25seSgnb3BlbmVkX2FkYmJsb2NrJywgZmFsc2UpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcGlub3kxdHZfbmV0d29yayA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1waW5veTF0dgogICAgICAgIGhvc3QgOiBbJ3Bpbm95MXR2LiddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0UmVhZE9ubHkoJ2FsbG93YWRzJywgMSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBld2FsbHN0cmVldGVyX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1ld2FsbHN0cmVldGVyLmNvbQogICAgICAgIGhvc3QgOiBbJ2V3YWxsc3RyZWV0ZXIuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRSZWFkT25seSgnT0FTX3JkbCcsIDEpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYnVzaW5lc3Nfc3RhbmRhcmRfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWJ1c2luZXNzLXN0YW5kYXJkLmNvbQogICAgICAgIGhvc3QgOiBbJ2J1c2luZXNzLXN0YW5kYXJkLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0UmVhZE9ubHkoJ2Fkc0xvYWRlZCcsIDEpOwogICAgICAgICAgQWFrLnNldENvb2tpZSgnX3B3JywgJ3QnKTsgICAgICAgICAgCiAgICAgICAgfQogICAgICB9LAogICAgICBleHByZXNzX25ldHdvcmsgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9ZmluYW5jaWFsZXhwcmVzcy5jb20KICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1pbmRpYW5leHByZXNzLmNvbQogICAgICAgIGhvc3QgOiBbJ2ZpbmFuY2lhbGV4cHJlc3MuY29tJywgJ2luZGlhbmV4cHJlc3MuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRSZWFkT25seSgnUnVuQWRzJywgMSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBpbmRpYXRpbWVzX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1pbmRpYXRpbWVzCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9bWFsYXlhbGFtLnNhbWF5YW0uY29tCiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL3p4dXN2eWYsIAogICAgICAgIGhvc3QgOiBbJ2luZGlhdGltZXMuY29tJywgJ3NhbWF5YW0uY29tJywgJ2JhbmdhbG9yZW1pcnJvci5jb20nXSwKICAgICAgICBvbkJlZm9yZVNjcmlwdCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbewogICAgICAgICAgICAgIGNvbnRhaW5zIDogJ1xcXFx4NjFcXFxceDY0XFxcXHg2MicsCiAgICAgICAgICAgICAgZXh0ZXJuYWwgOiBmYWxzZSwKICAgICAgICAgICAgICByZW1vdmUgOiB0cnVlCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBjb250YWlucyA6ICdmdW5jdGlvbiBpbml0QmxvY2snLAogICAgICAgICAgICAgIGV4dGVybmFsIDogZmFsc2UsCiAgICAgICAgICAgICAgcmVtb3ZlIDogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdGhlY2hpdmVfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNDUzCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL1RkcFB5cmJiCiAgICAgICAgaG9zdCA6IFsndGhlY2hpdmUuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICAgICAgICBzdGVwaGFuZURldGVjdG9yIDogewogICAgICAgICAgICAgICAgdmFsdWUgOiB7CiAgICAgICAgICAgICAgICAgIGhvb2sgOiBmdW5jdGlvbiAoY2IpIHsKICAgICAgICAgICAgICAgICAgICBjYihmYWxzZSk7CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGluaXQgOiBmdW5jdGlvbiAoKSB7fSwKICAgICAgICAgICAgICAgICAgYnJvYWRjYXN0UmVzdWx0IDogZnVuY3Rpb24gKCkge30KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB3cml0YWJsZSA6IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcmljaG9ucmFpbHNfY29tIDogewogICAgICAgIC8vIGJ5OiBHaXdheXVtZQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNDQ3CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL0V3ZndnOEJHCiAgICAgICAgaG9zdCA6IFsncmljaG9ucmFpbHMuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFNjcmlwdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhZHNCeUdvb2dsZUh0bWwgPSAnIjxpbnMraWQ9ImFzd2lmdF8wX2V4cGFuZCIrc3R5bGU9ImRpc3BsYXk6aW5saW5lLXRhYmxlO2JvcmRlcjpub25lO2hlaWdodDo5MHB4O21hcmdpbjowO3BhZGRpbmc6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2aXNpYmlsaXR5OnZpc2libGU7d2lkdGg6NzUwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudCI+PGlucytpZD0iYXN3aWZ0XzBfYW5jaG9yIitzdHlsZT0iZGlzcGxheTpibG9jaztib3JkZXI6bm9uZTtoZWlnaHQ6OTBweDttYXJnaW46MDtwYWRkaW5nOjA7cG9zaXRpb246cmVsYXRpdmU7dmlzaWJpbGl0eTp2aXNpYmxlO3dpZHRoOjc1MHB4O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQiPjxpZnJhbWUrbWFyZ2lud2lkdGg9IjAiK21hcmdpbmhlaWdodD0iMCIrdnNwYWNlPSIwIitoc3BhY2U9IjAiK2FsbG93dHJhbnNwYXJlbmN5PSJ0cnVlIitzY3JvbGxpbmc9Im5vIithbGxvd2Z1bGxzY3JlZW49InRydWUiK29ubG9hZD0idmFyK2k9dGhpcy5pZCxzPXdpbmRvdy5nb29nbGVfaWZyYW1lX29uY29weSxIPXMmYW1wOyZhbXA7cy5oYW5kbGVycyxoPUgmYW1wOyZhbXA7SFtpXSx3PXRoaXMuY29udGVudFdpbmRvdyxkO3RyeXtkPXcuZG9jdW1lbnR9Y2F0Y2goZSl7fWlmKGgmYW1wOyZhbXA7ZCZhbXA7JmFtcDsoIWQuYm9keXx8IWQuYm9keS5maXJzdENoaWxkKSl7aWYoaC5jYWxsKXtzZXRUaW1lb3V0KGgsMCl9ZWxzZStpZihoLm1hdGNoKXt0cnl7aD1zLnVwZChoLGkpfWNhdGNoKGUpe313LmxvY2F0aW9uLnJlcGxhY2UoaCl9fSIraWQ9ImFzd2lmdF8wIituYW1lPSJhc3dpZnRfMCIrc3R5bGU9ImxlZnQ6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDsiK3dpZHRoPSI3NTAiK2ZyYW1lYm9yZGVyPSIwIitoZWlnaHQ9IjkwIj48L2lmcmFtZT48L2lucz48L2lucz4iJzsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICB1cmwgOiAkKCIuYXJ0aWNsZS1jb250ZW50IikuZGF0YSgidXJsIiksCiAgICAgICAgICAgICAgZGF0YVR5cGUgOiAic2NyaXB0IiwKICAgICAgICAgICAgICBtZXRob2QgOiAicG9zdCIsCiAgICAgICAgICAgICAgZGF0YSA6IHsKICAgICAgICAgICAgICAgIGh0bWwgOiBhZHNCeUdvb2dsZUh0bWwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICB2YXIgZXhlYyA9IHJlc3VsdC5yZXBsYWNlKCIkKCcuYXJ0aWNsZS1jb250ZW50JykiLCAiJCgnLmFydGljbGUtY29udGVudC0yJykiKTsKICAgICAgICAgICAgICAgIG5ldyBGdW5jdGlvbihleGVjKSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQoIi5hcnRpY2xlLWNvbnRlbnQiKS5hZnRlcignPGRpdiBjbGFzcz0iYXJ0aWNsZS1jb250ZW50LTIiPjwvZGl2PicpLnJlbW92ZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBybXByZXB1c2JfY29tIDogewogICAgICAgIGhvc3QgOiBbJ3JtcHJlcHVzYi5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgnam90X3ZpZXdlcicsIDMpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbmVvZHJpdmVfY28gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEwMDEKICAgICAgICBob3N0IDogWyduZW9kcml2ZS5jbyddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gUHJldmVudCBwb3B1bmRlcgogICAgICAgICAgQWFrLnNldENvb2tpZSgnS2lmUG9wQ250JywgMSwgbnVsbCwgJy9lbWJlZC8nKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGhlbnRhaWhhdmVuX29yZyA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrL2lzc3Vlcy8xMzQwCiAgICAgICAgaG9zdCA6IFsnaGVudGFpaGF2ZW4ub3JnJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBQcmV2ZW50IHBvcHVuZGVyCiAgICAgICAgICBBYWsuc2V0Q29va2llKCdoaF9wcG5kcjEnLCAxKTsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ2hoX3BwbmRyMicsIDEpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcHJpbWVzaGFyZV90diA6IHsKICAgICAgICBob3N0IDogWydwcmltZXNoYXJlLnR2J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2FkYmxvY2snKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlYnJpZG5ldF9hbmRfbGl2ZWRlYnJpZCA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1kZWJyaWRuZXQKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1saXZlZGVicmlkCiAgICAgICAgaG9zdCA6IFsnZGVicmlkbmV0LmNvbScsICdsaXZlZGVicmlkLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi5teVRlc3RBZDIgeyBoZWlnaHQ6IDVweDsgfSIpOwogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYubXlUZXN0QWQyJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBibHVlc2F0b3NoaV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzg3MwogICAgICAgIGhvc3QgOiBbJ2JsdWVzYXRvc2hpLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiN0ZXN0IHsgaGVpZ2h0OiAyODBweDsgfSIpOwogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjdGVzdCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcmF6ZXJjcnlwdF9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzg3MAogICAgICAgIGhvc3QgOiBbJ3JhemVyY3J5cHQuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI3Rlc3QgeyBoZWlnaHQ6IDI1MHB4OyB9Iik7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiN0ZXN0Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBzYXRvc2hpZW1waXJlX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODcyCiAgICAgICAgaG9zdCA6IFsnc2F0b3NoaWVtcGlyZS5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjdGVzdCB7IGhlaWdodDogMjUwcHg7IH0iKTsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I3Rlc3QnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG9uZWFkZmF1Y2V0X2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODcxCiAgICAgICAgaG9zdCA6IFsnb25lYWRmYXVjZXQuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI3Rlc3QgeyBoZWlnaHQ6IDI1MHB4OyB9Iik7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiN0ZXN0Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBqa2FuaW1lX25ldCA6IHsKICAgICAgICBob3N0IDogWydqa2FuaW1lLm5ldCddLAogICAgICAgIC8vIEBAfHxqa2FuaW1lLm5ldC9hc3NldHMvanMvYWR2ZXJ0aXNlbWVudDIuanMKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjcmVjbycpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgXzcyMHBta3ZfY29tIDogewogICAgICAgIGhvc3QgOiBbJzcyMHBta3YuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2FkdmVydCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcGFpZHZlcnRzX2NvbSA6IHsKICAgICAgICBob3N0IDogWydwYWlkdmVydHMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2LmFmc19hZHMnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGl0YWxpYXR2X29yZyA6IHsKICAgICAgICBob3N0IDogWydpdGFsaWF0di5vcmcnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjZmFiMTMnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNocmlzc21vb3ZlX2NvbSA6IHsKICAgICAgICBob3N0IDogWydjaHJpc3Ntb292ZS5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy9BYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNhZHNlcnZlcicpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZXZlbnRodWJzX2NvbSA6IHsKICAgICAgICBob3N0IDogWydldmVudGh1YnMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2JsYWh5YmxhY2kxJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBzdXBlcmFuaW1lc19jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEyOTUKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vRkRQQUtqVFEKICAgICAgICBob3N0IDogWydzdXBlcmFuaW1lcy5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjYmFubmVyTG9qYScpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZm9ydW1fcGFjX3JvbV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI0MwogICAgICAgIGhvc3QgOiBbJ2ZvcnVtLnBhYy1yb20uY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2LmJhbm5lcl9hZHMnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxpdHZfdHYgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEyOTkKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vemNkZHZUdUMKICAgICAgICBob3N0IDogWydsaXR2LnR2J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2LnBsYXllcl9tYXNrJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBsZXZlbGRvd25fZnIgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzU5NQogICAgICAgIGhvc3QgOiBbJ2xldmVsZG93bi5mciddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNhZGJsb2NrJyk7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNhZGJsb2NrdGVzdCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2xvYmVzbG90X2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvOTI0CiAgICAgICAgaG9zdCA6IFsnZ2xvYmVzbG90LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNhZGQnKTsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2FkZDEnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFudGVubmVzcG9ydF9jb20gOiB7CiAgICAgICAgaG9zdCA6IFsnYW50ZW5uZXNwb3J0LmNvbScsICdzZXJ2ZXJoZC5ldSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsgLy8gZm9yIGFudGVubmVzcG9ydAogICAgICAgICAgLy8gUmVtb3ZlIFB1YgogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoIiNwdWIgLnB1YmNsb3NlIik7CiAgICAgICAgICAvLyBSZWRpcmVjdCB0byBQbGF5ZXIKICAgICAgICAgIEFhay5zZXRFbGVtZW50KCcjcHViIC5lbWJlZCBpZnJhbWUnLCB7CiAgICAgICAgICAgIHNyYyA6ICcvZW1iZWQvZW1iZWQucGhwJwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBkaXNhYmxlQWxlcnRib3ggOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZW4vZm9ydW0vZGlzY3Vzc2lvbi84NjExCiAgICAgICAgaG9zdCA6IFsnZHJpdmVhcmFiaWEuY29tJywgJ3B1dGxvY2tlci5jb20nLCAnZG9hdG9vbHNpdGEuYWx0ZXJ2aXN0YS5vcmcnLCAnc29ja3NoYXJlLmNvbScsICdmcmVlLW1vdmllLWhvbWUuY29tJywgJ3BjLm9ubGluZTE0My5jb20nLCAna29vb3JhLmNvbScsICdzdHIzYW10di5jby5ucicsICdzdHIzYW10di5hbHRlcnZpc3RhLm9yZycsICdzdHIzYW0uYWx0ZXJ2aXN0YS5vcmcnLCAnZmlsZWNvbS5uZXQnLCAncGlwb2Nhcy50dicsICdnZW5lcmF0dXByZW1pdW0uYml6JywgJ21lZ2EtZGVicmlkLmV1JywgJ3ByZW1pdW1zdDByZS5ibG9nc3BvdC5jb20nLCAnZGwtcHJvdGVjdC5jb20nLCAnbmV3c2lubGV2ZWxzLmNvbScsICd2aXByYWNpbmcuYml6JywgJ2J1c2luZXNzdG9kYXkuaW4nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5hbGVydCA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2VuZXJhdHVwcmVtaXVtX2JpeiA6IHsKICAgICAgICBob3N0IDogWydnZW5lcmF0dXByZW1pdW0uYml6J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIERpc2FibGUgQ29uZmlybSBCb3gKICAgICAgICAgIC8vQWFrLnV3LmNvbmZpcm0gPSBmdW5jdGlvbiAoKXt9OwogICAgICAgICAgQWFrLnNldENvb2tpZSgnZ2VuZXJhJywgZmFsc2UpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbmV3c3RhdGVzbWFuX2NvbSA6IHsKICAgICAgICBob3N0IDogWyduZXdzdGF0ZXNtYW4uY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ2RvbmF0aW9uUG9wdXAnLCAnaGlkZScpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYWRzd2l6el9jb20gOiB7CiAgICAgICAgLy8gYnk6IFNrcjR0Y2hHcjNhenlNb25raUJhbGxsbGxsWnp6egogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy84MDkKICAgICAgICBob3N0IDogWyd5ZXMuZm0nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFNjcmlwdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHdpbmRvdy5jb21fYWRzd2l6el9zeW5jaHJvX2luaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGVyc3RhbmRhcmRfYXQgOiB7CiAgICAgICAgLy8gYnk6IEFsZXhhbmRlcjI1NQogICAgICAgIC8vIHBhdGNoOiBodHRwOi8vcGFzdGViaW4uY29tL3Jhdy5waHA/aT1yN1E0RHJmQgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWRlcnN0YW5kYXJkCiAgICAgICAgaG9zdCA6IFsnZGVyc3RhbmRhcmQuYXQnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewoKICAgICAgICAgIHZhciBtYWtlSVNPVGltZXN0YW1wVVRDID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcGFkID0gZnVuY3Rpb24gKGFtb3VudCwgd2lkdGgpIHsKICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9ICIiOwogICAgICAgICAgICAgIHdoaWxlIChwYWRkaW5nLmxlbmd0aCA8IHdpZHRoIC0gMSAmJiBhbW91bnQgPCBNYXRoLnBvdygxMCwgd2lkdGggLSBwYWRkaW5nLmxlbmd0aCAtIDEpKSB7CiAgICAgICAgICAgICAgICBwYWRkaW5nICs9ICIwIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHBhZGRpbmcgKyBhbW91bnQudG9TdHJpbmcoKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgcmV0dXJuIFtwYWQoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSwgIi0iLAogICAgICAgICAgICAgIHBhZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSwgIi0iLAogICAgICAgICAgICAgIHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMiksICJUIiwKICAgICAgICAgICAgICBwYWQoZGF0ZS5nZXRVVENIb3VycygpLCAyKSwgIjoiLAogICAgICAgICAgICAgIHBhZChkYXRlLmdldFVUQ01pbnV0ZXMoKSwgMiksICI6IiwKICAgICAgICAgICAgICBwYWQoZGF0ZS5nZXRVVENTZWNvbmRzKCksIDIpXS5qb2luKCk7CiAgICAgICAgICB9OwoKICAgICAgICAgIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjb29raWUpIHsKICAgICAgICAgICAgLy8gRmluZCBtYWluIHN0b3JhZ2UgY29va2llCiAgICAgICAgICAgIGlmIChjb29raWUuc3Vic3RyKDAsIDYpID09ICJNR1VJRD0iKSB7CiAgICAgICAgICAgICAgLy8gRGVjb21wb3NlIGluZm9ybWF0aW9uIGZyb20gbWFpbiBzdG9yYWdlIGNvb2tpZQogICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB7fTsKICAgICAgICAgICAgICBjb29raWUuc3Vic3RyKDYpLnNwbGl0KCImIikuZm9yRWFjaChmdW5jdGlvbiAoYXNzaWdubWVudCkgewogICAgICAgICAgICAgICAgdmFyIHBvcyA9IGFzc2lnbm1lbnQuaW5kZXhPZignPScpOwogICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xKSB7CiAgICAgICAgICAgICAgICAgIHZhbHVlc1thc3NpZ25tZW50LnN1YnN0cigwLCBwb3MpXSA9IGFzc2lnbm1lbnQuc3Vic3RyKHBvcyArIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAvLyBVcGRhdGUgImZpcnN0IHZpZXdlZCIgdGltZXN0YW1wCiAgICAgICAgICAgICAgdmFsdWVzLlRpbWVzdGFtcCA9IG1ha2VJU09UaW1lc3RhbXBVVEMoKTsKCiAgICAgICAgICAgICAgLy8gUmVjb21wb3NlIGluZm9ybWF0aW9uIGluIG1haW4gc3RvcmFnZSBjb29raWUKICAgICAgICAgICAgICBjb29raWUgPSAiTUdVSUQ9IjsKICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWVzKSB7CiAgICAgICAgICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgY29va2llICs9IGtleSArICI9IiArIHZhbHVlc1trZXldICsgIiYiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb29raWUgPSBjb29raWUuc3Vic3RyKDAsIChjb29raWUubGVuZ3RoIC0gMSkpOwoKICAgICAgICAgICAgICAvLyBVcGRhdGUgY29va2llCiAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHRla19kb21haW5zIDogewogICAgICAgIC8vIGJ5OiBSZWVrLCBBbGV4YW5kZXIyNTUKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNzg4CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzUxMgogICAgICAgIGhvc3QgOiBbJ3Rlay5ubycsICdnYW1lci5ubycsICd0ZWtub2ZpbC5ubycsICdpbnNpZGV0ZWxlY29tLm5vJywgJ3ByaXNndWlkZS5ubycsICdkaXNrdXNqb24ubm8nLCAndGVrbm9qb2JiLm5vJywgJ2FrYW0ubm8nLCAnaGFyZHdhcmUubm8nLCAnYW1vYmlsLm5vJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewoKICAgICAgICAgIC8qCiAgICAgICAgICB2YXIgYWRfZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsKICAgICAgICAgIGFkX2ZyYW1lLm5hbWUgPSAiX2ZyYW1lIjsKICAgICAgICAgIGFkX2ZyYW1lLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFkX2ZyYW1lKTsKICAgICAgICAgIGFkX2ZyYW1lLmNvbnRlbnRXaW5kb3cud3JhcHBlZEpTT2JqZWN0LmluRklGID0gdHJ1ZTsKICAgICAgICAgICAqLwoKICAgICAgICAgIC8vIGZpeCAyNy4xMS4yMDE1CiAgICAgICAgICBBYWsuY3JlYXRlRWxlbWVudCh7CiAgICAgICAgICAgIHRhZyA6ICdkaXYnLAogICAgICAgICAgICBpZCA6ICdnb29nbGVfYWRzX2lmcmFtZV8nLAogICAgICAgICAgICBodG1sIDogJzxwPjwvcD4nLAogICAgICAgICAgICBhcHBlbmQgOiAnYm9keScKICAgICAgICAgIH0pOwoKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHBsYW5ldGF0dm9ubGluZWhkX25ldHdvcmsgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE0NjcKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTU5CiAgICAgICAgaG9zdCA6IFsncGxhbmV0YXR2b25saW5laGQuYmxvZ3Nwb3QuJywgJ3BsYW5ldGF0dm9ubGluZWhkLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoJy5hZHNhbnRpbG9rIHsgaGVpZ2h0OiAxcHg7IH0nKTsKICAgICAgICAgIC8vQWFrLnV3LmpRQW50aUFkc0Jsb2NrID0gZnVuY3Rpb24gKCl7fTsgLy8gZG9uJ3Qgd29yawogICAgICAgIH0KICAgICAgfSwKICAgICAgYmV0YV9zcGVlZHRlc3RfbmV0IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy82MjgKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTYyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzQ4NAogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlMi5vcmcvNTN5bWdoWDEKICAgICAgICBob3N0IDogWydiZXRhLnNwZWVkdGVzdC5uZXQnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5hZHNPb2tsYUNvbVJlYWNoYWJsZSA9IHRydWU7CiAgICAgICAgICBBYWsudXcuc2NyaXB0c0xvYWRlZCA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgYmluYnVja3NfY29tIDogewogICAgICAgIC8vIGJ5OiBBbGV4YW5kZXIyNTUKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTQ1CiAgICAgICAgaG9zdCA6IFsnYmluYnVja3MuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LnRlc3RKdWljeVBheSA9IHRydWU7CiAgICAgICAgICBBYWsudXcudGVzdFNlbnNlUGF5ID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHdoaXNreXByaWNlc19kb21haW5zIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMjg0CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL0VwcjV0UkVMCiAgICAgICAgaG9zdCA6IFsnd2hpc2t5cHJpanplbi5jb20nLCAnd2hpc2t5cHJpY2VzLmNvLnVrJywgJ3doaXNreXByZWlzZS5jb20nLCAnd2hpc2t5cHJpeC5mciddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3Lk9BX3Nob3cgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbmljb2Jsb2dfb3JnIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMTg0CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL01OSHBMczJWCiAgICAgICAgaG9zdCA6IFsnbmljb2Jsb2cub3JnJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNyYycpOwogICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGlfc2UgOiB7CiAgICAgICAgLy8gbm90ZTogYWRkIHRoaXMgcnVsZSBmb3IgY2hyb21lIHVzZXIKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTMxOQogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS85YkRQUXpNWAogICAgICAgIGhvc3QgOiBbJ2RpLnNlJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNoZWFkZXJfb3ZlcmxheScpOwogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNtZXNzYWdlX21vZGFsJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBtZWdvZ29fbmV0IDogewogICAgICAgIC8vIGlzc3VlOiBQTQogICAgICAgIC8vIHNvdXJjZTE6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vY2NIUWczaG4KICAgICAgICAvLyBzb3VyY2UyOiBodHRwOi8vcGFzdGViaW4uY29tL2drMHZFUUhOCiAgICAgICAgLy8gbm90ZTogdHdvIGFkYmxvY2sgY2hlY2sKICAgICAgICBob3N0IDogWydtZWdvZ28ubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYWsudXcsICJhZEJsb2NrIiwgewogICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgd3JpdGFibGUgOiBmYWxzZSwKICAgICAgICAgICAgdmFsdWUgOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAic2hvd0FkQmxvY2tNZXNzYWdlIiwgewogICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgd3JpdGFibGUgOiBmYWxzZSwKICAgICAgICAgICAgdmFsdWUgOiBmdW5jdGlvbiAoKSB7fQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBsaWJlcnRhZGRpZ2l0YWxfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNjQyCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tLzZGenAwdnJFCiAgICAgICAgaG9zdCA6IFsnbGliZXJ0YWRkaWdpdGFsLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAiYWRfYWxyZWFkeV9wbGF5ZWQiLCB7CiAgICAgICAgICAgIGVudW1lcmFibGUgOiB0cnVlLAogICAgICAgICAgICB3cml0YWJsZSA6IGZhbHNlLAogICAgICAgICAgICB2YWx1ZSA6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFhay51dywgInB1ZWRlTW9zdHJhckFkcyIsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LCAgICAgCiAgICAgIGZvbGhhX3VvbF9jb21fYnIgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEzOTYKICAgICAgICAvLyBzb3VyY2U6IGYoICggdHlwZW9mIHBheXdhbGxfYWNjZXNzID09ICJ1bmRlZmluZWQiIHx8IHBheXdhbGxfYWNjZXNzICE9IHRydWUgKSAmJiAoIHR5cGVvZiBmb2xoYV9hZHMgPT0gInVuZGVmaW5lZCIgfHwgZm9saGFfYWRzICE9IHRydWUgKSApIHsKICAgICAgICBob3N0IDogWydmb2xoYS51b2wuY29tLmJyJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYWsudXcsICJwYXl3YWxsX2FjY2VzcyIsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAiZm9saGFfYWRzIiwgewogICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgd3JpdGFibGUgOiBmYWxzZSwKICAgICAgICAgICAgdmFsdWUgOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGdhbWVyX2NvbV90dyA6IHsKICAgICAgICAvLyBieTogbW1pczEwMDAKICAgICAgICAvLyB1c2Vyc2NyaXB0OiBodHRwczovL2dyZWFzeWZvcmsub3JnL2VuL3NjcmlwdHMvMTY1MjUKICAgICAgICAvLyBpc3N1ZTogOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy85NzUKICAgICAgICBob3N0IDogWydnYW1lci5jb20udHcnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFhay51dywgJ0FudGlBZCcsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDogbnVsbAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBhcm1vcmdhbWVzX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODQ1CiAgICAgICAgaG9zdCA6IFsnYXJtb3JnYW1lcy5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFhay51dywgJ2dhX2RldGVjdCcsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDogbnVsbAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBtYW5nYWhvc3RfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy85NTcKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTU4CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL0dycGJKRU5BCiAgICAgICAgaG9zdCA6IFsnbWFuZ2Fob3N0LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAidGVzdERpc3BsYXkiLCB7CiAgICAgICAgICAgIGVudW1lcmFibGUgOiB0cnVlLAogICAgICAgICAgICB3cml0YWJsZSA6IGZhbHNlLAogICAgICAgICAgICB2YWx1ZSA6IGZhbHNlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZpZGVvd29vZF90diA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTMzOQogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3ZpZGVvd29vZC50di9idWlsZC9hc3NldHMvanMvcGVtYmVkLTk3YTY0MGY2MjUuanMKICAgICAgICBob3N0IDogWyd2aWRlb3dvb2QudHYnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3Lm9wZW4gPSBmdW5jdGlvbiAoKSB7fTsgLy8gcHJldmVudCBwb3B1cAogICAgICAgICAgQWFrLnV3LmNvbmZpZyA9IHt9OwogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFhay51dy5jb25maWcsICJhZGJfcmVtaW5kIiwgewogICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgd3JpdGFibGUgOiBmYWxzZSwKICAgICAgICAgICAgdmFsdWUgOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBpbmZvam9ic19jb21fYnIgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEzMzkKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vTFBnNjA5M1UKICAgICAgICAvLyByZWRpcmVjdDogaHR0cDovL3d3dy5pbmZvam9icy5jb20uYnIvbm9wdWJsaWNpdHkuYXNweAogICAgICAgIGhvc3QgOiBbJ2luZm9qb2JzLmNvbS5iciddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU2NyaXB0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHdlYlVJID0gd2ViVUkgfHwge307CiAgICAgICAgICAgIHdlYlVJLlV0aWxzID0gd2ViVUkuVXRpbHMgfHwge307CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3ZWJVSS5VdGlscywgIlN0b3BBZEJsb2NrIiwgewogICAgICAgICAgICAgIGVudW1lcmFibGUgOiB0cnVlLAogICAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgICAgdmFsdWUgOiBmdW5jdGlvbiAoKSB7fQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNsb3Vkd2ViY29weV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzcxNAogICAgICAgIGhvc3QgOiBbJ2Nsb3Vkd2ViY29weS5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHNldFRpbWVvdXRDbG9uZSA9IEFhay51dy5zZXRUaW1lb3V0OwogICAgICAgICAgQWFrLnV3LnNldFRpbWVvdXQgPSBudWxsOwogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEFhay51dy5zZXRUaW1lb3V0ID0gc2V0VGltZW91dENsb25lOwogICAgICAgICAgfSwgNTAwMCk7CiAgICAgICAgfQogICAgICB9LAogICAgICBuYXJraXZlX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTY5CiAgICAgICAgaG9zdCA6IFsnbmFya2l2ZS5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5hZGJsb2NrX3N0YXR1cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHByZWdlbl9uZXQgOiB7CiAgICAgICAgaG9zdCA6IFsncHJlZ2VuLm5ldCddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBza2lwIHBhZ2UgaW5mbwogICAgICAgICAgQWFrLnNldENvb2tpZSgncGduJywgMSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBwaHlzX29yZyA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNzY4CiAgICAgICAgaG9zdCA6IFsncGh5cy5vcmcnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5jaGtBQiA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgb252YXNvcnRpcl9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9b252YXNvcnRpci5jb20KICAgICAgICBob3N0IDogWydvbnZhc29ydGlyLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gK2FicCBydWxlIGFsdCBzb2x1dGlvbgogICAgICAgICAgQWFrLnV3LkplQmxvcXVlID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBmdWxsaGR6ZXZraV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9ZnVsbGhkemV2a2kuY29tCiAgICAgICAgaG9zdCA6IFsnZnVsbGhkemV2a2kuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyArYWJwIHJ1bGUgYWx0IHNvbHV0aW9uCiAgICAgICAgICBBYWsudXcuY2hlY2sgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZpbGxlX2lkZWFsZV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI1OAogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS8xNm1ubWVNYwogICAgICAgIGhvc3QgOiBbJ3ZpbGxlLWlkZWFsZS5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vICthYnAgcnVsZSBhbHQgc29sdXRpb24KICAgICAgICAgIEFhay51dy5leGVjc3AgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG5vdHJlX3BsYW5ldGVfaW5mbyA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMjU4CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL3FyUzZRR0dFCiAgICAgICAgaG9zdCA6IFsnbm90cmUtcGxhbmV0ZS5pbmZvJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyArYWJwIHJ1bGUgYWx0IHNvbHV0aW9uCiAgICAgICAgICBBYWsudXcucHVicG9wID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBhcGttaXJyb3JfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8zNzgKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMjI0CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzc4CiAgICAgICAgaG9zdCA6IFsnYXBrbWlycm9yLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmRvQ2hlY2sgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG10bGJsb2dfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy85NDgKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9mb3J1bS9kaXNjdXNzaW9uLzc3NTMKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vQkZyRFBNNmIKICAgICAgICBob3N0IDogWydtdGxibG9nLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAncHVhYnMnLCB7CiAgICAgICAgICAgIGVudW1lcmFibGUgOiB0cnVlLAogICAgICAgICAgICB2YWx1ZSA6IGZ1bmN0aW9uICgpIHt9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFuaXptX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydhbml6bS5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5zdG9wQWRCbG9jayA9IHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGlhcmlvaW5mb3JtYWNpb25fY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNTUwCiAgICAgICAgaG9zdCA6IFsnZGlhcmlvaW5mb3JtYWNpb24uY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYWsudXcsICdwcl9va3ZhbGlkYScsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHZhbHVlIDogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBjbmJldGFfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMzAxCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL3ZYTkN6dHd4CiAgICAgICAgaG9zdCA6IFsnY25iZXRhLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAnSkInLCB7CiAgICAgICAgICAgIGVudW1lcmFibGUgOiB0cnVlLAogICAgICAgICAgICB2YWx1ZSA6IGZ1bmN0aW9uICgpIHt9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHRoZW1hcmtlcl9oYWFyZXR6IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMjkyCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL20wOGRrRFQ0CiAgICAgICAgaG9zdCA6IFsndGhlbWFya2VyLmNvbScsICdoYWFyZXR6LmNvLmlsJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYWsudXcsICdBZEJsb2NrVXRpbCcsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHZhbHVlIDoge30KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcGlwb2Nhc190diA6IHsKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydwaXBvY2FzLnR2J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIEFsc28gYWRkZWQgaW4gZGlzYWJsZUFsZXJ0Ym94CiAgICAgICAgICAvLyBObyBwb3B1cAogICAgICAgICAgQWFrLnNldENvb2tpZSgncG9wdXBfdXNlcl9sb2dpbicsICd5ZXMnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIF8xNW1pbl9sdCA6IHsKICAgICAgICAvLyBub3RlOiByZWd1bGFyeSB1cGRhdGUgc2NyaXB0CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9MTVtaW4uaXQKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vWVdmM0hUcXIKICAgICAgICAvLyB0ZXN0OiBodHRwOi8vdGlueXVybC5jb20vaDZjNDMzNgogICAgICAgIGhvc3QgOiBbJzE1bWluLmx0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYWsudXcsICdST1VURScsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDogJ19iZV9yZWtsYW1vcycKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgc2MyY2FzdHNfY29tIDogewogICAgICAgIC8vIGJ5OiBHaXdheXVtZQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNTk5CiAgICAgICAgaG9zdCA6IFsnc2MyY2FzdHMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgQWFrLmFkZFNjcmlwdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgd2luZG93Ll9nYXEgPSB7IHB1c2g6ZnVuY3Rpb24oKSB7fSB9OwogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAic2hvd2RpYWxvZyIsIHsKICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLAogICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgInNob3dQb3B1cDIiLCB7CiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZndW5ldHdvcmtfY29tIDogewogICAgICAgIC8vIGlzc3VlOgogICAgICAgIGhvc3QgOiBbJ3ZndW5ldHdvcmsuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgnc3RvcEl0JywgMSk7CiAgICAgICAgICB2YXIgY2xvc2UgPSBBYWsuZ2V0RWxlbWVudCgnI3NvbWVfYWRfYmxvY2tfa2V5X2Nsb3NlJyk7CiAgICAgICAgICBpZiAoY2xvc2UpIHsKICAgICAgICAgICAgY2xvc2UuY2xpY2soKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxpbmtjcnlwdF93cyA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMjg2CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvcHVsbC82NwogICAgICAgIGhvc3QgOiBbJ2xpbmtjcnlwdC53cyddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRFbGVtZW50KCcjYWRfY29udCcsIHsKICAgICAgICAgICAgaWQgOiAnJywKICAgICAgICAgICAgc3R5bGUgOiAnZGlzcGxheTpibG9jazsnCiAgICAgICAgICB9KTsKICAgICAgICAgIEFhay5zZXRFbGVtZW50KCcjY29udGFpbmVyX2NoZWNrJywgewogICAgICAgICAgICBzdHlsZSA6ICdkaXNwbGF5Om5vbmU7JwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBldmVudG9zcHB2X21lIDogewogICAgICAgIC8vIGlzc3VlOiAKICAgICAgICBob3N0IDogWydldmVudG9zcHB2Lm1lJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNuZjM3Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBib2xvcl90b2xpX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTUyCiAgICAgICAgaG9zdCA6IFsnYm9sb3ItdG9saS5jb20nXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBhZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiYW5uZXInKTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBhZCA9IGFkc1tpXTsKICAgICAgICAgICAgYWQuaW5uZXJIVE1MID0gJzxicj4nOwogICAgICAgICAgICBhZC5zdHlsZS5oZWlnaHQgPSAnMXB4JzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZpdm9fc3ggOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI4MAogICAgICAgIGhvc3QgOiBbJ3Zpdm8uc3gnXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBhbGVydCA9IEFhay5nZXRFbGVtZW50KCcjYWxlcnQtdGhyb3R0bGUnKTsKICAgICAgICAgIGlmIChhbGVydCkgewogICAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudChhbGVydCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgYnV0dG9uID0gQWFrLmdldEVsZW1lbnQoJ2J1dHRvbiNhY2Nlc3MnKTsKICAgICAgICAgIGlmIChidXR0b24pIHsKICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTsKICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTsKICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9ICdDb250aW51ZSB0byB2aWRlbyc7CiAgICAgICAgICB9CiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gQWFrLmdldEVsZW1lbnQoJ2lucHV0W25hbWU9InRocm90dGxlIl0nKTsKICAgICAgICAgICAgaWYgKGlucHV0KSB7CiAgICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoaW5wdXQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGx1eHlhZF9jb20gOiB7IC8vIHNraXAgcmVkaXJlY3QgbXlhbmltZXMubGkKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydsdXh5YWQuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKCcvSW5mb3JtYXRpb24ucGhwJyA9PSBsb2NhdGlvbi5wYXRobmFtZSkgewogICAgICAgICAgICB2YXIgaHJlZiA9IGxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBocmVmLnN1YnN0cihocmVmLmluZGV4T2YoJ3VybD0nKSArIDQsIGhyZWYubGVuZ3RoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIG1ycGlyYWN5X2RvbWFpbnMgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE0MDUKICAgICAgICBob3N0IDogWydtcnBpcmFjeS54eXonLCAnbXJwaXJhY3kuY2x1YiddLAogICAgICAgIG9uQmVmb3JlU2NyaXB0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgY29udGFpbnMgOiAnRGVzYXRpdmEgbyBBZEJsb2NrIHBhcmEgY29udGludWFyJywKICAgICAgICAgICAgICBleHRlcm5hbCA6IGZhbHNlLAogICAgICAgICAgICAgIHJlbW92ZSA6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgXTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRicGxhbmV0X25ldCA6IHsKICAgICAgICAvLyBpc3N1ZTogUE0KICAgICAgICBob3N0IDogWydkYnBsYW5ldC5uZXQnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgnbmV3bm9Nb3JlQWRzTm93JywgMSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBhaWRlbXVfZnIgOiB7CiAgICAgICAgLy8gaXNzdWU6CiAgICAgICAgaG9zdCA6IFsnYWlkZW11LmZyJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ2FkYmxvY2tQb3B1cCcsIHRydWUpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZWFtaV9pbiA6IHsKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydlYW1pLmluJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCdhZF9sb2NrZWQnLCAxKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJpZ2Rvd25sb2FkZXJfY29tIDogewogICAgICAgIC8vIGlzc3VlOgogICAgICAgIGhvc3QgOiBbJ2JpZ2Rvd25sb2FkZXIuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNhbnRpX2FkYmxvY2snKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZyZWVza2llcl9jb20gOiB7CiAgICAgICAgLy8gYnk6IEdvcmhpbGwKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNjM5CiAgICAgICAgLy8gbm90ZTogYWxzbyBhZGRlZCBsaXN0IHJ1bGUKICAgICAgICBob3N0IDogWydmcmVlc2tpZXIuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFkYi1ub3QtZW5hYmxlZCIpOwogICAgICAgICAgaWYgKGVsICE9PSBudWxsKSB7CiAgICAgICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCJkaXNwbGF5Iik7CiAgICAgICAgICB9CiAgICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ2aWRlb0NvbnRhaW5lciIpOwogICAgICAgICAgaWYgKGVsICE9PSBudWxsKSB7CiAgICAgICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCJkaXNwbGF5Iik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBnYW1ldHJhaWxlcnNfY29tIDogewogICAgICAgIC8vIGlzc3VlOgogICAgICAgIGhvc3QgOiBbJ2dhbWV0cmFpbGVycy5jb20nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnI2FkX2Jsb2NraW5nJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBzY2FuX29uZXBpZWNlX25hcnV0b19teCA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTgyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI3OQogICAgICAgIGhvc3QgOiBbJ3NjYW4tbXguY29tJywgJ29uZXBpZWNlLW14Lm5ldCcsICduYXJ1dG8tbXgubmV0J10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYWRfYmxvY2tfdGVzdCA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldEVsZW1lbnQoJyN5b3AnLCB7CiAgICAgICAgICAgIGlkIDogJycKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gQml0Y29pbnMKICAgICAgYml0Y29pbmtlcl9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzIzMAogICAgICAgIGhvc3QgOiBbJ2JpdGNvaW5rZXIuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5jbGFpbSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNFMzNGQ0NjWDJmVycpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbW9vbmRvZ2VfY29faW4gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzM4NAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8yMzIKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMjMzCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzIzNgogICAgICAgIGhvc3QgOiBbJ21vb25kb2dlLmNvLmluJywgJ21vb25saXRlY28uaW4nLCAnbW9vbmJpdC5jby5pbicsICdiaXRjb2luemVicmEuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNBQiwgI0U0NDJEdiwgI2VDQzVoJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBiaXRjb2luZXJfbmV0IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8zNDkKICAgICAgICBob3N0IDogWydiaXRjb2luZXIubmV0JywgJ2xpdGVjb2luZXIubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I3Rlc3RlcicpOwogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjYWQtdG9wJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBiaXRjb2luc19ueF90YyA6IHsKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydmcmVlYml0Y29pbnMubngudGMnLCAnZ2V0Yml0Y29pbnMubngudGMnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5hZF9ibG9ja190ZXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgZnJlZWNvaW5zNF9tZSA6IHsKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydmcmVlY29pbnM0Lm1lJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuY2hlY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9LAogICAgICB0b3JyZW50X3R2X3J1IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy81MzcKICAgICAgICBob3N0IDogWyd0b3JyZW50LXR2LnJ1J10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuY19Pb19BZHZlcnRfU2hvd24gPSB0cnVlOwogICAgICAgIH0KICAgICAgfSwKICAgICAgY3d0dl9jb20gOiB7CiAgICAgICAgLy8gYnk6IEthbGJhc2l0CiAgICAgICAgLy8gcHVsbDogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9wdWxsLzc2MwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8zNDAKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNzYyCiAgICAgICAgaG9zdCA6IFsnY3d0di5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5DV1RWSXNBZEJsb2NraW5nID0gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYmlsZF9kZSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1iaWxkCiAgICAgICAgaG9zdCA6IFsnYmlsZC5kZSddLAogICAgICAgIG9uQmVmb3JlU2NyaXB0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgY29udGFpbnMgOiAnaHR0cDovL3d3dy5iaWxkLmRlL3dhL2xsL2JpbGQtZGUvdW5hbmdlbWVsZGV0LTQyOTI1NTE2LmJpbGQuaHRtbCcsCiAgICAgICAgICAgICAgZXh0ZXJuYWwgOiBmYWxzZSwKICAgICAgICAgICAgICByZXBsYWNlIDogWydqYXZhc2NyaXB0JywgJ3ZvaWQoMCk7J10uam9pbignOicpCiAgICAgICAgICAgIH0KICAgICAgICAgIF07CiAgICAgICAgfQogICAgICB9LAogICAgICBpbm5fY29faWwgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzUzMgogICAgICAgIGhvc3QgOiBbJ2lubi5jby5pbCddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU2NyaXB0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIFRSQyA9IHt9OwogICAgICAgICAgICBUUkMuYmxvY2tlciA9IHsKICAgICAgICAgICAgICBzdGF0ZXMgOiB7CiAgICAgICAgICAgICAgICBBQlBfREVURUNUSU9OX0RJU0FCTEVEIDogLTIsCiAgICAgICAgICAgICAgICBBQlBfTk9UX0RFVEVDVEVEIDogMCwKICAgICAgICAgICAgICAgIEFCUF9ERVRFQ1RFRCA6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNyZWF0ZUJsb2NrRGV0ZWN0aW9uRGl2IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaXNCbG9ja0RldGVjdGVkT25EaXYgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGlzQmxvY2tEZXRlY3RlZE9uQ2xhc3NOYW1lcyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZ2V0QmxvY2tlZFN0YXRlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBiaGFza2FyX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1iaGFza2FyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9ZGl2eWFiaGFza2FyLmNvLmluCiAgICAgICAgaG9zdCA6IFsnYmhhc2thci5jb20nLCAnZGl2eWFiaGFza2FyLmNvLmluJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcub3BlblBvcFVwRm9yQnJlYWtQYWdlID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICBBYWsudXcuY2FuQUJQID0gdHJ1ZTsKICAgICAgICAgIEFhay51dy5jYW5SdW5BZHMgPSB0cnVlOwogICAgICAgICAgQWFrLnV3LmNhbkNoZWNrQWRzID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHR1cmthbmltZV90diA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNDQ2CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEzOQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL3RyL2ZvcnVtL2Rpc2N1c3Npb24vNDI4Mi8KICAgICAgICBob3N0IDogWyd0dXJrYW5pbWUudHYnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy5hZGJsb2NrYmxvY2sgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIEFhay51dy5CbG9rS29udHJvbCA9IHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgd3RmYml0X2NoIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy80MDcKICAgICAgICBob3N0IDogWyd3dGZiaXQuY2gnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy53cml0ZUhUTUxhc0pTID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBhcmFuenVsbGFfaXQgOiB7CiAgICAgICAgLy8gYnk6IFJvYm90ZXgKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1hcmFuenVsbGEuaXQKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20veU1NNllneFcKICAgICAgICBob3N0IDogWydhcmFuenVsbGEuaXQnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24oKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoJyNhYnQxICsgU1RZTEUgKyBkaXZbaWRdW2NsYXNzXSB7ZGlzcGxheTpub25lO30nKTsKICAgICAgICB9LAogICAgICAgIG9uQmVmb3JlU2NyaXB0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgY29udGFpbnMgOiAnbmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhJywKICAgICAgICAgICAgICBleHRlcm5hbCA6IGZhbHNlLAogICAgICAgICAgICAgIHJlbW92ZSA6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgXTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG5kdHZfY29tIDogewogICAgICAgIC8vIG5vdGU6IGNhblJ1bkFkcyBpbnZlcnRlZCB2YWx1ZQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPW5kdHYuY29tCiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL2hjZm5jZHYKICAgICAgICBob3N0IDogWyduZHR2LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0UmVhZE9ubHkoJ19fX3BfX3AnLCAxKTsKICAgICAgICAgIEFhay5zZXRSZWFkT25seSgnZ2V0Tm9Ub3BMYXRlc3ROZXdzJywgZnVuY3Rpb24gKCkge30pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbGVzZWNob3NfZnIgOiB7CiAgICAgICAgLy8gUmVlaywgR2l3YXl1bWUKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1sZXNlY2hvcy5mcgogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9DTU04V0dMagogICAgICAgIGhvc3QgOiBbJ2xlc2VjaG9zLmZyJywgJ2xlc2VjaG9zLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbigpIHsKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICJjaGVja0FkQmxvY2siLCB7CiAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmNhbGxfQWQgPSAxOwogICAgICAgICAgQWFrLnV3LnBheXdhbGxfYWRibG9ja19hcnRpY2xlID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBiaXR2aXNpdHNfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8yNjYKICAgICAgICBob3N0IDogWydiaXR2aXNpdHMuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYmxvY2tBZGJsb2NrVXNlciA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgZXhyYXBpZGxlZWNoX2luZm8gOiB7CiAgICAgICAgLy8gYnk6IEFsZXhhbmRlcjI1NSwgUmVlaywgR2l3YXl1bWUKICAgICAgICAvLyBwYXRjaDogaHR0cDovL3Bhc3RlYmluLmNvbS9RNjY0ZGlRMgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWV4cmFwaWRsZWVjaAogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS81ZTI3c3lqQQogICAgICAgIGhvc3QgOiBbJ2V4cmFwaWRsZWVjaC5pbmZvJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICB2YXIgdG9tb3Jyb3cgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgdG9tb3Jyb3cuc2V0RGF0ZSh0b21vcnJvdy5nZXREYXRlKCkgKyAxKTsKCiAgICAgICAgICAvLyBwcmV2ZW50IHBvcHVwCiAgICAgICAgICBBYWsuc2V0Q29va2llKCdwb3BjYXNocHVDYXAnLCAxKTsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ3BvcGNhc2hwdScsIDEpOwogICAgICAgICAgQWFrLnNldENvb2tpZSgnbm9wb3BhdGFsbCcsIHRvbW9ycm93LmdldFRpbWUoKS50b1N0cmluZygpKTsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ25vYWR2dGRheScsIDApOwogICAgICAgICAgLy9BYWsuc2V0Q29va2llKCdidl9EU0tza2Rja19zMWQnLCAnYnZEU0tza2Rja3MxZCcpOwoKICAgICAgICAgIC8vIGhpZGUgbm90aWNlCiAgICAgICAgICBBYWsuYWRkU3R5bGUoJ2Rpdi5hbGVydC5hbGVydC1kYW5nZXIubGVhZCB7b3BhY2l0eTowO30nKTsKICAgICAgICAgIAogICAgICAgICAgLy8gcHJldmVudCByZWRpcmVjdCB0byB2ZXJpZnkgcGFnZQogICAgICAgICAgQWFrLnNldFJlYWRPbmx5KCdiZHZibnJfcGlkJywgW10pOwogICAgICAgICAgQWFrLnNldFJlYWRPbmx5KCdQb3BBZHMnLCAxKTsKCiAgICAgICAgICBBYWsuYWRkU2NyaXB0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAvLyBwcmV2ZW50IHBvcHVwCiAgICAgICAgICAgICAgd2luZG93Lm9wZW4gPSBmdW5jdGlvbiAoKSB7fTsKCiAgICAgICAgICAgICAgLy8gcHJldmVudCByZWRpcmVjdCB0byB2ZXJpZnkgcGFnZQogICAgICAgICAgICAgIHZhciBmcmFtZTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsKICAgICAgICAgICAgICBmcmFtZTEuc3JjID0gJ2h0dHA6Ly9iZGZybS5iaWR2ZXJ0aXNlci5jb20vQmlkVmVydGlzZXIuZGJtP3BpZD0zODM4NjUmYmlkPTE3Mzc0MTgmUkQ9JzsKICAgICAgICAgICAgICBmcmFtZTEuaWQgPSAnYmR2aSc7CiAgICAgICAgICAgICAgZnJhbWUxLnN0eWxlID0gJ2Rpc3BsYXk6bm9uZSc7CiAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGZyYW1lMSk7CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZpcGxlYWd1ZV9kb21haW5zIDogewogICAgICAgIC8vIG5vdGU6IGFsc28ga2lsbGVkIGJ5IEFha0xpc3QKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT12aXBib3gKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT12aXBsZWFndWUKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vTkVSVnpIelMKICAgICAgICBob3N0IDogWyJ2aXBsZWFndWUuaXMiLCAidmlwbGVhZ3VlLndzIiwgInZpcGxlYWd1ZS50diIsICJ2aXBsZWFndWUuc2UiLCAidmlwbGVhZ3VlLnR2IiwgInZpcGxlYWd1ZS5tZSIsICJ2aXBsZWFndWUubW9iaSIsICJ2aXBsZWFndWUuY28iLCAidmlwbGVhZ3VlLnN4IiwgInZpcGxlYWd1ZS5jaCIsICJ2aXBib3gudHYiLCAidmlwYm94LmNvIiwgInZpcGJveC5iaXoiLCAidmlwYm94LnN4IiwgInZpcGJveC5ldSIsICJ2aXBib3guc28iLCAidmlwYm94Lm51IiwgInZpcGJveHNhLmNvIiwgInN0cmlrZW91dC5jbyIsICJzdHJpa2VvdXQubWUiLCAiaG9tZXJ1bi5yZSIsICJ2aXBib3h0di5jbyIsICJ2aXBhcHAubWUiXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmlFeGlzdCA9IHRydWU7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCd4Y2xzdmlwJywgMSk7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIi52aXBfMDUyeDAwMyB7IGhlaWdodDogMjUwcHg7IH0iKTsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiLnZpcF8wOXg4MjcgeyBoZWlnaHQ6IDI2cHg7IH0iKTsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI292ZXJsYXkgeyBkaXNwbGF5OiBub25lOyB9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICB6b29tdHZfbWUgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9em9vbXR2Lm1lCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL200ekFYR2N3CiAgICAgICAgaG9zdCA6IFsnem9vbXR2Lm1lJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuaWF4cEVuYWJsZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdmdfbm8gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI5MgogICAgICAgIC8vICthYnAgcnVsZQogICAgICAgIGhvc3QgOiBbJ3ZnLm5vJywgJ2UyNC5ubyddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3Ll9fQUJfXyA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgcG9ybnZlX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvOTQ3CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tLzdUUFBrcTEyCiAgICAgICAgaG9zdCA6IFsncG9ybnZlLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmFkeGp3dXBkYXRlID0gMTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxvbF9tb2FfdHcgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzExMTQKICAgICAgICBob3N0IDogWydsb2wubW9hLnR3J10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFNjcmlwdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBNb2FPYmogPSBNb2FPYmogfHwge307CiAgICAgICAgICAgIE1vYU9iai5hZCA9IE1vYU9iai5hZCB8fCB7fTsJCQkKICAgICAgICAgICAgTW9hT2JqLmFkLmhhc0FkYmxvY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9OwogICAgICAgICAgICBNb2FPYmouYWQuY2hlY2tBQlAgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9OwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBtdWx0aXVwX29yZyA6IHsKICAgICAgICAvLyBieTogV2F0aWxpbgogICAgICAgIC8vIG5vdGU6IGFsdGVybmF0aXZlIHNvbHV0aW9uCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9bXVsdGl1cC5vcmcKICAgICAgICBob3N0IDogWydtdWx0aXVwLm9yZyddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aXNpdCcsIDEpOyAvLyBwcmV2ZW50IHBvcHVwCiAgICAgICAgICBBYWsuc2V0UmVhZE9ubHkoJ2hpJywgZnVuY3Rpb24gKCkge30pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGFpbHliaXRjb2luc19vcmcgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEwNwogICAgICAgIGhvc3QgOiBbJ2RhaWx5Yml0Y29pbnMub3JnJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJy5hZC1pbWcnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGtvemFjemVrX3plYmVya2EgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzQxNAogICAgICAgIGhvc3QgOiBbJ2tvemFjemVrLnBsJywgJ3plYmVya2EucGwnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgnYWJsYycsIDEpOwogICAgICAgICAgQWFrLnNldENvb2tpZSgnY29va2llX3BvbGljeScsIDEpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgc3Bhbmt3aXJlX3NpdGVzIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy84ODcKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vVEZCMWR0Z2IKICAgICAgICBob3N0IDogWydzcGFua3dpcmUuY29tJywgJ2tlZXptb3ZpZXMuY29tJywgJ2V4dHJlbWV0dWJlLmNvbScsICdtb2Zvc2V4LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCJhYkNsb3NlZCIsICJ0cnVlIik7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCJoaWRlX2FkX21zZyIsICIxIik7CiAgICAgICAgfQogICAgICB9LAogICAgICB5b3Vwb3JuX25ldHdvcmsgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzg4NwogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9URkIxZHRnYgogICAgICAgIGhvc3QgOiBbJ3lvdXBvcm4uY29tJywgJ3lvdXBvcm5nYXkuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRDb29raWUoImFkYmxvY2tfbWVzc2FnZSIsICJjbG9zZWQiKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNpdGF0aW9ubWFjaGluZV9uZXQgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9Y2l0YXRpb25tYWNoaW5lLm5ldAogICAgICAgIGhvc3QgOiBbJ2NpdGF0aW9ubWFjaGluZS5uZXQnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnNldENvb2tpZSgic2JtX2NtX2NpdGF0aW9ucyIsIDApOwogICAgICAgIH0KICAgICAgfSwgICAgICAKICAgICAgcHNhcmlwc19jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE1MwogICAgICAgIGhvc3QgOiBbJ3BzYXJpcHMuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRCYWl0RWxlbWVudCgnZGl2I2FkdmVydCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZXh0cmF0b3JyZW50X2RvbWFpbnMgOiB7CiAgICAgICAgaG9zdCA6IFsnZXh0cmF0b3JyZW50LmNjJywgJ2V4dHJhdG9ycmVudC5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gcHJldmVudCBwb3B1cAogICAgICAgICAgLy8gc291cmNlIGFyZSBvYmZ1c2NhdGVkIGluIGV4dGVybmFsIGpzCiAgICAgICAgICBBYWsuc2V0Q29va2llKCdwcHVfZGVsYXknLCAxKTsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ3BwdV9tYWluJywgMSk7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCdwcHVfc3ViJywgMSk7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCdwcHVfc2hvd19vbicsIDEpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdG55X2N6IDogewogICAgICAgIGhvc3QgOiBbJ3RueS5jeicsICdwYXN0ZWQuY28nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gcHJldmVudCBwb3B1cAogICAgICAgICAgQWFrLnNldENvb2tpZSgnX18ucG9wdW5kZXJDYXAnLCAxKTsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ19fLnBvcHVuZGVyJywgMSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBjbHViZWRvaGFyZHdhcmVfY29tX2JyIDogeyAvLyB0d28gYW50aWFkYmxvY2sKICAgICAgICBob3N0IDogWydjbHViZWRvaGFyZHdhcmUuY29tLmJyJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmIChBYWsuY29udGFpbnMobG9jYXRpb24uaG9zdCwgJ2ZvcnVtJykpIHsKICAgICAgICAgICAgLy8gU29sdXRpb24gMQogICAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNiYW5uZXIsIHNjcmlwdCB7IGhlaWdodDogNTFweDsgfSIpOwogICAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2RpdiNiYW5uZXInKTsKICAgICAgICAgIH0gZWxzZSB7IC8vIFdlYnNpdGUKICAgICAgICAgICAgLy8gU29sdXRpb24gMQogICAgICAgICAgICBBYWsuYWRkQmFpdEVsZW1lbnQoJ2Rpdi5iYW5uZXJfdG9wbycpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKEFhay5jb250YWlucyhsb2NhdGlvbi5ob3N0LCAnZm9ydW0nKSkgewogICAgICAgICAgICAvLyBTb2x1dGlvbiAyCiAgICAgICAgICAgIEFhay51dy5hZGRCbG9ja2luZy5oaWRlKCk7CiAgICAgICAgICAgIEFhay51dy5hZGRCbG9ja2luZy5raWxsKCk7CiAgICAgICAgICB9IGVsc2UgeyAvLyBXZWJzaXRlCiAgICAgICAgICAgIC8vIFNvbHV0aW9uIDIKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5pZCA9ICcnOwogICAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnLmFkYmxvY2snKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlYnJhc3RhZ2lfY29tIDogewogICAgICAgIGhvc3QgOiBbJ2RlYnJhc3RhZ2kuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNzdHAtbWFpbicpOwogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNzdHAtYmcnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRkbGZyZW5jaF9vcmcgOiB7CiAgICAgICAgaG9zdCA6IFsnZGRsZnJlbmNoLm9yZyddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIEZpeCBidWcgZGlzcGxheSBjb250ZW50CiAgICAgICAgICBBYWsuc2V0RWxlbWVudCgnI2RsZS1jb250ZW50IC5kLWNvbnRlbnQnLCB7CiAgICAgICAgICAgICdjbGFzcycgOiAnJwogICAgICAgICAgfSk7CiAgICAgICAgICBBYWsuc2V0RWxlbWVudCgnI2NvbnRlbnQnLCB7CiAgICAgICAgICAgICdpZCcgOiAnJwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBtZWdhZGVicmlkX2V1IDogewogICAgICAgIGhvc3QgOiBbJ21lZ2EtZGVicmlkLmV1J10sCiAgICAgICAgb25FbmQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBBY3RpdmF0ZSBidXR0b24gZGVicmlkCiAgICAgICAgICBBYWsuc2V0RWxlbWVudCgnLnJlYWxidXR0b24nLCB7CiAgICAgICAgICAgICdvbmNsaWNrJyA6ICcnLAogICAgICAgICAgICAndHlwZScgOiAnc3VibWl0JwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBzbGlkZXBsYXllcl9kb21haW5zIDogewogICAgICAgIC8vIGJ5OiBBbGV4YW5kZXIyNTUKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTMzMwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy81MTUKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMjk2CiAgICAgICAgLy8gZGVtbzogaHR0cDovL3NsaWRlcGxheWVyLmZyL3NsaWRlLzEzMDQwMjYvIwogICAgICAgIGhvc3QgOiBbJ3NsaWRlcGxheWVyLionXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAvLyBEaXNhYmxlIGFudGktYWRibG9ja2VyCiAgICAgICAgICBBYWsudXcuZm9yY2VfcmVtb3ZlX2FkcyA9IHRydWU7CgogICAgICAgICAgLy8gQ2lyY3VtdmVudCAic2hhcmUgdG8gZG93bmxvYWQiIHJ1bGUKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2xpZGVfaWQgPSB3aW5kb3cuZ2V0X2N1cnJlbnRfc2xpZGVfaWQoKTsKICAgICAgICAgICAgdmFyIHNsaWRlX3NydiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwbGF5ZXJfZnJhbWUiKS5zcmMuc3BsaXQoIi8iKVszXTsKICAgICAgICAgICAgdmFyIHRpbWUgPSA4NjQwMCArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApOwogICAgICAgICAgICB2YXIgc2VjcmV0ID0gZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5zdHJ0cih3aW5kb3cuTUQ1LmJhc2U2NCgic2VjcmV0X3ByZXZlZCBzbGlkZXBsYXllciBuZXZlciBzb2x2ZWQgIiArIHRpbWUgKyBzbGlkZV9pZCArICIucHB0IiksICIrLyIsICItICIpKTsKCiAgICAgICAgICAgIHZhciB1cmwgPSAiaHR0cDovL3BsYXllci5zbGlkZXBsYXllci5vcmcvZG93bmxvYWQvIiArIHNsaWRlX3NydiArICIvIiArIHNsaWRlX2lkICsgIi8iICsgc2VjcmV0ICsgIi8iICsgdGltZSArICIvIiArIHNsaWRlX2lkICsgIi5wcHQiOwogICAgICAgICAgICB2YXIgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJhLmRvd25sb2FkX2xpbmsiKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIC8qIFJlbW92ZSBvcmlnaW5hbCAic2hhcmUgdG8gZG93bmxvYWQiIHBvcHVwIGV2ZW50IGxpc3RlbmVyICovCiAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9ICQuX2RhdGEobGlua3NbaV0pLmV2ZW50cy5jbGljazsKICAgICAgICAgICAgICBldmVudHMuc3BsaWNlKDAsIGV2ZW50cy5sZW5ndGgpOwoKICAgICAgICAgICAgICAvKiBTZXQgbm9ybWFsIGxpbmsgaHJlZiBpbnN0ZWFkICovCiAgICAgICAgICAgICAgbGlua3NbaV0uaHJlZiA9IHVybDsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgIH0KICAgICAgfSwKICAgICAgYm9rZXBzcG90X2NvbSA6IHsKICAgICAgICBob3N0IDogWydib2tlcHNwb3QuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIEhpZGUgRGlzY2xhaW1lcgogICAgICAgICAgQWFrLnNldENvb2tpZSgnaGlkZURpYWxvZycsICdoaWRlJyk7CiAgICAgICAgfSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBSZW1vdmUgRGlzYWJsZSBBZEJsb2NrCiAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnI3R1cGlrbGFuJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBwaWNsb2FkX2NvbSA6IHsKICAgICAgICBob3N0IDogWydwaWNsb2FkLm9yZyddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCdwbF9hZGJsb2NrZXInLCBmYWxzZSk7CiAgICAgICAgfSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYWRzX2xvYWRlZCA9IHRydWU7CiAgICAgICAgICBBYWsudXcuaW1hZ2VBZHMgPSBmYWxzZTsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCdkaXZbb25jb250ZXh0bWVudT0icmV0dXJuIGZhbHNlOyJdJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBmcmVlemVkb3dubG9hZF9jb20gOiB7CiAgICAgICAgaG9zdCA6IFsnZnJlZXplZG93bmxvYWQuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKC9mcmVlemVkb3dubG9hZC5jb21cL2Rvd25sb2FkXC8vLnRlc3QobG9jYXRpb24uaHJlZikpIHsKICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJ2JvZHkgPiBkaXZbaWRdJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBtb25uc3V0b2dhdHlhX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogUE0KICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vMUx3NjBoNmsKICAgICAgICBob3N0IDogWydtb25uc3V0b2dhdHlhLmNvbSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgiI3NpdGUtYm94IHtkaXNwbGF5OmJsb2NrO30iKTsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCcjZm9yLWFkLWJsb2NrZXInKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHJhcGlkOF9jb20gOiB7CiAgICAgICAgaG9zdCA6IFsncmFwaWQ4LmNvbSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCdkaXYuYmFja2sgKyAjYmxjb2tNemcnKTsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCdkaXYuYmFja2snKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHR1cmtkb3duX2NvbSA6IHsKICAgICAgICBob3N0IDogWyd0dXJrZG93bi5jb20nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyByZW1vdmUgZmFjZWJvb2sgYm94CiAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnI2R1eXVydScpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmlsbW92aXppamFfZG9tYWlucyA6IHsKICAgICAgICBob3N0IDogWydmaWxtb3ZpemlqYS5tZScsICdmaWxtb3ZpemlqYS5jb20nLCAnZmlsbW92aXppamEuaW4nLCAnZmlsbW92aXppamEubmV0J10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLyoKICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoKTsKICAgICAgICAgIHZhciB3ZWVrZGF5ID0gWyJTdW5kYXkiLCAiTW9uZGF5IiwgIlR1ZXNkYXkiLCAiV2VkbmVzZGF5IiwgIlRodXJzZGF5IiwgIkZyaWRheSIsICJTYXR1cmRheSJdOwogICAgICAgICAgdmFyIG4gPSB3ZWVrZGF5W2QuZ2V0RGF5KCldOwogICAgICAgICAgQWFrLnNldEVsZW1lbnQoJyMnICsgbiwgewogICAgICAgICAgaHRtbCA6ICcnCiAgICAgICAgICB9KTsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCcjJyArIG4pOwogICAgICAgICAgICovCiAgICAgICAgfQogICAgICB9LAogICAgICBoYWNraW50b3NoX3pvbmUgOiB7CiAgICAgICAgLy8gYnk6IEFsZXhhbmRlcjI1NQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWhhY2tpbnRvc2guem9uZQogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlMi5vcmcvRG5COU9qNGYKICAgICAgICBob3N0IDogWydoYWNraW50b3NoLnpvbmUnXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdOwogICAgICAgICAgLy8gRmFrZSBHb29nbGUgYWQgZnJhbWUgY29udGVudAogICAgICAgICAgdmFyIGFkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucyIpOwogICAgICAgICAgYWQxLmNsYXNzTmFtZSA9ICJhZHNieWdvb2dsZSI7CiAgICAgICAgICBhZDEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIkFBSyIpKTsKICAgICAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGFkMSwgaGVhZC5jaGlsZE5vZGVzWzBdKTsKCiAgICAgICAgICAvKgogICAgICAgICAgLy8gRmFrZSBDbGVhbk15TWFjIGFkIGZyYW1lIHNpemUKICAgICAgICAgIHZhciBhZDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgIGFkMi5pZCAgPSAibnljdWhldmdxaSI7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWQyLndyYXBwZWRKU09iamVjdCwgJ2NsaWVudEhlaWdodCcsIHt2YWx1ZTogMX0pOwogICAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoYWQyLCBoZWFkLmNoaWxkTm9kZXNbMF0pOwogICAgICAgICAgICovCgogICAgICAgICAgdmFyIGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFkc2Vuc2VncmV5Jyk7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgICAgICAgICAgIG5vZGUuc3JjID0gQWFrLmltZ0JhaXQ7CiAgICAgICAgICAgIGVsZW1zW2ldLmFwcGVuZENoaWxkKG5vZGUpOwogICAgICAgICAgfQoKICAgICAgICB9LAogICAgICAgIG9uQmVmb3JlU2NyaXB0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgY29udGFpbnMgOiAnZGlzYWJsZSBBREJsb2NrIGNvbXBsZXRlbHknLAogICAgICAgICAgICAgIGV4dGVybmFsIDogZmFsc2UsCiAgICAgICAgICAgICAgcmVtb3ZlIDogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcHJpdmF0ZWluc3RhX2NvbSA6IHsKICAgICAgICBob3N0IDogWydwcml2YXRlaW5zdGEuY29tJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gKyBhYnAgcnVsZQogICAgICAgICAgQWFrLnV3LmRvbnRfc2Nyb2xsID0gZmFsc2U7CiAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgiI292ZXJsYXlfZGl2Iik7CiAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgiI292ZXJsYXlfbWFpbl9kaXYiKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHJpc2lrb2dlc3VuZGhlaXRfZGUgOiB7CiAgICAgICAgaG9zdCA6IFsncmlzaWtvLWdlc3VuZGhlaXQuZGUnXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgd2luZG93LnN0b3AoKTsKICAgICAgICAgIH0sIDUwMDApOwogICAgICAgIH0KICAgICAgfSwKICAgICAgb25lcGxheWxpc3RfZXVfcG4gOiB7CiAgICAgICAgaG9zdCA6IFsnb25lcGxheWxpc3QuZXUucG4nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBraWxsIHBvcHVuZGVyCiAgICAgICAgICBBYWsudXcubWFrZVBvcHVuZGVyID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9LAogICAgICBvbm1lZGFfZGUgOiB7CiAgICAgICAgLy8gbm90ZTogc2NyaXB0IG9iZnVzY2F0ZWQgbGluZSAxMTEwCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZm9ydW0vZGlzY3Vzc2lvbi84NTc2CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEwNjcKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vcWY0NmJOM3oKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vUndIeUYwTkwKICAgICAgICBob3N0IDogWydvbm1lZGEuZGUnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy4kQURQID0gdHJ1ZTsKICAgICAgICAgIEFhay51dy5zYXNfY2FsbEFkID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICBBYWsudXcuc2FzX2NhbGxBZHMgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHR1cmJvZGVicmlkZXVyX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTk5CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzU2MwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy81MjYKICAgICAgICBob3N0IDogWyd0dXJib2RlYnJpZGV1ci5jb20nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuY3JlYXRlRWxlbWVudCh7CiAgICAgICAgICAgIHRhZyA6ICdkaXYnLAogICAgICAgICAgICBpZCA6ICdwdWJkaXJlY3RlJywKICAgICAgICAgICAgaHRtbCA6ICc8aW1nICBzcmM9IicgKyBBYWsuaW1nQmFpdCArICciLz48YSAgaHJlZj0iIyI+Jm5ic3A7PC9hPicsCiAgICAgICAgICAgIGFwcGVuZCA6ICdib2R5JwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICByb2NrZmlsZV9ldSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTI1NgogICAgICAgIGhvc3QgOiBbJ3JvY2tmaWxlLmV1J10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmNyZWF0ZUVsZW1lbnQoewogICAgICAgICAgICB0YWcgOiAnaWZyYW1lJywKICAgICAgICAgICAgc3JjIDogJ2Fib3V0OmJsYW5rJywKICAgICAgICAgICAgc3R5bGUgOiAndmlzaWJpbGl0eTpoaWRkZW47JywKICAgICAgICAgICAgYXBwZW5kIDogJ2JvZHknCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxpbmtidWNrc19hbnRpYWRibG9jayA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvOTMyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzQ2OQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8yNzcKICAgICAgICAvLyB2MzogaHR0cDovL3Bhc3RlYmluLmNvbS8wZ2g4TE1HSAogICAgICAgIC8vIG5vdGU6IG5vIHNvbHV0aW9uLCBhbnRpLWFkYmxvY2sgZGlmZmljdWx0IHRvIGJ5cGFzcyAtLT4gaHR0cDovL3Bhc3RlYmluLmNvbS8xTlJxN1d2WgogICAgICAgIGhvc3QgOiBbJ2xpbmtidWNrcy5jb20nLCAnbWluaXVybHMuY28nLCAncGljYnVja3MuY29tJywgJ3BpY3R1cmVzZXRjLm5ldCcsICdwbGFjZXBpY3R1cmVzLmNvbScsICdwb29udG93bi5uZXQnLCAncXFjLmNvJywgJ3F2dm8uY29tJywgJ3JlYWxmaWxlcy5uZXQnLCAncnFxLmNvJywgJ3NlcmlvdXNkZWFscy5uZXQnLCAnc2VyaW91c2ZpbGVzLmNvbScsICdzZXJpb3VzdXJscy5jb20nLCAnc2V4cGFsYWNlLmdzJywgJ3RoZXNlYmxvZ3MuY29tJywgJ3RoZXNlZmlsZXMuY29tJywgJ3RoZXNlZm9ydW1zLmNvbScsICd0aG9zZWdhbGxlcmllcy5jb20nLCAndGlueWJ1Y2tzLm5ldCcsICd0aW55bGlua3MuY28nLCAndG5hYnVja3MuY29tJywgJ3R1YmV2aXJhbC5jb20nLCAndWJlcnBpY3ouY29tJywgJ3ViZXJ2aWR6LmNvbScsICd1YnVja3MubmV0JywgJ3VnYWxsZXJpZXMubmV0JywgJ3VsdHJhZmlsZXMubmV0JywgJ3VybGJlYXQubmV0JywgJ3VybHB1bHNlLm5ldCcsICd3aGFja3l2aWR6LmNvbScsICd5b3VmYXAubWUnLCAneXl2LmNvJywgJ3p4eG8ubmV0JywgJ3pmZi5jbycsICdsaW5rYnVja3NkbnMuY28nLCAnbWluaXVybHMuY29tJywgJ2R5by5ncycsICdnb25ldmlyYWwuY29tJywgJ2VhZnlmc3VoLm5ldCcsICdzYXNvbnRud2MubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIGRvIG5vdGhpbmcuLi4KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxpbmtidWNrc192aXNpdHNjcmlwdCA6IHsKICAgICAgICAvLyBpc3N1ZToKICAgICAgICBob3N0IDogWydyZWZlcmVuY2VtZWdhLmNvbScsICdmcGFiZC5jb20nLCAnY3JhY2thY2MuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIFNraXAgdmlzaXRTY3JpcHQgd2hlbiBzaXRlIHVzZSBDbG91ZEZsYXJlIFJvY2tldCBTY3JpcHQKICAgICAgICAgIEFhay5zZXRDb29raWUoJ19sYkdhdGVQYXNzZWQnLCB0cnVlKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxpbmtfdGwgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9bGluay50bAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2ZyL2ZvcnVtL2Rpc2N1c3Npb24vODQzNwogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS8xTWtDbm1MNwogICAgICAgIGhvc3QgOiBbJ2xpbmsudGwnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCcuYWRibG9jayB7IGhlaWdodDoxcHg7IH0nKTsKICAgICAgICAgIEFhay51dy5hZGJsb2NrZXIgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHdzdHJlYW1fdmlkZW8gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEzODIKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vRWlBUlZRWHQKICAgICAgICBob3N0IDogWyd3c3RyZWFtLnZpZGVvJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTdHlsZSgnI2FkaXYgeyBoZWlnaHQ6NHB4OyB9Jyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBfNHNoYXJlZF9jb20gOiB7CiAgICAgICAgaG9zdCA6IFsnNHNoYXJlZC5jb20nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBIaWRlICJEaXNhYmxlIEFkQmxvZGsiIG1lc3NhZ2VzCiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LnJlbW92ZSgianNCbG9ja0RldGVjdCIpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcHJvX2RvbWFpbnMgOiB7CiAgICAgICAgaG9zdCA6IFsncHJvLXppay53cycsICdwcm8tdGVjdC53cycsICdwcm8tZGRsLndzJywgJ3Byby1zcG9ydC53cyddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aXNpdGVkZicsIHRydWUpOwogICAgICAgICAgQWFrLnNldENvb2tpZSgndmlzaXRlZGgnLCB0cnVlKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNvbXB0b2lyaGFyZHdhcmVfY29tIDogewogICAgICAgIGhvc3QgOiBbJ2NvbXB0b2lyLWhhcmR3YXJlLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmFkYmxvY2sgPSAnbm9uJzsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJha2Vyc2ZpZWxkX2NvbSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNjU3CiAgICAgICAgLy8gbm90ZTogYWxzbyBzb2x1dGlvbiB0byBBYWtMaXN0CiAgICAgICAgaG9zdCA6IFsnYmFrZXJzZmllbGQuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuQURfU0xPVF9SRU5ERVJFRCA9IHRydWU7CiAgICAgICAgfQogICAgICB9LAogICAgICBla3N0cmFibGFkZXRfZGsgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9ZWtzdHJhYmxhZGV0CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL1IwMjlYcENyCiAgICAgICAgaG9zdCA6IFsnZWtzdHJhYmxhZGV0LmRrJywgJ2ViLmRrJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuQURURUNIID0ge307CiAgICAgICAgfQogICAgICB9LAogICAgICBwY2dhbWVzX2Rvd25sb2FkX25ldCA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTQ1MQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2ZvcnVtL2Rpc2N1c3Npb24vOTMyOAogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9FQlZaZzNWQgogICAgICAgIGhvc3QgOiBbJ3BjZ2FtZXMtZG93bmxvYWQubmV0J10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuc2V0Q29va2llKCdub0FkYmxvY2tOaWNlTWVzc2FnZScsIDEpOwogICAgICAgICAgQWFrLnV3Lm1nQ2FuTG9hZDMwNTQ3ID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGxhY2hhaW5lbWV0ZW9fY29tIDogewogICAgICAgIC8vIG5vdGU6IGFsc28ga2lsbGVkIGJ5IEFha0xpc3QKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTkwCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI0NQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8yMTUKICAgICAgICBob3N0IDogWydsYWNoYWluZW1ldGVvLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmpzX2xvYWRlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9LAogICAgICBtYWM0ZXZlcl9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzk5NwogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS9SUW5DRVlLNgogICAgICAgIGhvc3QgOiBbJ21hYzRldmVyLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmNvcXVpbm91ID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBfNTI3OGJic19jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9NTI3OGJicy5jb20KICAgICAgICBob3N0IDogWyc1Mjc4YmJzLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3Lm15YWFicGZ1bjEyID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICB0aGVzaW1zcmVzb3VyY2VfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPXRoZXNpbXNyZXNvdXJjZS5jb20KICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vREU5cmJqeFkKICAgICAgICBob3N0IDogWyd0aGVzaW1zcmVzb3VyY2UuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuZ2Fkc2l6ZSA9IHRydWU7CiAgICAgICAgICBBYWsudXcuaUhhdmVMb2FkZWRBZHMgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSwKICAgICAgeWVsbG93YnJpZGdlX2NvbSA6IHsKICAgICAgICBob3N0IDogWyd5ZWxsb3dicmlkZ2UuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuZmluYWxpemVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2FtZV9kZWJhdGVfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMzY2CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL1V6c2lYMEZLCiAgICAgICAgaG9zdCA6IFsnZ2FtZS1kZWJhdGUuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYWRfYmxvY2tfdGVzdCA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSwKICAgICAgYWRzY2VuZG1lZGlhIDogewogICAgICAgIGhvc3QgOiBbJ2Fkc2NlbmRtZWRpYS5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gYWRzY2VuZG1lZGlhIC0gaHR0cHM6Ly93d3cuYWRzY2VuZG1lZGlhLmNvbS8KICAgICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJykuaHJlZiA9IGRvY3VtZW50LnJlZmVycmVyOwogICAgICAgICAgdmFyIGhvc3QgPSBsb2NhdGlvbi5ob3N0OwogICAgICAgICAgdmFyIHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZTsKICAgICAgICAgIGlmIChBYWsuY29udGFpbnMocGF0aCwgJy93aWRnZXRfYWRibG9jay5waHAnKSAmJiAhQWFrLmNvbnRhaW5zKHJlZi5ob3N0LCBob3N0KSkgewogICAgICAgICAgICAvLyBBdXRvIHJlcG9ydAogICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0Fkc2NlbmRtZWRpYScsIHJlZi5ob3N0LCBob3N0KTsKICAgICAgICAgICAgLy8gTm90aWZpY2F0aW9uCiAgICAgICAgICAgIEFhay5ub3RpZmljYXRpb24oJ1lvdSBtdXN0IHN1YnNjcmliZSB0byA8Yj5BYWtMaXN0IChBbnRpLUFkYmxvY2sgS2lsbGVyICk8L2I+IDxhIGhyZWY9IicgKyBBYWsuc3Vic2NyaWJlVVJMICsgJyIgdGFyZ2V0PSJfYmxhbmsiPlN1YnNjcmliZTwvYT4nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFkd29ya21lZGlhIDogewogICAgICAgIGhvc3QgOiBbJ2Fkd29ya21lZGlhLmNvbScsICdsb3h0ay5jb20nLCAnY29udGVudGxvY2tpbmduZXR3b3Jrcy5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gQWRXb3JrTWVkaWEgLSBodHRwczovL3d3dy5hZHdvcmttZWRpYS5jb20vCiAgICAgICAgICB2YXIgcmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLmhyZWYgPSBkb2N1bWVudC5yZWZlcnJlcjsKICAgICAgICAgIHZhciBob3N0ID0gbG9jYXRpb24uaG9zdDsKICAgICAgICAgIHZhciBwYXRoID0gbG9jYXRpb24ucGF0aG5hbWU7CiAgICAgICAgICBpZiAoQWFrLmNvbnRhaW5zKHBhdGgsICcvaGVscC9yZW1vdmVBQi5waHAnKSAmJiAhQWFrLmNvbnRhaW5zKHJlZi5ob3N0LCBob3N0KSkgewogICAgICAgICAgICAvLyBBdXRvIHJlcG9ydAogICAgICAgICAgICBBYWsuaW5mbygnQWR3b3JrbWVkaWEnLCByZWYuaG9zdCwgaG9zdCk7CiAgICAgICAgICAgIC8vIE5vdGlmaWNhdGlvbgogICAgICAgICAgICBBYWsubm90aWZpY2F0aW9uKCdZb3UgbXVzdCBzdWJzY3JpYmUgdG8gPGI+QWFrTGlzdCAoQW50aS1BZGJsb2NrIEtpbGxlciApPC9iPiA8YSBocmVmPSInICsgQWFrLnN1YnNjcmliZVVSTCArICciIHRhcmdldD0iX2JsYW5rIj5TdWJzY3JpYmU8L2E+Jyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAvLyBQbGF5ZXJzCiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgIGtpc3NhbmltZV9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzQ1MQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8zODEKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMzAyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzI1NwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNzgKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTk2CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzU2CiAgICAgICAgaG9zdCA6IFsna2lzc2FuaW1lLmNvbScsICdraXNzYW5pbWUudG8nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gTWFza2luZyBhZHMKICAgICAgICAgIEFhay5hZGRTdHlsZSgnaWZyYW1lW2lkXj0iYWRzSWZybWUiXSwgLmRpdkNsb3NlQnV0IHsgZGlzcGxheTpub25lOyB9Jyk7CiAgICAgICAgICAvLyBTb2x1dGlvbiAxCiAgICAgICAgICBBYWsudXcuRG9EZXRlY3QyID0gbnVsbDsKICAgICAgICB9LAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAvLyBTb2x1dGlvbiAxIGFicCBydWxlCiAgICAgICAgICAvLyBAQHx8a2lzc2FuaW1lLmNvbV4kZWxlbWhpZGUKCiAgICAgICAgICB2YXIgZGl2Q29udGVudFZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RpdkNvbnRlbnRWaWRlbycpOwoKICAgICAgICAgIC8vIFNvbHV0aW9uIDIKICAgICAgICAgIGlmIChBYWsudXcuRG9EZXRlY3QyKSB7CiAgICAgICAgICAgIEFhay51dy5Eb0RldGVjdDIgPSBudWxsOwogICAgICAgICAgICBBYWsudXcuQ2hlY2tBZEltYWdlID0gbnVsbDsKICAgICAgICAgICAgQWFrLmluZm8oJ1NvbHV0aW9uIDInKTsKICAgICAgICAgIH0gLy9Tb2x1dGlvbiAzCiAgICAgICAgICBlbHNlIGlmIChkaXZDb250ZW50VmlkZW8pIHsKCiAgICAgICAgICAgIHZhciBkaXZEb3dubG9hZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkaXZEb3dubG9hZCcpLmNsb25lTm9kZSh0cnVlKTsKCiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGRpdkNvbnRlbnRWaWRlby5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICBBYWsudXcuRG9IaWRlRmFrZSgpOwogICAgICAgICAgICAgIGRpdkNvbnRlbnRWaWRlby5hcHBlbmRDaGlsZChkaXZEb3dubG9hZCk7CiAgICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJ2lmcmFtZVtpZF49ImFkc0lmcm1lIl0sIC5kaXZDbG9zZUJ1dCcpOwogICAgICAgICAgICAgIEFhay5pbmZvKCdTb2x1dGlvbiAzJyk7CiAgICAgICAgICAgIH0sIDU1MDApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgS2lzc2NhcnRvb25fbWUgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzQ4OAogICAgICAgIGhvc3QgOiBbJ2tpc3NjYXJ0b29uLm1lJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcueGFabEUgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9LAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCdpZnJhbWVbaWRePSJhZHNJZnJtZSJdJyk7CiAgICAgICAgfQogICAgICB9LAogICAgICBvcGVubG9hZF9kb21haW5zIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPW9wZW5sb2FkCiAgICAgICAgaG9zdCA6IFsnb3BlbmxvYWQuY28nLCAnb3BlbmxvYWQuaW8nLCAnb3BlbmxvYWQudHYnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3LmFkYmxvY2sgPSBmYWxzZTsKICAgICAgICAgIEFhay51dy5hZGJsb2NrMiA9IGZhbHNlOwogICAgICAgICAgQWFrLnV3LnBvcEFkc0xvYWRlZCA9IHRydWU7CiAgICAgICAgICAvLyBoaWRlIGZha2UgcGxheSBidXR0b24gdXNlZCB0byBvcGVuIHBvcHVuZGVyCiAgICAgICAgICAvL0Fhay5hZGRTdHlsZSgnI3ZpZGVvb3ZlcmxheSB7IGRpc3BsYXk6bm9uZTsgfScpCiAgICAgICAgfQogICAgICB9LAogICAgICB5b3V3YXRjaF9vcmcgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9eW91d2F0Y2gKICAgICAgICAvLyB0ZXN0OiBodHRwOi8veW91d2F0Y2gub3JnL2VtYmVkLTU5cDdpM2Nka3NlMC00NTN4MzIwLmh0bWwKICAgICAgICAvLyB0ZXN0OiBodHRwOi8veW91d2F0Y2gub3JnLzU5cDdpM2Nka3NlMAogICAgICAgIGhvc3QgOiBbJ3lvdXdhdGNoLm9yZycsICdjaG91aGFhLmluZm8nLCAnYWh6YWhnNm9oYi5jb20nLCAnYWh6YWhnNm9oYi5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gc2tpcCBhbnRpLWFkYmxvY2sKICAgICAgICAgIEFhay51dy5hZHNTaG93UG9wdXAxID0gMTsKICAgICAgICB9LAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIHJlbm92ZSBhZHMgKyBmYWtlIHBsYXkgYnV0dG9uCiAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnI3BsYXllcl9pbWosICNwbGF5ZXJfaW1qICsgZGl2W2lkXScpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZXhhc2hhcmVfY29tIDogewogICAgICAgIC8vIGJ5OiBXYXRpbGluCiAgICAgICAgLy8gcHVsbDogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9wdWxsLzUxOQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWV4YXNoYXJlLmNvbQogICAgICAgIC8vIHRlc3Q6ICBodHRwOi8vZXhhc2hhcmUuY29tL2dhbHcyZ2Uya3pzdgogICAgICAgIGhvc3QgOiBbJ2V4YXNoYXJlLmNvbScsICdjaGVmdGkuaW5mbycsICdib2plbTNhLmluZm8nLCAnYWppaGV6by5pbmZvJywgJ3lhaG1haWIzYWkuY29tJywgJ3lhaG1haWIzYWkuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIHNraXAgYW50aS1hZGJsb2NrCiAgICAgICAgICBBYWsudXcuYWRzU2hvd1BvcHVwMSA9IDE7CiAgICAgICAgfSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyByZW5vdmUgYWRzICsgZmFrZSBwbGF5IGJ1dHRvbgogICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNwbGF5ZXJfZ2F6LCAjcGxheWVyX2dheiArIGRpdltpZF0nKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFuMW1lX3NlIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xOTAKICAgICAgICBob3N0IDogWydhbjFtZS5zZSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBBYWsudXcuaXNCbG9ja0FkczIgPSBmYWxzZTsKICAgICAgICAgIH0sIDEwMDAwKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGhxcV90diA6IHsgLy8gcHV0bG9ja2VyLmlzCiAgICAgICAgaG9zdCA6IFsnaHFxLnR2J10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gKyBhYnAgcnVsZQogICAgICAgICAgLy8gaHR0cDovL2hxcS50di9wbGF5ZXIvZW1iZWRfcGxheWVyLnBocD92aWQ9UjNER0hHM0dLWFg3JmF1dG9wbGF5PW5vCiAgICAgICAgICBpZiAoJy9wbGF5ZXIvZW1iZWRfcGxheWVyLnBocCcgPT0gbG9jYXRpb24ucGF0aG5hbWUpIHsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybVtpZF49ImZvcm0tIl0nKS5zdWJtaXQoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIFBvbGFuZAogICAgICB3cF9kb21haW5zIDogewogICAgICAgIC8vIE5vdGU6IGRpc2FibGUgRWFzeVByaXZhY3kKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvOTU2CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzkwNQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8zMDAKICAgICAgICBob3N0IDogWydiaXp0b2sucGwnLCAnd3AudHYnLCAnd3AucGwnLCAnc3BvcnRvd2VmYWt0eS5wbCcsICdrYWZldGVyaWEudHYnLCAna2FmZXRlcmlhLnBsJywgJy53cnp1dGEucGwnLCAncHVkZWxlay50dicsICdrb21lZGlvd28ucGwnLCAnc2ZvcmEucGwnLCAnYXV0b2tyYXRhLnBsJywgJ3Nwb3J0ZmFuLnBsJywgJ3dhd2Fsb3ZlLnBsJywgJ2hvdG1vbmV5LnBsJywgJ2FsZXNlcmlhbGUucGwnLCAnYmFib2wucGwnLCAnc25vYmthLnBsJywgJ25vY290eS5wbCcsICdtb25leS5wbCcsICdhYmN6ZHJvd2llLnBsJywgJ2dhZHpldG9tYW5pYS5wbCcsICdhdXRva3VsdC5wbCcsICdrb21vcmtvbWFuaWEucGwnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gcHJldmVudCBwb3B1cCBhbnRpLWFkYmxvY2sgZnJvbSBhYmN6ZHJvd2llLnBsCiAgICAgICAgICBBYWsuc2V0Q29va2llKCdBQkNBQkMnLCB0cnVlKTsKICAgICAgICB9LAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIAogICAgICAgICAgQWFrLmhhc0VsZW1lbnQoJy53cC1wbGF5ZXInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAKICAgICAgICAgICAgdmFyIHJlcGxhY2VQbGF5ZXJXUCA9IGZ1bmN0aW9uIChtaWQsIHBsYXllcikgewogICAgICAgICAgICAgIC8qIFJlcXVlc3QKICAgICAgICAgICAgICBodHRwOi8vZ2V0LndwLnR2Lz9taWQ9MTY2MTA1NgogICAgICAgICAgICAgIGh0dHA6Ly93cC50di9wbGF5ZXIvbWlkLDE2NjEwNTYsZW1iZWQuanNvbgogICAgICAgICAgICAgIGh0dHA6Ly9nZXQud3AudHYvP2Y9Mjg5NjQ2Mi4xNDI2MzI5MDU2OTA0Lmwud2VibSZybmQ9MQogICAgICAgICAgICAgIGh0dHBzOi8vd3AudHYvcGxheWVyL21pZCwxNzQ3MTE3LGVtYmVkLmpzb24KICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICBBYWsucmVxdWVzdCh7CiAgICAgICAgICAgICAgICB1cmwgOiAnaHR0cDovL3dwLnR2L3BsYXllci9taWQsJyArIG1pZCArICcsZW1iZWQuanNvbicsCiAgICAgICAgICAgICAgICBvbmxvYWQgOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgIHZhciByZXMgPSByZXN1bHQucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShyZXMpOwogICAgICAgICAgICAgICAgICBBYWsubG9nKG9iaik7CgogICAgICAgICAgICAgICAgICB2YXIgUGxheWVyID0gbmV3IEFhay5wbGF5ZXIoKTsKICAgICAgICAgICAgICAgICAgUGxheWVyLnZpZGVvanMocGxheWVyLCB7CiAgICAgICAgICAgICAgICAgICAgc291cmNlIDogQWFrLmZpeFByb3RvY29sVVJMKG9iai5jbGlwLnVybFsxXS51cmwpLCAvLyBIRAogICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnbXA0JywKICAgICAgICAgICAgICAgICAgICBhdXRvcGxheSA6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIHJlcGxhY2VQbGF5ZXJXcnp1dGEgPSBmdW5jdGlvbiAoa2V5LCBjaGFubmVsLCBlbGVtKSB7CiAgICAgICAgICAgICAgQWFrLnJlcXVlc3QoewogICAgICAgICAgICAgICAgLy8gaHR0cDovL3d3dy53cnp1dGEucGwvbnBwL2VtYmVkL3dvbG5hcG9sc2thMi8wSTBIUTJtdXRKYwogICAgICAgICAgICAgICAgdXJsIDogJ2h0dHA6Ly93d3cud3J6dXRhLnBsL25wcC9lbWJlZC8nICsgY2hhbm5lbCArICcvJyArIGtleSwKICAgICAgICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3VsdC5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHJlcyk7CiAgICAgICAgICAgICAgICAgIEFhay5sb2cob2JqKTsKCiAgICAgICAgICAgICAgICAgIHZhciBQbGF5ZXIgPSBuZXcgQWFrLnBsYXllcigpOwogICAgICAgICAgICAgICAgICBQbGF5ZXIudmlkZW9qcyhlbGVtLCB7CiAgICAgICAgICAgICAgICAgICAgc291cmNlIDogQWFrLmZpeFByb3RvY29sVVJMKG9iai51cmxbMF0udXJsKSwgLy9IRAogICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnbXA0JywKICAgICAgICAgICAgICAgICAgICBhdXRvcGxheSA6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gVXNpbmcgYW4gZXh0ZXJuYWwgZmxhc2ggcGxheWVyIGlzIGltcG9zc2libGUgYmVjYXVzZSBwcm90ZWN0ZWQgYnkgY3Jvc3Nkb21haW4ueG1sCiAgICAgICAgICAgIHZhciBwbGF5ZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLndwLXBsYXllcicpOyAvLyAgI1BsYXllcjAsICNQbGF5ZXIxLCAjbWFpblBsYXllcgogICAgICAgICAgICBpZiAocGxheWVycy5sZW5ndGgpIHsKICAgICAgICAgICAgICAvLyBmaXhidWcgZ21feGhyIGxvb3AgcmVxdWVzdCAtIGh0dHA6Ly90aW55dXJsLmNvbS9wcWE5aHRxCiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgbWlkID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBwbGF5ZXJzW2ldOwogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHBsYXllci5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IHBsYXllci5wcmV2aW91c1NpYmxpbmc7CiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBwbGF5ZXIucXVlcnlTZWxlY3RvcignLnRpdGxlQ29udCBhLnRpdGxlJyk7CiAgICAgICAgICAgICAgICB2YXIgZW1iZWR2aWRlb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbc3JjKj0iL2VtYmVkX3ZpZGVvLmpzIl0nKTsKICAgICAgICAgICAgICAgIEFhay5sb2cocGxheWVyLCBwYXJlbnQsIHNjcmlwdCwgdGl0bGUpOwoKICAgICAgICAgICAgICAgIGlmIChlbWJlZHZpZGVvcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgLy8gcHVkZWxlay53cnp1dGEucGw6IGh0dHA6Ly90aW55dXJsLmNvbS9sOGpvNXYyCiAgICAgICAgICAgICAgICAgIC8vIHB1ZGVsZWsudHY6IGh0dHA6Ly90aW55dXJsLmNvbS9rbHl6aDZyLCBodHRwOi8vdGlueXVybC5jb20vejdmcjg5dgogICAgICAgICAgICAgICAgICAvLyBwdWRlbGVrLnR2ICh0cmlwbGUpOiBodHRwOi8vdGlueXVybC5jb20vbjliMjdvMgogICAgICAgICAgICAgICAgICAvLyBmaWxtLndwLnBsOiBodHRwOi8vdGlueXVybC5jb20vcTdrNWJ4cAogICAgICAgICAgICAgICAgICB2YXIgZW1iZWR2aWRlbyA9IGVtYmVkdmlkZW9zW2ldOwogICAgICAgICAgICAgICAgICB2YXIga2V5ID0gL2tleT0oXHcrKS8uZXhlYyhlbWJlZHZpZGVvLnNyYylbMV07CiAgICAgICAgICAgICAgICAgIHZhciBjaGFubmVsID0gL2xvZ2luPShcdyspLy5leGVjKGVtYmVkdmlkZW8uc3JjKVsxXTsKICAgICAgICAgICAgICAgICAgdmFyIGF1dG9zdGFydCA9IC9hdXRvcGxheS8udGVzdChlbWJlZHZpZGVvLnNyYyk7CiAgICAgICAgICAgICAgICAgIHJlcGxhY2VQbGF5ZXJXcnp1dGEoa2V5LCBjaGFubmVsLCBwbGF5ZXIsIGF1dG9zdGFydCk7CiAgICAgICAgICAgICAgICAgIEFhay5sb2coJ2VtYmVkX3ZpZGVvLmpzJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRpdGxlICYmIC9taWQvLnRlc3QodGl0bGUuaHJlZikpIHsKICAgICAgICAgICAgICAgICAgLy8gc3BvcnRvd2VmYWt0eS5wbDogaHR0cDovL3Rpbnl1cmwuY29tL2w2emFiY3gKICAgICAgICAgICAgICAgICAgbWlkID0gdGl0bGUuaHJlZi5tYXRjaCgvbWlkWz0sXShbMC05XSspLyk7CiAgICAgICAgICAgICAgICAgIEFhay5sb2coJ3RpdGxlLmhyZWYnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50LmlkKSB7CiAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuZGF0YXNldC51cmwpIHsKICAgICAgICAgICAgICAgICAgICAvLyB3cC50djogaHR0cDovL3Rpbnl1cmwuY29tL3B6ZGUyOXQKICAgICAgICAgICAgICAgICAgICBtaWQgPSBwYXJlbnQuZGF0YXNldC51cmwubWF0Y2goL21pZFs9LF0oWzAtOV0rKS8pOwogICAgICAgICAgICAgICAgICAgIEFhay5sb2coJ3BhcmVudC5kYXRhc2V0LnVybCcpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQucHJldmlvdXNTaWJsaW5nLmlubmVySFRNTCkgewogICAgICAgICAgICAgICAgICAgICAgLy8gd2lhZG9tb3NjaS53cC5wbDogaHR0cDovL3Rpbnl1cmwuY29tL2dxdHQ5Y2EKICAgICAgICAgICAgICAgICAgICAgIG1pZCA9IHBhcmVudC5wcmV2aW91c1NpYmxpbmcuaW5uZXJIVE1MLm1hdGNoKC9taWRbPSxdKFswLTldKykvKTsKICAgICAgICAgICAgICAgICAgICAgIEFhay5sb2coJ3NjcmlwdC5pbmxpbmUuaW5uZXJIVE1MJyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIGthZmV0ZXJpYS50djogaHR0cDovL3Rpbnl1cmwuY29tL25vZnA1OGEKICAgICAgICAgICAgICAgICAgICAgIC8vIGFiY3pkcm93aWUucGw6IGh0dHA6Ly90aW55dXJsLmNvbS9oeDZzNWV0CiAgICAgICAgICAgICAgICAgICAgICBtaWQgPSBwYXJlbnQuaW5uZXJIVE1MLm1hdGNoKC9taWRbPSxdKFswLTldKykvKTsKICAgICAgICAgICAgICAgICAgICAgIEFhay5sb2coJ3BhcmVudC5pbm5lckhUTUwnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NyaXB0ICYmIHNjcmlwdC50YWdOYW1lID09ICdTQ1JJUFQnKSB7CiAgICAgICAgICAgICAgICAgIC8vIGZpbG0ud3AucGw6IGh0dHA6Ly90aW55dXJsLmNvbS9taDlvbmZ3CiAgICAgICAgICAgICAgICAgIC8vIHB1ZGVsZWsudHYgKGRvdWJsZSk6IGh0dHA6Ly90aW55dXJsLmNvbS9sZWZ2d3R4CiAgICAgICAgICAgICAgICAgIG1pZCA9IHNjcmlwdC5pbm5lckhUTUwubWF0Y2goL21pZFs9LF0oWzAtOV0rKS8pOwogICAgICAgICAgICAgICAgICBBYWsubG9nKCdzY3JpcHQuc3JjLmlubmVySFRNTCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG1pZCAhPT0gbnVsbCAmJiBtaWQubGVuZ3RoID09IDIpIHsKICAgICAgICAgICAgICAgICAgcmVwbGFjZVBsYXllcldQKG1pZFsxXSwgcGxheWVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbW9qZV9maWxteV9uZXR3b3JrOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEwMTAKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vN0cyUkJucXEKICAgICAgICBob3N0IDogWydtb2plLWZpbG15LnRrJywgJ21vamUtZmlsbXkubGl2ZSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBzZWFyY2h2YWx1ZSA9IFsndmFyIHBsYXllckluc3RhbmNlJywgJ30pOyddOwogICAgICAgICAgdmFyIHNjcmlwdCA9IEFhay5oYXNTY3JpcHQoc2VhcmNodmFsdWVbMF0pOwoKICAgICAgICAgIGlmIChzY3JpcHQpIHsKICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNjcmlwdC5pbm5lckhUTUw7CiAgICAgICAgICAgIHZhciBzdHIgPSBzb3VyY2Uuc3Vic3RyaW5nKHNvdXJjZS5sYXN0SW5kZXhPZihzZWFyY2h2YWx1ZVswXSksIHNvdXJjZS5sYXN0SW5kZXhPZihzZWFyY2h2YWx1ZVsxXSkgKyBzZWFyY2h2YWx1ZVsxXS5sZW5ndGgpOwogICAgICAgICAgICBBYWsuYWRkU2NyaXB0KHN0cik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB0dm5fcGwgOiB7CiAgICAgICAgLy8gYnk6IFJlZWssIE1hcmVrCiAgICAgICAgLy8gc29sdXRpb246IGh0dHA6Ly90aW55dXJsLmNvbS9vaGJ2ejRyLCBodHRwOi8vdGlueXVybC5jb20vanE4czQ2MgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPXR2bi5wbAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPXR2bjI0LnBsCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9cGxheWVyLnBsCiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL282ZDloNjYsIGh0dHA6Ly90aW55dXJsLmNvbS96NzdtNHpoCiAgICAgICAgaG9zdCA6IFsndHZuLnBsJywgJ3R2bjI0LnBsJywgJ3BsYXllci5wbCddLAogICAgICAgIG9uRW5kIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmhhc0VsZW1lbnQoJ2hlYWRlci5kZXRhaWxJbWFnZScsIGZ1bmN0aW9uICh0aGlzRWxlbWVudCkgewogICAgICAgICAgICBpZiAoQWFrLmdldENvb2tpZSgnY291bnRyeV9jb2RlJykgJiYgQWFrLmdldFNlc3Npb24oJ2dlbmVyYXRlVG9rZW4nKSkgewogICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZi5zcGxpdCgvWy4sXS8pOwogICAgICAgICAgICAgICAgdmFyIGlkID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMl07CiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gewogICAgICAgICAgICAgICAgICBwbGF0Zm9ybSA6ICJNb2JpbGUiLAogICAgICAgICAgICAgICAgICB0ZXJtaW5hbCA6ICJBbmRyb2lkIiwKICAgICAgICAgICAgICAgICAgZm9ybWF0IDogImpzb24iLAogICAgICAgICAgICAgICAgICB2IDogIjIuMCIsCiAgICAgICAgICAgICAgICAgIGF1dGhLZXkgOiAiYjRiYzk3MTg0MGRlNjNkMTA1YjMxNjY0MDNhYTFiZWEiLAogICAgICAgICAgICAgICAgICB0eXBlIDogImVwaXNvZGUiLAogICAgICAgICAgICAgICAgICBpZCA6IGlkLAogICAgICAgICAgICAgICAgICBzb3J0IDogIm5ld2VzdCIsCiAgICAgICAgICAgICAgICAgIG0gOiAiZ2V0SXRlbSIsCiAgICAgICAgICAgICAgICAgIGRldmljZVNjcmVlbkhlaWdodCA6IDE2MDAsCiAgICAgICAgICAgICAgICAgIGRldmljZVNjcmVlbldpZHRoIDogMjU2MAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBhcGkgPSAnaHR0cHM6Ly9hcGkudHZucGxheWVyLnBsL2FwaS8/JyArIEFhay5zZXJpYWxpemUocGFyYW1zKTsKICAgICAgICAgICAgICAgIHZhciBwcm94eSA9ICdodHRwOi8vd3d3LnByb3h5LnhtYy5wbC9pbmRleC5waHA/aGw9M2U1JnE9JzsJCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIEdldCB2aWRlb1VybAogICAgICAgICAgICAgICAgQWFrLnJlcXVlc3QoewogICAgICAgICAgICAgICAgICB1cmwgOiBBYWsuZ2V0Q29va2llKCdjb3VudHJ5X2NvZGUnKSAhPSAnUEwnID8gcHJveHkgKyBBYWsuZW5jb2RlVVJJKGFwaSkgOiBhcGksCiAgICAgICAgICAgICAgICAgIGhlYWRlcnMgOiB7CiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiIDogIk1vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCA0LjI7IGVuLXVzOyBOZXh1cyAxMCBCdWlsZC9KVlAxNUkpIEFwcGxlV2ViS2l0LzUzNC4zMCAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIFNhZmFyaS81MzQuMzAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdWx0LnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgICBBYWsubG9nKHJlcyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBKU09OLnBhcnNlKHJlcyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvVXJsID0gby5pdGVtLnZpZGVvcy5tYWluLnZpZGVvX2NvbnRlbnRbTnVtYmVyKEFhay5vcHRzLnZpZGVvSEQpXS51cmw7CiAgICAgICAgICAgICAgICAgICAgdmFyIGdlbmVyYXRlVG9rZW4gPSBuZXcgRnVuY3Rpb24oJ3ZpZGVvVXJsJywgQWFrLmdldFNlc3Npb24oJ2dlbmVyYXRlVG9rZW4nKSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvVXJsV2l0aFNlZWQgPSBnZW5lcmF0ZVRva2VuKHZpZGVvVXJsKTsKICAgICAgICAgICAgICAgICAgICB2YXIgUGxheWVyID0gbmV3IEFhay5wbGF5ZXIoKTsKICAgICAgICAgICAgICAgICAgICBQbGF5ZXIudmlkZW9qcyh0aGlzRWxlbWVudCwgewogICAgICAgICAgICAgICAgICAgICAgc291cmNlIDogdmlkZW9VcmxXaXRoU2VlZCwKICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnbXA0JywKICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sIHt9LCB7aW5zZXJ0Oidpbm5lcid9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgQWFrLnJlcXVlc3QoeyAvLyBnZXQgYW5kIHN0b3JlIGdlbmVyYXRlVG9rZW4gZnVuY3Rpb24KICAgICAgICAgICAgICAgIHVybCA6ICdodHRwOi8vcGFzdGViaW4uY29tL3Jhdy9EOXFNNERSMycsCiAgICAgICAgICAgICAgICBvbmxvYWQgOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3BvbnNlLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgQWFrLnNldFNlc3Npb24oJ2dlbmVyYXRlVG9rZW4nLCByZXMpOwogICAgICAgICAgICAgICAgICBBYWsucmVxdWVzdCh7IC8vIGdldCB1c2VyIGlwCiAgICAgICAgICAgICAgICAgICAgdXJsIDogJ2h0dHA6Ly9pcC1hcGkuY29tL2pzb24nLAogICAgICAgICAgICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3BvbnNlLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXMpOwogICAgICAgICAgICAgICAgICAgICAgQWFrLnNldENvb2tpZSgnY291bnRyeV9jb2RlJywganNvbi5jb3VudHJ5Q29kZSk7CiAgICAgICAgICAgICAgICAgICAgICBBYWsucmVmcmVzaCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgaXBsYV90diA6IHsKICAgICAgICAvLyBieTogTWFyZWsKICAgICAgICAvLyBzb2x1dGlvbjogaHR0cDovL3Rpbnl1cmwuY29tL3B0YjR5YmcKICAgICAgICAvLyBpc3N1ZS4gaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTIyCiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL2h6N2dweHgKICAgICAgICBob3N0IDogWydpcGxhLnR2J10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCcuaHRtbDUtcGxheWVyLXdyYXBwZXIgeyBkaXNwbGF5Om5vbmU7IH0nKTsgLy8gY2hyb21lL29wZXJhCiAgICAgICAgICB2YXIgb2xkUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmh0bWw1LXBsYXllci13cmFwcGVyLCAjdm9kLXBsYXllcicpOwogICAgICAgICAgQWFrLnJlcXVlc3QoewogICAgICAgICAgICB1cmwgOiAnL1ZPRC9wbGF5LWluLWlwbGEvJyArIGxvY2F0aW9uLmhyZWYubWF0Y2goL1wvdm9kLShcZCspLylbMV0sCiAgICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICB2YXIgdmlkZW9VUkw7CiAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3VsdC5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgdmFyIGlkbiA9IHJlcy5tYXRjaCgvaXBsYTpcL1wvcGxheXZvZC0xXHwoW2EtejAtOV0rKS8pWzFdOwogICAgICAgICAgICAgIEFhay5sb2coaWRuKTsKICAgICAgICAgICAgICBBYWsucmVxdWVzdCh7CiAgICAgICAgICAgICAgICB1cmwgOiAnaHR0cDovL2dldG1lZGlhLnJlZGVmaW5lLnBsL3ZvZHMvZ2V0X3ZvZC8/Y3BpZD0xJnVhPW1pcGxhLzIzJm1lZGlhX2lkPScgKyBpZG4sCiAgICAgICAgICAgICAgICBvbmxvYWQgOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgIHZhciByZXMgPSByZXN1bHQucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgICB2YXIgbyA9IEpTT04ucGFyc2UocmVzKTsKICAgICAgICAgICAgICAgICAgQWFrLmxvZyhvKTsKICAgICAgICAgICAgICAgICAgaWYgKG8udm9kLnZpZGVvX2hkKSB7CiAgICAgICAgICAgICAgICAgICAgdmlkZW9VUkwgPSBvLnZvZC52aWRlb19oZDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvLnZvZC52aWRlbykgewogICAgICAgICAgICAgICAgICAgIHZpZGVvVVJMID0gby52b2QudmlkZW87CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmlkZW9VUkwgPSBvLnZvZC5jb3BpZXNbMF0udXJsOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICB2YXIgUGxheWVyID0gbmV3IEFhay5wbGF5ZXIoKTsKICAgICAgICAgICAgICAgICAgUGxheWVyLnZpZGVvanMob2xkUGxheWVyLCB7CiAgICAgICAgICAgICAgICAgICAgc291cmNlIDogdmlkZW9VUkwsCiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdtcDQnLAogICAgICAgICAgICAgICAgICAgIHdpZHRoIDogODIwLAogICAgICAgICAgICAgICAgICAgIGhlaWdodCA6IDQ1MCwKICAgICAgICAgICAgICAgICAgICBhdXRvcGxheSA6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGtvc2NpYW5fbmV0IDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy85MTQKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20veUdTUEJScWUKICAgICAgICBob3N0IDogWydrb3NjaWFuLm5ldCddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5iYW4nKTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZWxlbXNbaV0ucmVtb3ZlKCk7CiAgICAgICAgICAgIC8vZWxlbXNbaV0uaW5uZXJIVE1MID0gJzxicj4nOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gRnJhbmNlCiAgICAgIHBsYXl0dl9mciA6IHsgLy8gcmVzZWFyY2ggc29sdXRpb24KICAgICAgICBob3N0IDogWydwbGF5LnR2JywgJ3BsYXl0di5mciddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkge30sCiAgICAgICAgb25FbmQgOiBmdW5jdGlvbiAoKSB7fQogICAgICB9LAogICAgICBybWNzcG9ydGJmbXR2X2NvbSA6IHsgLy8gd2VicmFkaW8KICAgICAgICBob3N0IDogWydybWNzcG9ydC5iZm10di5jb20nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgdmFyIGZsYXNodmFycyA9IHsKICAgICAgICAgICAgdXJsUmFkaW8gOiAiaHR0cDovL21wM2xnNC50ZGYtY2RuLmNvbS8xMDE2MC9ybWMubXAzIiwKICAgICAgICAgICAgbm9tIDogImxpdmUiLAogICAgICAgICAgICBjYXRlZ29yaWUgOiAibGl2ZSIsCiAgICAgICAgICAgIHVybFNtYXJ0IDogIiIgLy8gc2V0IGVtcHR5IHRvIHJlbW92ZSBhdWRpbyBhZAogICAgICAgICAgfTsKICAgICAgICAgIHZhciBwYXJhbXMgPSB7CiAgICAgICAgICAgIHdtb2RlIDogInRyYW5zcGFyZW50IgogICAgICAgICAgfTsKCiAgICAgICAgICBBYWsudXcuc3dmb2JqZWN0LmVtYmVkU1dGKCIvc3dmL1JNQ0xJVkUuc3dmIiwgImxpdmVwbGF5ZXIiLCAiNzAiLCAiOTAiLCAiMTAuMC4wIiwgIiIsIGZsYXNodmFycywgcGFyYW1zKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGVjbHlwc2lhX2NvbSA6IHsKICAgICAgICBob3N0IDogWydlY2x5cHNpYS5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIFNvbHV0aW9uIDEKICAgICAgICAgIC8vIGFicCBydWxlcwoKICAgICAgICAgIC8vIFNvbHV0aW9uIDIKICAgICAgICAgIEFhay51dy5pc0FCQWN0aXZhdGVkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9OyAvLyBLaWxsIGFudGlhZGJsb2NrCiAgICAgICAgICBBYWsudXcucmVmcmVzaF9pZnJhbWUgPSBmdW5jdGlvbiAoKSB7fTsgLy8gU3RvcCBhZHMgdG8gYmUgbG9hZGVkCiAgICAgICAgfSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIFNvbHV0aW9uIDMKICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W2lkXj0id2VidHZfaWZyYW1lXyJdJyk7CiAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCkgewogICAgICAgICAgICB2YXIgdmlkZW9JZCA9IGVsZW1lbnQuaWQuc3BsaXQoJ18nKVsyXTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnPGlmcmFtZSBmcmFtZWJvcmRlcj0iMCIgd2lkdGg9IjgxMiIgaGVpZ2h0PSI1MDAiIHNyYz0iaHR0cDovL3d3dy5kYWlseW1vdGlvbi5jb20vZW1iZWQvdmlkZW8vJyArIHZpZGVvSWQgKyAnP2xvZ289MCZhdXRvUGxheT0xJmF1dG9NdXRlPTAiPjwvaWZyYW1lPic7CiAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgbTZ3ZWJfZnIgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzQ2MQogICAgICAgIC8vIHRlc3Q6IGh0dHA6Ly90aW55dXJsLmNvbS9wdG4ydnJsCiAgICAgICAgaG9zdCA6IFsnbTZ3ZWIuZnInXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBwbGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdvYmplY3RbaWQkPSJfZmxhc2hfYXBpIl0nKTsKICAgICAgICAgIHZhciBzY3JpcHQgPSBBYWsuaGFzU2NyaXB0KCdNNi5QbGF5ZXIuY29uZmlnJyk7CgogICAgICAgICAgaWYgKHBsYXllciAhPT0gbnVsbCAmJiBzY3JpcHQgIT09IG51bGwpIHsKICAgICAgICAgICAgdmFyIGZvdW5kID0gc2NyaXB0LmlubmVySFRNTC5tYXRjaCgvTTYuUGxheWVyLmNvbmZpZyA9IChcey4rXH0pOy8pOwogICAgICAgICAgICB2YXIgY29uZmlnID0gSlNPTi5wYXJzZShmb3VuZC5wb3AoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBSZXBsYWNlIHBsYXllcgogICAgICAgICAgICB2YXIgUGxheWVyID0gbmV3IEFhay5wbGF5ZXIoKTsKICAgICAgICAgICAgUGxheWVyLnZpZGVvanMocGxheWVyLnBhcmVudE5vZGUsIHsKICAgICAgICAgICAgICBzb3VyY2UgOiBjb25maWcuc291cmNlc1sxXS5zcmMsCiAgICAgICAgICAgICAgdHlwZSA6ICdtcDQnLAogICAgICAgICAgICAgIGF1dG9wbGF5IDogZmFsc2UKICAgICAgICAgICAgfSk7CgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2FtaW5ncm9vbV90diA6IHsKICAgICAgICBob3N0IDogWydnYW1pbmdyb29tLnR2J10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYWRibG9ja19kZXRlY3QgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIEFhay51dy5HUl9hZGJsb2NrX2hpZGVfdmlkZW8gPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIEFhay51dy5hZGJsb2NrX3ZpZGVvX21zZ19zdGFydCA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgQWFrLnV3LmFkYmxvY2tfdmlkZW9fbXNnX3N0b3AgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIEFhay51dy5kaXNhYmxlX2NoYXQgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIEdlcm1hbnkKICAgICAgbm93X2RvbWFpbnMgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzMzNgogICAgICAgIC8vIHRlc3Q6IGh0dHA6Ly90aW55dXJsLmNvbS9wZWVvYm91CiAgICAgICAgLy8gdGVzdDogaHR0cDovL2pzYmluLmNvbS92dWNvYmVqb2ZvCiAgICAgICAgaG9zdCA6IFsndm94bm93LmRlJywgJ3J0bC1ub3cucnRsLmRlJywgJ3J0bDJub3cucnRsMi5kZScsICduLXR2bm93LmRlJywgJ3N1cGVycnRsbm93LmRlJywgJ3J0bG5pdHJvbm93LmRlJywgJ25vd3R2LmRlJ10sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLyoKICAgICAgICAgIHZhciBQbGF5ZXIgPSBuZXcgQWFrLnBsYXllcigpOwogICAgICAgICAgUGxheWVyLmVkaXRpbmcoJyN2aWRlb3BsYXllcicsIHsKICAgICAgICAgIHVuc2V0Rmxhc2h2YXJzIDogJ2FiY2hlY2tfZW5hYmxlZCxhZGNhbGwsYWRjbGFzc2VzLGFkY29uZmlnLGFkbWV0YSxhZHNsb2csYWdvZixhbWEsYW5nZWJvdCxhcyxhc3BhcnRzLGJyZWFrYWQsY29ubmVjdGlvbmNoZWNrLGNzbG9nLGRldixkaW1tZXIsZXJyb3Jsb2csZmVlZGJhY2ssZm1zaWRlbnQsZ3R2LGhpZ2hsaWdodHMsaXZ3LGl2d19wbGF5LGpzLGpzX2V2ZW50X2Z1bmN0aW9uLGxvZ28sbG9nb19iYXNld2lkdGgsbG9nb3BvcyxuaWVsc2VuLG9yZCxvc21mLHN2bSx0aWxlLHZpZGVvcGxhemEsdmlkZW9wbGF6YV9iYXNlX3VybCx2aWRlb3BsYXphX3NoYXJlLHZpZGVvcGxhemFfdGFnLHZwRW52aXJvbm1lbnRVUkwseGwnCiAgICAgICAgICB9KTsKICAgICAgICAgICAqLwogICAgICAgIH0KICAgICAgfSwKICAgICAgcnRsX2RlIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNTQxCiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL2g3Y2N2cXEKICAgICAgICBob3N0IDogWydydGwuZGUnXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdkaXZbZGF0YS13aWRnZXQ9InZpZGVvIl0nKSkubWFwKGZ1bmN0aW9uICh2aWRlbykgewogICAgICAgICAgICB2YXIgY2ZnID0gQWFrLmludG9PYmplY3QodmlkZW8uZGF0YXNldC5wbGF5ZXJMYXllckNmZyk7CiAgICAgICAgICAgIHZhciBmaWxlID0gY2ZnLnZpZGVvaW5mby5tcDR1cmw7CiAgICAgICAgICAgIEFhay5sb2codmlkZW8sIGNmZywgZmlsZSk7CgogICAgICAgICAgICAvLyBSZXBsYWNlIHBsYXllcgogICAgICAgICAgICB2YXIgUGxheWVyID0gbmV3IEFhay5wbGF5ZXIoKTsKICAgICAgICAgICAgUGxheWVyLnZpZGVvanModmlkZW8sIHsKICAgICAgICAgICAgICBzb3VyY2UgOiBmaWxlLAogICAgICAgICAgICAgIHR5cGUgOiAnbXA0JywKICAgICAgICAgICAgICBhdXRvcGxheSA6IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBteXNwYXNzX2RlIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy83NgogICAgICAgIC8vIHRlc3Q6IGh0dHA6Ly90aW55dXJsLmNvbS9sdG85cHlkCiAgICAgICAgaG9zdCA6IFsnbXlzcGFzcy5kZSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciB2aWRlb2lkID0gbG9jYXRpb24ucGF0aG5hbWUubWF0Y2goL1wvKFxkKylcLyQvKTsKCiAgICAgICAgICBpZiAodmlkZW9pZCAhPT0gbnVsbCkgewogICAgICAgICAgICBBYWsucmVxdWVzdCh7CiAgICAgICAgICAgICAgdXJsIDogJ2h0dHA6Ly93d3cubXlzcGFzcy5kZS9teXNwYXNzL2luY2x1ZGVzL2FwcHMvdmlkZW8vZ2V0dmlkZW9tZXRhZGF0YXhtbC5waHA/aWQ9JyArIHZpZGVvaWRbMV0sCiAgICAgICAgICAgICAgb25sb2FkIDogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3VsdC5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICBBYWsubG9nKHJlcyk7CgogICAgICAgICAgICAgICAgLy8gR2V0IHZpZGVvCiAgICAgICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKTsKICAgICAgICAgICAgICAgIHZhciBkb20gPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJlcywgImFwcGxpY2F0aW9uL3htbCIpOwogICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBkb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoInVybF9mbHYiKS5pdGVtKDApLnRleHRDb250ZW50OwoKICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBlbGVtZW50cwogICAgICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJ2Rpdi5sb2FkaW5nR2lmJyk7CgogICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBwbGF5ZXIKICAgICAgICAgICAgICAgIHZhciBQbGF5ZXIgPSBuZXcgQWFrLnBsYXllcigpOwogICAgICAgICAgICAgICAgUGxheWVyLnZpZGVvanMoJyNwbGF5ZXInLCB7CiAgICAgICAgICAgICAgICAgIHNvdXJjZSA6IGZpbGUsCiAgICAgICAgICAgICAgICAgIHR5cGUgOiAnbXA0JywKICAgICAgICAgICAgICAgICAgYXV0b3BsYXkgOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAvLyBOZWRlcmxhbmQKICAgICAgcnRseGxfbmwgOiB7CiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL2wyemt2M2QKICAgICAgICBob3N0IDogWydydGx4bC5ubCcsICdydGxuaWV1d3MubmwnXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBQbGF5ZXIgPSBuZXcgQWFrLnBsYXllcigpOwogICAgICAgICAgUGxheWVyLmVkaXRpbmcoJyNfcnRsb3NtZjAnLCB7CiAgICAgICAgICAgIHNldEZsYXNodmFycyA6IHsKICAgICAgICAgICAgICBhZGJsb2NrIDogZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICAvLyBOb3J3YXkKICAgICAgdmd0dl9uZXR3b3JrIDogewogICAgICAgIC8vIG5vdGU6IHNraXAgdmlkZW8gYWRzICsgYW50aS1hZGJsb2NrCiAgICAgICAgLy8gandwbGF5ZXI6IGh0dHA6Ly90aW55dXJsLmNvbS96eXY3OWhnCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE0MDIKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMzY3CiAgICAgICAgLy8gdGVzdDogaHR0cDovL3Rpbnl1cmwuY29tL253cDg1dCwgaHR0cDovL3Rpbnl1cmwuY29tL253cDg1dAogICAgICAgIGhvc3QgOiBbJ3ZndHYubm8nLCAndmcubm8nXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBvbGRIYXNoID0gbnVsbDsKICAgICAgICAgIHZhciB2aWRlb0lkID0gbnVsbDsKICAgICAgICAgIHZhciB2aWRlb0lkUmVnZXggPSAvI1whXC92aWRlb1wvKFxkKylcLy87CgogICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGxvY2F0aW9uIGhhc2ggY2hhbmdlcwogICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcGxheWVyID0gQWFrLmdldEVsZW1lbnQoJy52aWRlby1wbGF5ZXInKTsKCiAgICAgICAgICAgIGlmIChwbGF5ZXIgJiYgbG9jYXRpb24uaGFzaCAhPSBvbGRIYXNoICYmIHZpZGVvSWRSZWdleC50ZXN0KGxvY2F0aW9uLmhhc2gpKSB7CiAgICAgICAgICAgICAgb2xkSGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgICAgICAgICAgICAgdmlkZW9JZCA9IG9sZEhhc2gubWF0Y2godmlkZW9JZFJlZ2V4KVsxXTsKLyoKICAgICAgICAgICAgICB2YXIgaGxzdXJsID0gJ2h0dHBzOi8vc3Zwc2VjdXJlaGR2b2QtdmguYWthbWFpaGQubmV0L2kvMjAxNi8wMy8yMDE2MDMxMl81NmU0MjFmODZhZjQ1X3ZnMDEvLDEyODBfNzIwXzM1MDAsOTYwXzU0MF8xNTAwLDY0MF8zNjBfODAwLDQ4MF8yNzBfNTAwLC5tcDQuY3NtaWwvbWFzdGVyLm0zdTgnOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBsYXllcikKCiAgICAgICAgICAgICAgLy8gZG9uJ3Qgd29yayB3aXRoIGNocm9tZQogICAgICAgICAgICAgIC8vIHBsYXllci5pbm5lckhUTUwgPSAnPGRpdiBpZD0ibm9BZFBsYXllciI+VGhpcyB0ZXh0IHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHBsYXllci48L2Rpdj4nOwoKCiAgICAgICAgICAgICAgLy8gY2FuJ3QgbG9hZCBtM3U4IDQwMzIgc3RhdHVzIGNvZGUKICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHVuc2FmZVdpbmRvdy5qd3BsYXllcikKCiAgICAgICAgICAgICAgQWFrLnJlcXVlc3QoewogICAgICAgICAgICAgICAgdXJsIDogJ2h0dHA6Ly9zdnAudmcubm8vc3ZwL2FwaS92MS92Z3R2L2Fzc2V0cy8nICsgdmlkZW9JZCArICc/YWRkaXRpb25hbD1zZXR0aW5nc3xjaGFwdGVyc3xjdWVQb2ludHN8ZXh0ZXJuYWxJZHxiYXJyZWxzfGV4dGVybmFsQ2F0ZWdvcnlJZHxuZXh0QXNzZXQmYXBwTmFtZT12Z3R2LXdlYnNpdGUnLAogICAgICAgICAgICAgICAgb25sb2FkIDogZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdWx0LnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IEpTT04ucGFyc2UocmVzKTsKICAgICAgICAgICAgICAgICAgQWFrLmxvZyhvYmopOwoKICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBwbGF5ZXIKICAgICAgICAgICAgICAgICAgdmFyIFBsYXllciA9IG5ldyBBYWsucGxheWVyKCk7CiAgICAgICAgICAgICAgICAgIFBsYXllci52bGMocGxheWVyLCB7CiAgICAgICAgICAgICAgICAgICAgc291cmNlIDogb2JqLnN0cmVhbVVybHMuaGxzLCAvLyBtM3U4CiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdobHMnLAogICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5IDogZmFsc2UKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwge30sIHsKICAgICAgICAgICAgICAgIGluc2VydCA6ICdpbm5lcicKICAgICAgICAgICAgICB9KTsKKi8KICAgICAgICAgICAgfQogICAgICAgICAgfSwgMWUzKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG10Z19yYWRpbyA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTQ5NQogICAgICAgIGhvc3QgOiBbJ3BsYXkucmFkaW8xLnNlJywgJ3BsYXkuYmFuZGl0LnNlJywgJ3BsYXkubHVnbmFmYXZvcml0ZXIuY29tJywgJ3BsYXkucml4Zm0uc2UnXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB3aW5kb3cucGxheWVyX2xvYWRfbGl2ZSh3aW5kb3cuc3RyZWFtX2lkKTsKICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRwbGF5X25ldHdvcmsgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE0NjMKICAgICAgICBob3N0IDogWydkcGxheS5jb20nLCAnZHBsYXkuZGsnLCAnZHBsYXkuc2UnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMzY1KTsKICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKS50b1N0cmluZygpOwogICAgICAgICAgdmFyIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICJub3RpZmljYXRpb25TdWJtaXNzaW9uIiA6ICJzdWJtaXR0ZWQiLAogICAgICAgICAgICAgICJyZXBvcnRpbmdFeHBpcnkiIDogdGltZXN0YW1wLAogICAgICAgICAgICAgICJub3RpZmljYXRpb25FeHBpcnkiIDogdGltZXN0YW1wCiAgICAgICAgICAgIH0pOwogICAgICAgICAgQWFrLnNldENvb2tpZSgnZHNjLWFkYmxvY2snLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICB9LAogICAgICB2aWFzYXRfdHYgOiB7CiAgICAgICAgLy8gbm90ZTogc2tpcCB2aWRlbyBhZHMgKyBhbnRpLWFkYmxvY2sKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT10djNwbGF5CiAgICAgICAgLyogdGVzdDogaHR0cDovL3d3dy50djNwbGF5Lm5vL3Byb2dyYW1tZXIvcmVkbmluZ3Nza295dGEgaGRzL2hscwogICAgICAgICAgICAgICAgICAgaHR0cDovL3d3dy50djNwbGF5LmRrL3Byb2dyYW1tZXIvbGluc2Utb2ctZGlkZGUtZWtzdHJhIGhkcy9obHMKICAgICAgICAgICAgICAgICAgIGh0dHA6Ly93d3cudHYzcGxheS5zZS9wcm9ncmFtL2dsYW1vdXJhbWEgaGRzL2hscwogICAgICAgICAgICAgICAgICAgaHR0cDovL3d3dy50djZwbGF5LnNlL3Byb2dyYW0vOTktc2FrZXItbWFuLW1hc3RlLWdvcmEtaW5uYW4tbWFuLWRvciBoZHMvaGxzCiAgICAgICAgICAgICAgICAgICBodHRwOi8vd3d3LnR2OHBsYXkuc2UvcHJvZ3JhbS9lZnRlcmx5c3QtLTEgaGRzL2hscwogICAgICAgICAgICAgICAgICAgaHR0cDovL3d3dy50djEwcGxheS5zZS9wcm9ncmFtL2dhcnBlbnMtZXVyb3BhIGhkcy9obHMKICAgICAgICAgICAgICAgICAgIGh0dHA6Ly90dnBsYXkuc2thdGllcy5sdi9wYXJyYWlkZXMvdHYzLXppbmFzIGhkcy9obHMKICAgICAgICAgICAgICAgICAgIGh0dHA6Ly9wbGF5LnR2My5sdC9wcm9ncmFtb3MvYmVhdG9zLXZpcnR1dmUgcnRtcC9obHMKICAgICAgICAgICAgICAgICAgIGh0dHA6Ly90djNwbGF5LnR2My5lZS9zaXN1L3B1aGFwYWV2LXNlcG9nYSBydG1wL2hscyAqLwogICAgICAgIGhvc3QgOiBbJ3R2M3BsYXkubm8nLCAndHYzcGxheS5kaycsICd0djNwbGF5LnNlJywgJ3R2NnBsYXkuc2UnLCAndHY4cGxheS5zZScsICd0djEwcGxheS5zZScsICd0dnBsYXkuc2thdGllcy5sdicsICdwbGF5LnR2My5sdCcsICd0djNwbGF5LnR2My5lZSddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5oYXNFbGVtZW50KCcjdmlkZW8tcGxheWVyJywgZnVuY3Rpb24gKHRoaXNFbGVtZW50KSB7CiAgICAgICAgICAgIHRoaXNFbGVtZW50LmlkID0gJyc7CiAgICAgICAgICAgIC8vdmFyIHZpZGVvSWQgPSBsb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpOwogICAgICAgICAgICB2YXIgdmlkZW9JZCA9IHRoaXNFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS12aWRlby1pZCcpOwogICAgICAgICAgICBBYWsubG9nKHRoaXNFbGVtZW50LCB2aWRlb0lkKTsKCiAgICAgICAgICAgIC8vIGdldCB2aWRlbyBzb3VyY2VzCiAgICAgICAgICAgIEFhay5yZXF1ZXN0KHsKICAgICAgICAgICAgICB1cmwgOiAnaHR0cDovL3BsYXlhcGkubXRneC50di92My92aWRlb3Mvc3RyZWFtLycgKyB2aWRlb0lkLAogICAgICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIHZhciByZXMgPSByZXN1bHQucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgdmFyIG9iaiA9IEpTT04ucGFyc2UocmVzKTsKICAgICAgICAgICAgICAgIEFhay5sb2cob2JqKTsKCiAgICAgICAgICAgICAgICAvKiBJbm5ob2xkZXQgZHUgcHLDuHZlciDDpSBzZSBlciBrdW4gdGlsZ2plbmdlbGlnIGZvciBicnVrZXJlIGkgTm9yZ2UKICAgICAgICAgICAgICAgIFByb2dyYW1tZXQgZXIgYmxva2VyZXQgZm9yIHZpc25pbmcgZnJhIGRlbm5lIGdlb2dyYWZpc2tlIHBvc2l0aW9uLgogICAgICAgICAgICAgICAgUHJvZ3JhbcSFIGdhbGl0ZSBtYXR5dGkgdGlrIGp1bmdkYW1pZXNpIGnFoSBMaWV0dXZvcyBpbnRlcm5ldG8gdGlla8SXasWzIHRpbmtsxbMgKi8KICAgICAgICAgICAgICAgIGlmIChvYmoubXNnKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzRWxlbWVudC5pbm5lckhUTUwgPSBvYmoubXNnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbi5ob3N0ID09PSAndHYzcGxheS50djMuZWUnKSB7CiAgICAgICAgICAgICAgICAgIHZhciBQbGF5ZXIgPSBuZXcgQWFrLnBsYXllcigpOwogICAgICAgICAgICAgICAgICBQbGF5ZXIuZ3JpbmRwbGF5ZXIodGhpc0VsZW1lbnQsIHsKICAgICAgICAgICAgICAgICAgICBzb3VyY2UgOiBvYmouc3RyZWFtcy5tZWRpdW0sCiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdydG1wL21wNCcsCiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXkgOiB0cnVlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHZpZGVvIHRhZyBmb3IgbmV3IHBsYXllcgogICAgICAgICAgICAgICAgICBBYWsuY3JlYXRlRWxlbWVudCh7CiAgICAgICAgICAgICAgICAgICAgdGFnIDogJ3ZpZGVvJywKICAgICAgICAgICAgICAgICAgICBpZCA6ICdub0FkUGxheWVyJywKICAgICAgICAgICAgICAgICAgICBjbGFzc2lkIDogJ3ZpZGVvLWpzIHZqcy1kZWZhdWx0LXNraW4nLAogICAgICAgICAgICAgICAgICAgIHdpZHRoIDogdGhpc0VsZW1lbnQuY2xpZW50V2lkdGggfHwgNzMwLAogICAgICAgICAgICAgICAgICAgIGhlaWdodCA6IHRoaXNFbGVtZW50LmNsaWVudEhlaWdodCB8fCA0MTAsCiAgICAgICAgICAgICAgICAgICAgcHJlbG9hZCA6ICdhdXRvJywKICAgICAgICAgICAgICAgICAgICBjb250cm9scyA6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXkgOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHJlcGxhY2UgOiB0aGlzRWxlbWVudAogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vIHBhcnNlIHNvdXJjZXMKICAgICAgICAgICAgICAgICAgdmFyIHNyY0FycmF5ID0gW107CiAgICAgICAgICAgICAgICAgIGlmIChvYmouc3RyZWFtcy5oaWdoICYmIG9iai5zdHJlYW1zLmhpZ2ggIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgc3JjQXJyYXkucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogInZpZGVvL21wNCIsIC8vIG1wNAogICAgICAgICAgICAgICAgICAgICAgc3JjIDogb2JqLnN0cmVhbXMuaGlnaAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9ICBpZiAob2JqLnN0cmVhbXMuaGxzICYmIG9iai5zdHJlYW1zLmhscyAhPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICBzcmNBcnJheS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiAiYXBwbGljYXRpb24veC1tcGVnVVJMIiwgLy8gbTN1OAogICAgICAgICAgICAgICAgICAgICAgc3JjIDogb2JqLnN0cmVhbXMuaGxzCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0gIGlmIChvYmouc3RyZWFtcy5tZWRpdW0gJiYgb2JqLnN0cmVhbXMubWVkaXVtICE9PSAnJykgewogICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gb2JqLnN0cmVhbXMubWVkaXVtLmluZGV4T2YoJ3J0bXAnKSA9PT0gMCA/ICdydG1wL21wNCcgOiAnYXBwbGljYXRpb24vZjRtK3htbCc7CiAgICAgICAgICAgICAgICAgICAgc3JjQXJyYXkucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogdHlwZSwKICAgICAgICAgICAgICAgICAgICAgIHNyYyA6IG9iai5zdHJlYW1zLm1lZGl1bQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIEFhay5sb2coc3JjQXJyYXksIEpTT04uc3RyaW5naWZ5KHNyY0FycmF5KSk7CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIG5ldyBwbGF5ZXIKICAgICAgICAgICAgICAgICAgQWFrLmFkZFNjcmlwdChBYWsuaW50b1N0cmluZyhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvblZqc1JlYWR5KCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LnZpZGVvanMgIT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVmpzUmVhZHkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnZpZGVvanMoIm5vQWRQbGF5ZXIiKS5zcmMoL19TT1VSQ0VTXy8pOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBvblZqc1JlYWR5KCk7CiAgICAgICAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgICAgICAgIH0pLnJlcGxhY2UoIi9fU09VUkNFU18vIiwgSlNPTi5zdHJpbmdpZnkoc3JjQXJyYXkpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gUnVzc2lhCiAgICAgIHJ1dHViZV9ydSA6IHsgLy8gcmVzZWFyY2ggc29sdXRpb24KICAgICAgICAvKiB0ZXN0OiBodHRwOi8vcnV0dWJlLnJ1L3ZpZGVvL2JkNWY2MDQ3NjU3ZjBiZGNiZmJiMGVkYWQyYmI3YzYxLyAqLwogICAgICAgIGhvc3QgOiBbJ3J1dHViZS5ydSddLAogICAgICAgIG9uRW5kIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmhhc0VsZW1lbnQoJyNydXR1YmVQbGF5ZXJIb2xkZXInLCBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgLy9kbUZ5SUc5d2RITWdQU0JCWVdzdVoyVjBSV3hsYldWdWRDZ2lJMjl3ZEdsdmJuTWlLVHNOQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2SUQwZ1FXRnJMbWx1ZEc5UFltcGxZM1FvYjNCMGN5NWtZWFJoYzJWMExuWmhiSFZsS1RzTkNpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdE0zVTRWWEpzSUQwZ2J5NTJhV1JsYjE5aVlXeGhibU5sY2k1dE0zVTRPdzBLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29iVE4xT0ZWeWJDazdEUW9OQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJRYkdGNVpYSWdQU0J1WlhjZ1FXRnJMbkJzWVhsbGNpZ3BPdzBLSUNBZ0lDQWdJQ0FnSUNBZ1VHeGhlV1Z5TG5acFpHVnZhbk1vSnlOeWRYUjFZbVZRYkdGNVpYSkliMnhrWlhJbkxDQjdEUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObElEb2diVE4xT0ZWeWJDd05DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsSURvZ0oyaHNjeWNzRFFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5d2NtOTRlVG9nZEhKMVpTd05DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkWFJ2Y0d4aGVTQTZJSFJ5ZFdVTkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlRzZ0tUcz0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gSXRhbHkKICAgICAgcmFpX3R2IDogeyAvLyByZXNlYXJjaCBzb2x1dGlvbgogICAgICAgIGhvc3QgOiBbJ3JhaS50diddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7fSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7fQogICAgICB9LAogICAgICAvLyBUViBTdHJlYW0KICAgICAgYmxvY2tfc3RyZWFtc190diA6IHsKICAgICAgICAvLyBub3RlOiByZWRpcmVjdCB0byBodHRwOi8vYmxvY2suc3RyZWFtcy50di8KICAgICAgICBob3N0IDogWydmaXJzdHJvdy5jbycsICdmaXJzdHJvd3MucnUnLCAnZmlyc3Ryb3dzLnR2JywgJ2ZpcnN0cm93cy5vcmcnLCAnZmlyc3Ryb3dzLmNvJywgJ2ZpcnN0cm93cy5iaXonLCAnZmlyc3Ryb3d1cy5ldScsICdmaXJzdHJvdzF1cy5ldScsICdmaXJzdHNyb3dzcG9ydHMuZXUnLCAnZmlyc3Ryb3dzcG9ydGVzLnR2JywgJ2ZpcnN0cm93c3BvcnRlcy5jb20nLCAnanVzdGZpcnN0cm93c3BvcnRzLmNvbScsICdoYWhhc3BvcnQubWUnLCAnd2l6aXdpZy5ydScsICd3aXppd2lnLnN4JywgJ3dpeml3aWcudG8nLCAnd2l6aXdpZy50dicsICdteXAycC5iaXonLCAnbXlwMnAudHYnLCAnbXlwMnAubGEnLCAnbXlwMnAuZWMnLCAnbXlwMnAuZXUnLCAnbXlwMnAuc3gnLCAnbXlwMnAud3MnLCAnbXlwMnAuY29tJywgJ2F0ZGhlLnJ1JywgJ2F0ZGhlLnNlJywgJ2F0ZGhlLmJ6JywgJ2F0ZGhlLnRvcCcsICdhdGRoZS50bycsICdhdGRoZS5tZScsICdhdGRoZS5teCcsICcgYXRkaGUubGknLCAnYXRkaGUuYWwnXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRDb29raWUoImFkYiIsIDEpOyAvLyBwcmV2ZW50IGFudGktYWRibG9jawogICAgICAgICAgQWFrLnV3Lm9wZW4gPSBmdW5jdGlvbiAoKSB7fTsgLy8gcHJldmVudCBwb3B1cAogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjYmFubmVySW5DZW50ZXIsICNoaWRkZW5CYW5uZXJDYW52YXMgeyBkaXNwbGF5OiBub25lOyB9Iik7IC8vIGhpZGUgYWRzCiAgICAgICAgfQogICAgICB9LAogICAgICBidXppbmFfeHl6IDogewogICAgICAgIC8vIG5vdGU6IGRpc2FibGUgcmVmY29udHJvbCwgdXNlZCBieSBmaXJzdHJvd3Nwb3J0cwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMjY4CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEyNDMKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODg5CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZm9ydW0vZGlzY3Vzc2lvbi84OTc1CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tLzhWVHJrdlM5CiAgICAgICAgaG9zdCA6IFsnYnV6aW5hLnh5eicsICdmYXJtZXQuaW5mbycsICdyaW1sYWRpLmNvbScsICdraXRvcmVsby5jb20nLCAnb21uaXBvbGEuY29tJywgJ3Bvcm9zaW4uY28udWsnLCAncmltbGVuby5jb20nLCAnc2ltcGxlNGFsbHMuY29tJywgJ2Fyc29wby5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIjYWRzZnJhbWUgeyBoZWlnaHQ6IDE1MXB4OyB9Iik7CiAgICAgICAgfSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoL2J1emluYS54eXovLnRlc3QobG9jYXRpb24uaG9zdCkpIHsgLy8ga2VlcHMgc2FtZSBob3N0IHN0cmVhbQogICAgICAgICAgICBBYWsuaGFzRWxlbWVudCgnaWZyYW1lW3NyYyo9Ii5waHA/aGFzaD0iXScsIGZ1bmN0aW9uICh0aGlzRWxlbWVudCkgewogICAgICAgICAgICAgIC8vIGh0dHA6Ly9hcnNvcG8uY29tL3cyLnBocD9oYXNoPXBhbmRhNTgKICAgICAgICAgICAgICAvLyBodHRwOi8vd3d3LmJ1emluYS54eXovbmFuYTF2MS5waHA/b250aGV0b3AKICAgICAgICAgICAgICB2YXIgcGFydHMgPSB0aGlzRWxlbWVudC5zcmMuc3BsaXQoJy8nKTsKICAgICAgICAgICAgICBwYXJ0c1syXSA9IEFhay5ydWxlcy5idXppbmFfeHl6Lmhvc3QucG9wKCk7CiAgICAgICAgICAgICAgQWFrLmxvZyh0aGlzRWxlbWVudCwgcGFydHMpOwogICAgICAgICAgICAgIHRoaXNFbGVtZW50LnNyYyA9IHBhcnRzLmpvaW4oJy8nKTsKCiAgICAgICAgICAgICAgICAvKglkbUZ5SUc4Z1BTQjdDZ2tKQ1NBZ0lDQWljR3hoZVd4cGMzUWlJRG9nVzNzS0NRa0pJQ0FnSUNBZ0lDQWljSEp2ZG1sa1pYSWlJRG9nSW5KMGJYQWlMQW9KQ1FrZ0lDQWdJQ0FnSUNKMWNtd2lJRG9nSW5CaGJtUmhNVDlsSlRORU1UUTJOVEEzTURNeU5pVXlObk4wSlRORVVISjBTRmw1ZGtKNlpEbGFaRGRvUkY5bVVraFVaekV4TVRFek1DSUtDUWtKSUNBZ0lDQWdmUW9KQ1FrZ0lDQWdYU3dLQ1FrSklDQWdJQ0p3YkhWbmFXNXpJaUE2SUhzS0NRa0pJQ0FnSUNBZ0luSjBiWEFpSURvZ2V3b0pDUWtnSUNBZ0lDQWdJQ0oxY213aUlEb2dJbVpzYjNkd2JHRjVaWEl1Y25SdGNDMHpMakl1TVRFdWMzZG1JaXdnQ2drSkNRa0pMeThpZFhKc0lqb2dJbWgwZEhBNkx5OXlaV3hsWVhObGN5NW1iRzkzY0d4aGVXVnlMbTl5Wnk5emQyWXZabXh2ZDNCc1lYbGxjaTV5ZEcxd0xUTXVNaTR4TVM1emQyWWlMQW9KQ1FrZ0lDQWdJQ0FnSUNKdVpYUkRiMjV1WldOMGFXOXVWWEpzSWlBNklDSnlkRzF3T2k4dk1UZzFMamd5TGpJeE5TNDBOVG96TlRjNUwzWnZaQzhpQ2drSkNTQWdJQ0FnSUgwc0Nna0pDU0FnSUNBZ0lDSmpiMjUwY205c2N5SWdPaUI3Q2drSkNRa2dJQ0FnSW5WeWJDSTZJQ0pvZEhSd09pOHZjbVZzWldGelpYTXVabXh2ZDNCc1lYbGxjaTV2Y21jdmMzZG1MMlpzYjNkd2JHRjVaWEl1WTI5dWRISnZiSE10TXk0eUxqRTJMbk4zWmlJc0lDOHZJR0ZrWkdWa0lHSmxZMkYxYzJVZ2JXbHpjMmx1WndvSkNRa2dJQ0FnSUNBZ0lDSndiR0Y1SWlBNklHWmhiSE5sTEFvSkNRa2dJQ0FnSUNBZ0lDSnpZM0oxWW1KbGNpSWdPaUJtWVd4elpRb0pDUWtnSUNBZ0lDQjlDZ2tKQ1NBZ0lDQjlMQW9KQ1FrZ0lDQWdJbkJzWVhsbGNrbGtJaUE2SUNKd2JHRjVaWElpTEFvSkNRa2dJQ0FnSW1Oc2FYQWlJRG9nZXdvSkNRa2dJQ0FnSUNBaWRYSnNJaUE2SUNKd1lXNWtZVEUvWlNVelJERTBOalV3TnpBek1qWWxNalp6ZENVelJGQnlkRWhaZVhaQ2VtUTVXbVEzYUVSZlpsSklWR2N4TVRFeE16QWlDZ2tKQ1NBZ0lDQjlDZ2tKQ1NBZ2ZRb0tDUWtKSUNCMllYSWdibVYzVlhKc0lEMGdjR0Z5ZEhNdWMyeHBZMlVvTUN3Z015a3VhbTlwYmlnbkx5Y3BJQ3NnSnk5bWJHOTNjR3hoZVdWeUxUTXVNaTR4Tmk1emQyWS9ZMjl1Wm1sblBTY2dLeUJsYzJOaGNHVW9TbE5QVGk1emRISnBibWRwWm5rb2J5a3BPd29KQ1FrZ0lDOHZkbUZ5SUc1bGQxVnliQ0E5SUNkb2RIUndPaTh2Y21Wc1pXRnpaWE11Wm14dmQzQnNZWGxsY2k1dmNtY3ZjM2RtTDJac2IzZHdiR0Y1WlhJdE15NHlMakUyTG5OM1pqOWpiMjVtYVdjOUp5QXJJR1Z6WTJGd1pTaEtVMDlPTG5OMGNtbHVaMmxtZVNodktTazdDZ2tKQ1NBZ1kyOXVjMjlzWlM1c2IyY29ibVYzVlhKc0tUc0tDUWtKSUNCMGFHbHpSV3hsYldWdWRDNXpjbU1nUFNCdVpYZFZjbXc3CiAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgIAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7IC8vIHNraXAgYW50aS1hZGJsb2NrCiAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCcjYWRzZnJhbWUnKTsKICAgICAgICAgICAgQWFrLmdldEVsZW1lbnQoJyNyZW1vdmUtb3ZlcicpLmNsaWNrKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBhbGxteXZpZGVvc19uZXQgOiB7CiAgICAgICAgLy8gbm90ZTogb2JmdXNjYXRlZAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8yNzQKICAgICAgICBob3N0IDogWydhbGxteXZpZGVvcy5uZXQnLCAnYW12dHYubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIHNraXAgZmFrZSBwbGF5IGJ1dHRvbgogICAgICAgICAgQWFrLnNldENvb2tpZSgnX2ZhdmJ0MzMnLCAxKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGlsaXZlX2RvbWFpbnMgOiB7CiAgICAgICAgaG9zdCA6IFsnaWxpdmUudG8nLCAnc3RyZWFtbGl2ZS50byddLAogICAgICAgIG9uRW5kIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKC9eXC9lbWJlZHBsYXllci5waHAvaS50ZXN0KGxvY2F0aW9uLnBhdGhuYW1lKSkgewogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAvLyBTa2lwIHRpbWVyCiAgICAgICAgICAgICAgQWFrLnV3LnJlbW92ZU92ZXJsYXlIVE1MKCk7CiAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgbWljYXN0X3R2IDogewogICAgICAgIGhvc3QgOiBbJ21pY2FzdC50diddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBwcmV2ZW50IHBvcHVuZGVyCiAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aWRfbWFpbicsIHRydWUpOwogICAgICAgICAgQWFrLnNldENvb2tpZSgndmlkX3N1YicsIHRydWUpOwogICAgICAgICAgLy8gcmVtb3ZlIG92ZXJsYXkKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGlmICh3aW5kb3cucmVtb3ZlT3ZlcmxheUhUTUwpCiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlT3ZlcmxheUhUTUwoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcHhzdHJlYW1fdHYgOiB7CiAgICAgICAgaG9zdCA6IFsncHhzdHJlYW0udHYnXSwKICAgICAgICBvbkVuZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICgvXlwvZW1iZWRyb3V0ZXIucGhwLy50ZXN0KGxvY2F0aW9uLnBhdGhuYW1lKSkgewogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAvLyBTa2lwIHRpbWVyIGFuZCBjbG9zZSBhZHMKICAgICAgICAgICAgICBBYWsudXcuY2xvc2VBZCgpOwogICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHNhd2xpdmVfdHYgOiB7CiAgICAgICAgaG9zdCA6IFsnc2F3bGl2ZS50diddLAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICgvXlwvZW1iZWRcL3dhdGNoXC8vaS50ZXN0KGxvY2F0aW9uLnBhdGhuYW1lKSkgewogICAgICAgICAgICAvLyBTa2lwIHRpbWVyIGFuZCBjbG9zZSBhZHMKICAgICAgICAgICAgQWFrLnV3LmRpc3BsYXkgPSBmYWxzZTsKICAgICAgICAgICAgQWFrLnV3LmNsb3NlTXlBZCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZ29vZGNhc3RfY28gOiB7CiAgICAgICAgaG9zdCA6IFsnZ29vZGNhc3QuY28nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoL15cL3N0cmVhbS5waHAvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpKSB7CiAgICAgICAgICAgIC8vIHJlbW92ZSBhZHMgYWxsb3dlZCBieSBlYXN5bGlzdAogICAgICAgICAgICBBYWsudXcuJCgiLmFkdmVydGlzZW1lbnQiKS5oaWRlKCk7CiAgICAgICAgICAgIEFhay51dy4kKCcuYWRza3kgaWZyYW1lJykuYXR0cigic3JjIiwgImFib3V0OmJsYW5rIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBzaG93c3BvcnRfdHZfY29tIDogewogICAgICAgIGhvc3QgOiBbJ3Nob3dzcG9ydC10di5jb20nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoL15cL2NoLnBocC8udGVzdChsb2NhdGlvbi5wYXRobmFtZSkpIHsKICAgICAgICAgICAgLy8gcmVtb3ZlIGFkcyBhbGxvd2VkIGJ5IGVhc3lsaXN0CiAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KCcjYWR2ZXJ0aXNlbWVudCwgLmFkdmVydGlzZW1lbnQnKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHNoYXJlY2FzdF90byA6IHsKICAgICAgICBob3N0IDogWydzaGFyZWNhc3QudG8nXSwKICAgICAgICBvbklkbGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoL15cL2VtYmVkLnBocC8udGVzdChsb2NhdGlvbi5wYXRobmFtZSkpIHsKCiAgICAgICAgICAgIC8vIERpc2FibGUgcG9wdW5kZXJzCiAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIEFhay5zZXRDb29raWUoJ3ZpZF9tYWluJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aWRfc3ViJywgMik7CiAgICAgICAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aWRfZGVsYXknLCB0cnVlKTsKICAgICAgICAgICAgICB9LCAxMDApOwoKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7CiAgICAgICAgICAgIH0sIDUwMDApOwoKICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYW5zcGFyZW50IG92ZXJsYXkKICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyN0YWJsZTEnKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHZpZGVvbWVnYV90diA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT12aWRlb21lZ2EKICAgICAgICBob3N0IDogWyd2aWRlb21lZ2EudHYnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKC9eXC92aWV3LnBocC8udGVzdChsb2NhdGlvbi5wYXRobmFtZSkpIHsKICAgICAgICAgICAgLy8gcHJldmVudCBwb3B1bmRlcgogICAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aWRfbWFpbnB1JywgdHJ1ZSk7CiAgICAgICAgICAgIEFhay5zZXRDb29raWUoJ3ZpZF9zdWJwdScsIHRydWUpOwogICAgICAgICAgICBBYWsuc2V0Q29va2llKCd2aWRfZGVsYXknLCB0cnVlKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIG9uRW5kIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8ga2lsbCBhYmMKICAgICAgICAgIC8vIGZpeCBidWcgb24gZmlyZWZveDogVGhlIHZpZGVvIGNvdWxkIG5vdCBiZSBsb2FkZWQsIGVpdGhlciBiZWNhdXNlIHRoZSBzZXJ2ZXIgb3IgbmV0d29yayBmYWlsZWQgb3IgYmVjYXVzZSB0aGUgZm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQuCiAgICAgICAgICB2YXIgc2NyaXB0ID0gQWFrLmhhc1NjcmlwdCgnUGxlYXNlIGRpc2FibGUgQWRCbG9jayBQbHVnaW4gdG8gd2F0Y2ggdGhlIHZpZGVvJyk7CiAgICAgICAgICBpZiAoc2NyaXB0KSB7CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBzY3JpcHQuaW5uZXJIVE1MOwogICAgICAgICAgICB2YXIgc3Vic3RyaW5nID0gc291cmNlLnN1YnN0cmluZyhzb3VyY2UubGFzdEluZGV4T2YoJ2V2YWwoJyksIHNvdXJjZS5sYXN0SW5kZXhPZignKScpICsgMSk7CiAgICAgICAgICAgIHZhciBkZW9iZnVzY2F0ZWQgPSBBYWsudW5wYWNrU2NyaXB0KHN1YnN0cmluZyk7CiAgICAgICAgICAgIHZhciBuZXdTY3JpcHQgPSAnaWYoJytkZW9iZnVzY2F0ZWQuc3Vic3RyaW5nKGRlb2JmdXNjYXRlZC5pbmRleE9mKCd0cnVlJykpOwogICAgICAgICAgICBBYWsuYWRkU2NyaXB0KG5ld1NjcmlwdCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBmbG93cGxheWVyX2FudGlhZGJsb2NrIDogewogICAgICAgIGhvc3QgOiBbJ3ZpZGVvZnVuLm1lJywgJ3ZpZGVvYnVnLm5ldCcsICd2aWRlbzQ0Lm5ldCcsICdwbGF5NDQubmV0JywgJ2J5em9vLm9yZycsICdwbGF5YmIubWUnLCAndmlkZW93aW5nLm1lJywgJ3ZpZGVvem9vLm1lJywgJ2Vhc3l2aWRlby5tZScsICdwbGF5cGFuZGEubmV0J10sCiAgICAgICAgb25FbmQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgCiAgICAgICAgICAvKgogICAgICAgICAgaHR0cDovL3d3dy5hbmltZXRvb24udHYvYmxhY2stbGFnb29uLWVwaXNvZGUtMQogICAgICAgICAgaHR0cDovL3ZpZGVvd2luZy5tZS9lbWJlZD93PTcxOCZoPTQzOCZ2aWRlbz1vbmdvaW5nL3l1LWdpLW9oX2FyYy12Xy1fNTMubXA0CiAgICAgICAgICBodHRwOi8vcGxheWJiLm1lL2VtYmVkLnBocD93PTcxOCZoPTQzOCZ2aWQ9YXQvbncveXUtZ2ktb2hfYXJjLXZfLV81My5tcDQKICAgICAgICAgIGh0dHA6Ly92aWRlb3pvby5tZS9lbWJlZC5waHA/dz03MTgmaD00MzgmdmlkPWF0L253L3l1LWdpLW9oX2FyYy12Xy1fNTMubXA0CiAgICAgICAgICBodHRwOi8vd3d3LmVhc3l2aWRlby5tZS9nb2dvLz93PTcxOCZoPTQzOCZmaWxlPXl1LWdpLW9oX2FyYy12Xy1fNTMubXA0JnN2PTEKICAgICAgICAgIGh0dHA6Ly9wbGF5cGFuZGEubmV0L2VtYmVkLnBocD93PTcxOCZoPTQzOCZ2aWQ9YXQvbncveXUtZ2ktb2hfYXJjLXZfLV81My5tcDQKICAgICAgICAgICAqLwoKICAgICAgICAgIC8vIGFsbG93IGZ1bGxzY3JlZW4gd2hlbiBhYnAgaXMgZW5hYmxlZCBhbmQgcmVtb3ZlIGFkIGxheWVyCiAgICAgICAgICAvLyBhZHMgYmxvY2tlZCBieSBhYnAgcnVsZQogICAgICAgICAgaWYgKC9eXC8oZW1iZWR8Z29nb3xncGx1cykvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpKSB7CiAgICAgICAgICAgIHZhciBQbGF5ZXIgPSBuZXcgQWFrLnBsYXllcigpOwogICAgICAgICAgICBQbGF5ZXIuZWRpdGluZygnI2Zsb3dwbGF5ZXJfYXBpJywgewogICAgICAgICAgICAgIHNldEF0dHJpYnV0ZXMgOiB7CiAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW4gOiB0cnVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHIzeiA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXM/cT1sYWJlbDpSM1oKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vQzE1OWtldm4KICAgICAgICBob3N0IDogWydjaXR5YW0uY29tJywgJ2NvbXB1dGVyd29ybGR1ay5jb20nLCAndGVjaHdvcmxkLmNvbScsICd2My5jby51ayddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvKiBkb24ndCB3b3JrIHdpdGggY2hyb21lCiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAnX3IzeicsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDoge30KICAgICAgICAgIH0pOwogICAgICAgICAgKi8KICAgICAgICB9LAogICAgICAgIG9uSWRsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay51dy4kKCIjcjN6LXdhaXQiKS5yZW1vdmUoKTsKICAgICAgICAgIEFhay51dy4kKCIucjN6LWhpZGUiKS5yZW1vdmVDbGFzcygicjN6LWhpZGUiKTsKICAgICAgICAgIEFhay51dy5fcjN6ID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGdvb2dsZV9qb2JydW5uZXIgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZW4vZm9ydW0vbWVzc2FnZXMvNDA1CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEzNDMKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTM0MgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy84MzEKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTI3NAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMjYyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzU2MQogICAgICAgIGhvc3QgOiBbJ25leHQtZXBpc29kZS5uZXQnLCAna2luZ21ha2VyLm5ld3MnLCAnZ2FtZXNwb3dlcml0YS5jb20nLCAndG9kYXlpZG9sLmNvbScsICdyZWNlaXZlLWEtc21zLmNvbScsICd3YWtldXBjYWxsbWUuY29tJywgJ3JpbmdteWNlbGxwaG9uZS5jb20nLCAnZmFxbW96aWxsYS5vcmcnLCAndGhlbWVteXBjLmNvbSddLAogICAgICAgIG9uQWx3YXlzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLnV3Lmdvb2dsZV9qb2JydW5uZXIgPSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIGZ1Y2thZGJvY2sgY3VzdG9taXplZAogICAgICBmYWJfZGF3bl9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE3NDcKICAgICAgICBob3N0IDogWydkYXduLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuZmFrZUZ1Y2tBZEJsb2NrKCdkZXRlY3RBZEJsb2NrJywgJ0RldGVjdEFkQmxvY2snKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZhYl9zcG9ydHNfZnIgOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEyMTcKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vU3BFTjVkdVMKICAgICAgICBob3N0IDogWydzcG9ydHMuZnInXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmZha2VGdWNrQWRCbG9jaygnZmFiSW5zdGFuY2UnLCAnRmFiSW5zdGFuY2UnKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZhYl9ldXJvcGUxX2ZyIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMTg4CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL1VMZTF2elFSCiAgICAgICAgaG9zdCA6IFsnZXVyb3BlMS5mciddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuZmFrZUZ1Y2tBZEJsb2NrKCdmYWJJbnN0YW5jZScsICdGYWJJbnN0YW5jZScpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmFiX25ld3lvcmtlcl9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzExNzcKICAgICAgICBob3N0IDogWyduZXd5b3JrZXIuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5mYWtlRnVja0FkQmxvY2soJ3NuaWZmQWRCbG9jaycsICdTbmlmZkFkQmxvY2snKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZhYl93aXJlZF9jb20gOiB7CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEwNjEKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9mci9mb3J1bS9kaXNjdXNzaW9uLzgyMzUKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vUHExNHY0RkMKICAgICAgICBob3N0IDogWyd3aXJlZC5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmZha2VGdWNrQWRCbG9jaygnc25pZmZBZEJsb2NrJywgJ1NuaWZmQWRCbG9jaycpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmFiX21hbmdhc3Byb2plY3RfZG9tYWlucyA6IHsKICAgICAgICAvLyBub3RlOiBmdWNrYWRibG9jayB3aXRoIGN1c3RvbSBpbnN0YW5jZSBuYW1lCiAgICAgICAgLy8gbm90ZTogYWxzbyBhZGRlZCBhYnAgcnVsZQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMTI3CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZnIvZm9ydW0vZGlzY3Vzc2lvbi80MTMyCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzg1OAogICAgICAgIC8vIHNvdXJjZTogaHR0cHM6Ly9tYW5nYXMuemx4LmNvbS5ici9tYW5nYXpvcmRfbGliL2pzL2xpYi9jb250cm9sbGVycy9MZWl0b3IvTGVpdG9yLm1pbi5qcwogICAgICAgIGhvc3QgOiBbJ21hbmdhc3Byb2plY3QuY29tLmJyJywgJ21hbmdhc3Byb2plY3QubmV0LmJyJywgJ21hbmdhcy56bHguY29tLmJyJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5mYWtlRnVja0FkQmxvY2soJ21hbmdhc0xlaXRvclNsaWRlcicsIEFhay5nZW5lcmF0ZUlEKCkpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmFiX3FuaW1hdGVfY29tIDogewogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy83MzkKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNzA1CiAgICAgICAgLy8gbm90ZTogZnVja2FkYmxvY2sgY3VzdG9taXplZAogICAgICAgIGhvc3QgOiBbJ3FuaW1hdGUuY29tJ10sCiAgICAgICAgb25BbHdheXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYWRCbG9ja0RldGVjdGVkID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgfQogICAgICB9LAogICAgICBmYWJfZXVyb3RyYW5zcG9ydF9kZSA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODU4CiAgICAgICAgLy8gbm90ZTogZnVja2FkYmxvY2sgd2l0aCBjdXN0b20gaW5zdGFuY2UgbmFtZQogICAgICAgIGhvc3QgOiBbJ2V1cm90cmFuc3BvcnQuZGUnXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmZha2VGdWNrQWRCbG9jaygnYW50aUFkQmxvY2snLCBBYWsuZ2VuZXJhdGVJRCgpKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZhYl9jYWRldGVjdCA6IHsKICAgICAgICAvLyBieTogU2tyNHRjaEdyM2F6eU1vbmtpQmFsbGxsbGxaenp6CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzc4NAogICAgICAgIC8vIG5vdGU6IGZ1Y2thZGJsb2NrIHdpdGggY3VzdG9tIGluc3RhbmNlIG5hbWUKICAgICAgICBob3N0IDogWyd0emV0emUuaXQnLCAnYmVwcGVncmlsbG8uaXQnLCAnbGEtY29zYS5pdCddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuZmFrZUZ1Y2tBZEJsb2NrKCdjYWRldGVjdCcsICdDQURldGVjdCcpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmFiX2FnYXJfZ2FtZSA6IHsKICAgICAgICAvLyBub3RlOiBmdWNrYWRibG9jayB3aXRoIGN1c3RvbSBpbnN0YW5jZSBuYW1lCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEyNTcKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTEzNQogICAgICAgIGhvc3QgOiBbJ2FnYXJpby5zeCcsICdhZ2FyYWJpLmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuZmFrZUZ1Y2tBZEJsb2NrKCdhZ2FyaW9fU1hfYWRzJywgQWFrLmdlbmVyYXRlSUQoKSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBmYWJfZmlsZXNwYWNlX2NvbSA6IHsKICAgICAgICAvLyBub3RlOiBmdWNrYWRibG9jayB3aXRoIGN1c3RvbSBpbnN0YW5jZSBuYW1lCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL1lBUzBBczg3CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzEwMzcKICAgICAgICBob3N0IDogWydmaWxlc3BhY2UuY29tJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5mYWtlRnVja0FkQmxvY2soJ2ZBQicsIEFhay5nZW5lcmF0ZUlEKCkpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZmFiX3RvcHNlcmlhbHlfc2sgOiB7CiAgICAgICAgLy8gbm90ZTogZnVja2FkYmxvY2sgd2l0aCBjdXN0b20gaW5zdGFuY2UgbmFtZQogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS80MnRVUTlhVgogICAgICAgIGhvc3QgOiBbJ3RvcHNlcmlhbHkuc2snXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmZha2VGdWNrQWRCbG9jaygnc3JhdE5hVmFzJywgQWFrLmdlbmVyYXRlSUQoKSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBmYWJfY3VzdG9taXplZCA6IHsKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTQ1NQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNjU3CiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL040MmE1QmpFCiAgICAgICAgaG9zdCA6IFsnZXBpY3VyaW91cy5jb20nLCAnZGVza3RvcHNvbHV0aW9uLm9yZycsICdpbmRpYXRpbWVzLmNvbScsICdoaW5kdXN0YW50aW1lcy5jb20nLCAnaGFwcHl0cmlwcy5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHZhciBfc2V0QXR0cmlidXRlID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZTsKICAgICAgICAgICAgICB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PSAnY2xhc3MnICYmIHZhbHVlLmluZGV4T2YoJ3RleHRfYWRzJykgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnJzsKICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHRoaXMsICdmYWIgaW50ZXJjZXB0ZWQgOi0pJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfc2V0QXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGQzeHQzZXJfYW50aWFkYmxvY2sgOiB7CiAgICAgICAgLy8gc2l0ZTogaHR0cDovL2QzeHQzci5jb20vYW50aS1hZGJsb2NrCiAgICAgICAgLy8gY2FzZTogaHR0cDovL3Nwb3J0LXNob3cuZnIvanMvYWR2ZXJ0aXNlbWVudC1BZEJsb2NrLmpzCiAgICAgICAgLy8gY2FzZTogaHR0cDovL3d3dy4yc2l0ZS5tZS9hZHZlcnRpc2VtZW50LUFkQmxvY2suanMKICAgICAgICBob3N0IDogWydzcG9ydC1zaG93LmZyJywgJ3ZpcGZsYXNoLm5ldCcsICcyc2l0ZS5tZSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsuYWRkU3R5bGUoIiNibG9ja2Jsb2NrQSB7dmlzaWJpbGl0eTppbnZpc2libGU7ZGlzcGxheTpub25lO30gI2Jsb2NrYmxvY2tBIHRkIHt2aXNpYmlsaXR5OmludmlzaWJsZTtkaXNwbGF5Om5vbmU7fSAjYmxvY2tibG9ja0EgdGQgcCB7dmlzaWJpbGl0eTppbnZpc2libGU7ZGlzcGxheTpub25lO30gI2Jsb2NrYmxvY2tCIHt2aXNpYmlsaXR5OnZpc2libGU7ZGlzcGxheTpibG9jazt9Iik7CiAgICAgICAgfQogICAgICB9LAogICAgICBhZGJsb2NrX25vdGlmeSA6IHsKICAgICAgICAvLyBieTogU2tyNHRjaEdyM2F6eU1vbmtpQmFsbGxsbGxaenp6CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE3NjYKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTM5MgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMDM5CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzU5MgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy84MTMKICAgICAgICBob3N0IDogWydnYW1ldHJhbnNmZXJzLmNvbScsICd3aW5hbmRtYWMuY29tJywgJ2ZyZWUtc3RlYW0tZ2l2ZWF3YXlzLmNvbScsICdjYW5hbHdwLmNvbScsICdhbHBoYWhpc3RvcnkuY29tJywgJ25vcmRwcmVzc2UuYmUnLCAnc29zcGMubmFtZScsICdiYWJvby5jb20uYnInXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ2FuQ29va2llJywgdHJ1ZSk7CiAgICAgICAgICBBYWsudXcuYW5PcHRpb25zID0ge307CiAgICAgICAgfQogICAgICB9LAogICAgICBsdXR0ZV9hZGJsb2NrIDogewogICAgICAgIC8vIHNpdGU6IGh0dHA6Ly9sdXR0ZWFkYmxvY2suYmxvZ3Nwb3QuY29tLzIwMTQvMTEvbGUtc2NyaXB0Lmh0bWwKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvOTM4CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzU4MAogICAgICAgIGhvc3QgOiBbJ2xld2VidHZib3VxdWV0ZnJhbmNvcGhvbmUub3ZlcmJsb2cuY29tJywgJ3dlYnR2LmJsb2d1ZXouY29tJywgJ2xhdGVsZWdyYXR1aXRlLmJsb2dzcG90LmNvbScsICd0b3RhbGRlYnJpZC5vcmcnLCAnMzcuMTg3LjE3My4yMDUnLCAndHZncmF0dWl0ZS5ibG9nc3BvdC5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZEJhaXRFbGVtZW50KCdkaXYjbXlfYWRfZGl2Jyk7CiAgICAgICAgICBBYWsudXcuamFiYmFodWQgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFudGlibG9jayA6IHsKICAgICAgICAvLyBzaXRlOiBhbnRpYmxvY2sub3JnCiAgICAgICAgLy8gbm90ZTogY3VzdG9taXplZAogICAgICAgIC8vIGlzc3VlOiAKICAgICAgICBob3N0IDogWydteWJhbmsucGwnLCAncmFwaWRncmFiLnBsJ10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHZhciBfYWRkRXZlbnRMaXN0ZW5lciA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyOwogICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIudG9TdHJpbmcoKS5pbmRleE9mKCcubmV4dEZ1bmN0aW9uKCl9JykgPiAtMSkgewogICAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oWydBbnRpQWRiS2lsbGVyJywgbG9jYXRpb24uaG9zdCwgJ0FudGlCbG9ja3tjdXN0b21pemVkfSddKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF9hZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcywgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJsb2NrYWRibG9jayA6IHsKICAgICAgICAvLyBzaXRlOiBibG9ja2FkYmxvY2suY29tCiAgICAgICAgLy8gbm90ZTogcmFuZG9tIGluc3RhbmNlIG5hbWUKICAgICAgICAvLyBzb3VyY2U6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1dhdGlsaW4vYWY3NWUwYTJlODJhMmVmYjM4NGJkZTljN2I0MWRlYzgKICAgICAgICAvLyBpc3N1ZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzP3E9bGFiZWw6QmxvY2tBZEJsb2NrCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZm9ydW0vZGlzY3Vzc2lvbi84MjczCiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZm9ydW0vZGlzY3Vzc2lvbi83NjI1CiAgICAgICAgaG9zdCA6IFsnYmxvY2thZGJsb2NrLmNvbScsICdsaW5rZHJvcC5uZXQnLCAncmV2Y2xvdWRzLmNvbScsICdsZXBvcm5vLm9yZycsICd1cGxvYWRzaHViLmNvbScsICdkYXNvbG8ub3JnJywgJ2Z1bGxzdHVmZi5uZXQnLCAnemV1c25ld3MuaXQnLCAnY2hlbWlub3RzLm5ldCcsICdsb2xzeS50dicsICdhbmltZXMtbWFuZ2FzLWRkbC5jb20nLCAnbm90aWNpYXNhdXRvbW90aXZhcy5jb20uYnInLCAnZGFya3N0YXJzLm9yZycsICdjb3JlcGFja3MuY29tJywgJ25hdHVyYWxiZC5jb20nLCAnY29vbHNvZnQuYWx0ZXJ2aXN0YS5vcmcnLCAnb3BlbmxvYWQudXMnLCAnY2RhLW9ubGluZS5wbCcsICd1cmJhbnBsYW5ldC5vcmcnLCAnbWFtYWhkLmNvbScsICdzYWRlZW1wYy5jb20nLCAnYXZtb28uY29tJywgJ3RoYWlsYW5kZS1mci5jb20nLCAnYnRhaWEuY29tJywgJ3R1c29mdC5vcmcnLCAnaGlzc2UubmV0JywgJ2V1cm9wZXVwLmNvbScsICducmouZnInLCAnc3Juay5jbycsICdhbmltbWV4LmNvJywgJ3NvY2tldGxvb3AuY29tJywgJ2NyYWNraGV4LmNvbScsICdyZXZlYWxlZHRyaWNrczR1LmNvbScsICdwaXp6YW1ha2luZy5jb20nLCAnY29tcHV0ZXJ3b3JtLm5ldCcsICd5b3VybGlmZXVwZGF0ZWQubmV0J10sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIEFhay5hZGRTY3JpcHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyB2YXJpYW50IDEKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgX3NldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dDsKICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCA9IGZ1bmN0aW9uIChmbiwgZGVsYXkpIHsKICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGZuLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnc3RyaW5nJyAmJiBmbi5pbmRleE9mKCdiYWJfZWxlbWVudGlkJykgPiAtMSkgewogICAgICAgICAgICAgICAgICBmbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oWydBbnRpQWRiS2lsbGVyJywgbG9jYXRpb24uaG9zdCwgJ0Jsb2NrQWRCbG9jayddKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF9zZXRUaW1lb3V0LmNhbGwodGhpcywgZm4sIGRlbGF5KTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBncHRfc3AgOiB7CiAgICAgICAgLy8gYnk6IFJlZWssIEdpd2F5dW1lCiAgICAgICAgLy8gbm90ZTogd2hlbiBhZGJsb2NrIGRldGVjdGVkIGluamVjdCBuZXcgYWRzLCByZWRpcmVjdCB0byBodHRwOi8vdGlueXVybC5jb20venEyejVvNgogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNjM2CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE1OTYKICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvMTI5NwogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMTQ0CiAgICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzE1NDIKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vOEFqaXRmYjIKICAgICAgICBob3N0IDogWydtYXJrZXR3YXRjaC5jb20nLCAnZGVhZGxpbmUuY29tJywgJ3R3ZWFrdG93bi5jb20nLCAnbnlwb3N0LmNvbScsICdyZWFsZ20uY29tJywgJ25hc2RhcS5jb20nXSwKICAgICAgICBvblN0YXJ0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgQWFrLmFkZFN0eWxlKCIuY29udGFpbmVyLS1iYW5uZXJBZCwgLmNvbC0tYWQgeyBkaXNwbGF5OiBub25lOyB9Iik7CiAgICAgICAgICBBYWsuYWRkU2NyaXB0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAvLyBHaXdheXVtZSAKICAgICAgICAgICAgICB3aW5kb3cuX3NwXyA9IHdpbmRvdy5fc3BfIHx8IHt9OwogICAgICAgICAgICAgIHdpbmRvdy5fc3BfLmNvbmZpZyA9IHdpbmRvdy5fc3BfLmNvbmZpZyB8fCB7fTsKICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93Ll9zcF8uY29uZmlnLCAiY29udGVudF9jb250cm9sX2NhbGxiYWNrIiwgewogICAgICAgICAgICAgICAgdmFsdWUgOiBmdW5jdGlvbiAoKSB7fSwKICAgICAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgICAgICBjb25maWd1cmFibGUgOiBmYWxzZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIC8vIFJlZWsKICAgICAgICAgICAgICB2YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSB3aW5kb3cuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7CiAgICAgICAgICAgICAgd2luZG93LkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnc3AuYmxvY2tpbmcnKSB7CiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhbJ0FudGlBZGJLaWxsZXInLCBsb2NhdGlvbi5ob3N0LCAnR1BUe3NwLWJsb2NraW5nfSddKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF9hZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcywgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGtydXhfYXNsIDogewogICAgICAgIC8vIG5vdGU6IHdoZW4gYWRibG9jayBkZXRlY3RlZCBpbmplY3QgbmV3IGFkcwogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS8wSEQ3Tjg0aQogICAgICAgIGhvc3QgOiBbJ2NvbW1lbnRjYW1hcmNoZS5uZXQnLCAnam91cm5hbGRlc2ZlbW1lcy5jb20nLCAnbGludGVybmF1dGUuY29tJ10sCiAgICAgICAgb25CZWZvcmVTY3JpcHQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW3sKICAgICAgICAgICAgICBkZXRlY3RlZCA6ICdLcnV4e2FzbH0nLAogICAgICAgICAgICAgIGNvbnRhaW5zIDogJ0FzbC5wcm90b3R5cGUuaW5qZWN0JywKICAgICAgICAgICAgICBleHRlcm5hbCA6IGZhbHNlLAogICAgICAgICAgICAgIHJlbW92ZSA6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgXTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGtydXhfYWRwIDogewogICAgICAgIC8vIG5vdGU6IHdoZW4gYWRibG9jayBkZXRlY3RlZCBpbmplY3QgbmV3IGFkcwogICAgICAgIC8vIHNvdXJjZTogCiAgICAgICAgaG9zdCA6IFsnZm91cmNoZXR0ZS1ldC1iaWtpbmkuZnInLCAnbWV0ZW9jaXR5LmNvbSddLAogICAgICAgIG9uU3RhcnQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBYWsudXcuYWRQcm90ZWN0ID0gMTsKICAgICAgICB9CiAgICAgIH0sCSAKICAgICAgcGhvZW5peF9nb3lhdmVsYWIgOiB7CiAgICAgICAgLy8gbm90ZTogd2hlbiBhZGJsb2NrIGRldGVjdGVkIGluamVjdCBuZXcgYWRzCiAgICAgICAgLy8gbm90ZTogc2NyaXB0IGFudGktYWRibG9jayBvYmZ1c2NhdGVkLAogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8KICAgICAgICAvLyBkb2M6IGh0dHA6Ly90aW55dXJsLmNvbS9nbDNnaHEyCiAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL2hzQW1kU3VmCiAgICAgICAgaG9zdCA6IFsnZGVtby1waG9lbml4LmNvbScsICdkcHN0cmVhbS5uZXQnLCAnZ3VtLWd1bS1zdHJlYW1pbmcuY29tJywgJ2pldS5pbmZvJywgJ3NvZm9vdC5jb20nLCAnZ2FhcmEtZnIuY29tJywgJ2dheXR1YmUuY29tJywgJ3R1eGJvYXJkLmNvbScsICd4c3RvcnktZnIuY29tJywgJ2hlbnRhaWZyLm5ldCcsICdmaWxtc3RyZWFtaW5nLWhkLmNvbScsICdmaWxtdmYubmV0JywgJ2hlbnRhaWhhdmVuLm9yZycsICduYXJ1dG9zaGlwcHVkZW52Zi5jb20nLCAndGhlYmFkYnV6ei5jb20nLCAnbWFuZ2EtbmV3cy5jb20nLCAnamV1LnZpZGVvJywgJ21hbmdhcy1mci5jb20nXSwKICAgICAgICBvbkFsd2F5cyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vQWFrLnV3Ll9fJGRjID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICBBYWsuYWRkU3R5bGUoJ2JvZHkge3Zpc2liaWxpdHk6IHZpc2libGU7fScpOwogICAgICAgIH0sCiAgICAgICAgb25CZWZvcmVTY3JpcHQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW3sgCiAgICAgICAgICAgICAgZGV0ZWN0ZWQgOiAnUGhvZW5peEdveWF2ZWxhYicsCiAgICAgICAgICAgICAgY29udGFpbnMgOiAnUEhFTlYnLAogICAgICAgICAgICAgIGV4dGVybmFsIDogZmFsc2UsCiAgICAgICAgICAgICAgcmVtb3ZlOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIF07CiAgICAgICAgfQogICAgICB9LAogICAgICBhZF9kZWZlbmRfdWFicCA6IHsKICAgICAgICAvLyBub3RlOiB3aGVuIGFkYmxvY2sgZGV0ZWN0ZWQgaW5qZWN0IG5ldyBhZHMKICAgICAgICAvLyBzb3VyY2U6IGh0dHA6Ly9wYXN0ZWJpbi5jb20vY0ZRQ3A4MFcKICAgICAgICBob3N0IDogWyd0dnNwaWVsZmlsbS5kZScsICdmaW5hbnplbi5jaCddLAogICAgICAgIG9uQmVmb3JlU2NyaXB0IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgZGV0ZWN0ZWQgOiAnQWREZWZlbmR7VUFCUEluamVjdH0nLAogICAgICAgICAgICAgIGNvbnRhaW5zIDogJ1VBQlBJbmplY3QnLAogICAgICAgICAgICAgIGV4dGVybmFsIDogZmFsc2UsCiAgICAgICAgICAgICAgcmVtb3ZlIDogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgfSwKICAgICAgYWRfZGVmZW5kX3VhYiA6IHsKICAgICAgICAvLyBub3RlOiB3aGVuIGFkYmxvY2sgZGV0ZWN0ZWQgaW5qZWN0IG5ldyBhZHMKICAgICAgICAvLyB1c2Vyc2NyaXB0OiBodHRwczovL29wZW51c2VyanMub3JnL3NjcmlwdHMvc2Nod2FyenRlZS9BZERlZmVuZF9LbGF0c2NoZQogICAgICAgIC8vIHVzZXJzY3JpcHQ6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2Fub255bW91cy9hOWI5OTU2YmFmMWQ1OWExMDdjNQogICAgICAgIC8vIHNvdXJjZTogaHR0cDovL3Bhc3RlYmluLmNvbS8xVnlXMHU5bSwgaHR0cDovL3Bhc3RlYmluLmNvbS9BWnFoUnhXVQogICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWxhYmVsOkFkRGVmZW5kCiAgICAgICAgLy8gcHVsbDogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9wdWxsLzQ2NwogICAgICAgIGhvc3QgOiBbJ3dhdGNoZ2VuZXJhdGlvbi5mcicsICd0dXJiby5mcicsICcyNG1hdGlucy5mcicsICdmb290MDEuY29tJywgJ2NsdWJpYy5jb20nLCAnbWFjZy5jbycsICdiZWdlZWsuZnInLCAnaWdlbi5mcicsICdnYW1lc3Rhci5kZScsICdmb2N1cy5kZScsICdzdGVybi5kZScsICdzYXQxLicsICdwcm9zaWViZW4uJywgJ2thYmVsZWlucy4nLCAnc2F0MWdvbGQuJywgJ3NpeHguJywgJ3Byb3NpZWJlbm1heHguJywgJ2ZlbS5jb20nLCAndGhlLXZvaWNlLW9mLWdlcm1hbnkuJywgJ3dldHRlci5jb20nLCAnd2V0dGVyb25saW5lLmRlJywgJ3Bjd2VsdC5kZScsICdib2Vyc2Utb25saW5lLmRlJywgJ3Nwb3J0YXV0by5kZScsICdhdXRvLW1vdG9yLXVuZC1zcG9ydC5kZScsICdtb3Rvci1rbGFzc2lrLmRlJywgJzR3aGVlbGZ1bi5kZScsICdhdXRvc3RyYXNzZW52ZXJrZWhyLmRlJywgJ2x1c3RpY2guZGUnLCAnc3BveC5jb20nLCAnc2h6LmRlJywgJ3RyYW5zZmVybWFya3QuZGUnLCAncnAtb25saW5lLmRlJywgJ21vdG9ycmFkb25saW5lLmRlJywgJzIwbWluLmNoJywgJ21haW4tc3BpdHplLmRlJywgJ3dvcm1zZXItemVpdHVuZy5kZScsICdsYW1wZXJ0aGVpbWVyLXplaXR1bmcuZGUnLCAnd2llc2JkZW5lci10YWdibGF0dC5kZScsICdidWVyc3RhZWR0ZXItemVpdHVuZy5kZScsICd3aWVzYmRlbmVyLWt1cmllci5kZScsICdyaGVpbi1tYWluLXByZXNzZS5kZScsICdhbGxnZW1laW5lLXplaXR1bmcuZGUnLCAnYXJpdmEuZGUnLCAnc3BpZWdlbC5kZScsICdicmlnaXR0ZS5kZScsICdkc2hpbmkubmV0JywgJ2dhbGEuZGUnLCAnZ2FtZXByby5kZScsICdnYW1vbmEuZGUnLCAncG5uLmRlJywgJ3Byb21vYmlsLmRlJywgJ3Nwb3J0YWwuZGUnLCAnd2ViZmFpbC5jb20nLCAnY29tcHV0ZXJiaWxkLmRlJywgJ2ZpbmFuemVuLm5ldCcsICdjb211bmlvLmRlJywgJ21lZGlzaXRlLmZyJ10sCiAgICAgICAgb25CZWZvcmVTY3JpcHQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW3sKICAgICAgICAgICAgICBkZXRlY3RlZCA6ICdBZERlZmVuZHt1YWJJbmplY3R9JywKICAgICAgICAgICAgICBjb250YWlucyA6ICd1YWJJbmplY3QnLAogICAgICAgICAgICAgIGV4dGVybmFsIDogZmFsc2UsCiAgICAgICAgICAgICAgcmVtb3ZlIDogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLyogc29sdmVkIGJ5IEFha0xJc3QKICAgICAgdGlzb29taV9pbmRpcmVrdCA6IHsKICAgICAgLy8gaW5saW5lOiBodHRwOi8vcGFzdGViaW4uY29tL25wbVhUVUh3CiAgICAgIC8vIGV4dGVybmFsOiBodHRwOi8vcGFzdGViaW4uY29tL2h2V25DdUR3CiAgICAgIGhvc3QgOiBbJ2VuZXJneS5kZScsICdnZXR2aWRzLmRlJywgJ2dld2luZGUtbm9ybWVuLmRlJywgJ3BvZGNhc3QuZGUnLCAnc3BpZWxlc3BpZWxlbjI0LmRlJywgJ2RpYWxvLmRlJ10sCiAgICAgIG9uQmVmb3JlU2NyaXB0IDogZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsKICAgICAgdmFyIHRleHQgPSB0YXJnZXQudGV4dDsKICAgICAgaWYgKEFhay5jb250YWlucyh0ZXh0LCAnbj0iYWJjZGVmZ2hpamtsbSIscj0ibm9wcXJzdHV2d3h5eiIsaT0iMDEyMzQ1Njc4OSI7dmFyIHM9dD09MD9pOnQ9PTE/bicpKSB7CiAgICAgIEFhay5zdG9wU2NyaXB0KGUpOwogICAgICBBYWsubG9nKCdUaXNvb21pIEluZGlyZWt0Jyk7CiAgICAgIH0KICAgICAgfQogICAgICB9LAogICAgICAgKi8KICAgICAgLyogc29sdmVkIGJ5IEFha0xJc3QKICAgICAgdGlzb29taV9kaXJla3QgOiB7CiAgICAgIC8vIGlubGluZTogaHR0cDovL3Bhc3RlYmluLmNvbS8ydnEzOEpYWQogICAgICBob3N0IDogWydhdXRvemVpdHVuZy5kZScsICdmb3JtZWwxLmRlJywgJ2ZyZW1kd29ydC5kZScsICdpbnNpZGUtaGFuZHkuZGUnLCAnbW90b3JzcG9ydC10b3RhbC5jb20nLCAnYXVzc2Vud2lydHNjaGFmdHNsdXBlLmRlJywgJ2Rvbm5lcndldHRlci5kZScsICd3aW50b3RhbC5kZSddLAogICAgICBvbkJlZm9yZVNjcmlwdCA6IGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7CiAgICAgIHZhciB0ZXh0ID0gdGFyZ2V0LnRleHQ7CiAgICAgIGlmIChBYWsuY29udGFpbnModGV4dCwgJ2Z1bmN0aW9uIGRldGVjdCgpJykpIHsKICAgICAgQWFrLnN0b3BTY3JpcHQoZSk7CiAgICAgIEFhay5sb2coJ1Rpc29vbWkgRGlyZWt0Jyk7CiAgICAgIH0KICAgICAgfQogICAgICB9LAogICAgICAgKi8KICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgLy8gR2VuZXJpYwogICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICBnZW5lcmljIDogewogICAgICAgIGhvc3QgOiBbJy4qPyddLAogICAgICAgIG9uUmVtb3ZlIDogZnVuY3Rpb24gKHJlbW92ZWROb2RlKSB7CiAgICAgICAgICBpZiAoQWFrLm9wdHMucmVtb3ZlZCkgewogICAgICAgICAgICBpZiAocmVtb3ZlZE5vZGUuc3JjIHx8CiAgICAgICAgICAgICAgcmVtb3ZlZE5vZGUuaWQgfHwKICAgICAgICAgICAgICByZW1vdmVkTm9kZS5jbGFzc05hbWUgJiYKICAgICAgICAgICAgICAhL15maXJlYnVnLy50ZXN0KHJlbW92ZWROb2RlLmNsYXNzTmFtZSkpIHsKICAgICAgICAgICAgICAvLyBOb2RlIHJlbW92ZWQKICAgICAgICAgICAgICBBYWsubG9nKHJlbW92ZWROb2RlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgb25TdGFydCA6IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAvLyBGdWNrQWRCbG9jayAmIEJsb2NrQWRCbG9jayB2MyBhbmQgdjQKICAgICAgICAgIC8vIHNpdGU6IGh0dHA6Ly93d3cuc2l0ZXh3LmZyL2Z1Y2thZGJsb2NrLwogICAgICAgICAgLy8gcmVwbzogaHR0cHM6Ly9naXRodWIuY29tL3NpdGV4dy9GdWNrQWRCbG9jawogICAgICAgICAgLy8gcmVwbzogaHR0cHM6Ly9naXRodWIuY29tL3NpdGV4dy9CbG9ja0FkQmxvY2sKICAgICAgICAgIC8vIG5vdGU6IHdoZW4gZnVja2FkYmxvY2suanMgb3IgYmxvY2thZGJsb2NrLmpzIGlzIGJsb2NrZWQKICAgICAgICAgIC8vIGRlbW8gdjM6IGh0dHA6Ly9zaC5zdC92b3ZIRQogICAgICAgICAgLy8gZGVtbyB2NDogaHR0cDovL2FsLmx5L3FCYlhICiAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODg4CiAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODI0CiAgICAgICAgICBBYWsuZmFrZUZ1Y2tBZEJsb2NrKCdmdWNrQWRCbG9jaycsICdGdWNrQWRCbG9jaycpOwogICAgICAgICAgQWFrLmZha2VGdWNrQWRCbG9jaygnYmxvY2tBZEJsb2NrJywgJ0Jsb2NrQWRCbG9jaycpOwoKICAgICAgICAgIC8vIGNhblJ1bkFkcwogICAgICAgICAgLy8gcmVwbzogaHR0cHM6Ly9naXRodWIuY29tL01hdHRoZXdHcm9zcy9DYW5SdW5BZHMKICAgICAgICAgIC8vIG5vdGU6IHVzZSBleHRlcm5hbGwgc2NyaXB0ICIvanMvYWRzLmpzIiAtPiB2YXIgY2FuUnVuQWRzID0gdHJ1ZTsKICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYWsudXcsICdjYW5SdW5BZHMnLCB7CiAgICAgICAgICAgIGVudW1lcmFibGUgOiB0cnVlLAogICAgICAgICAgICB3cml0YWJsZSA6IGZhbHNlLAogICAgICAgICAgICB2YWx1ZSA6IHRydWUKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIGNhblNob3dBZHMKICAgICAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMTk3CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAnY2FuU2hvd0FkcycsIHsKICAgICAgICAgICAgZW51bWVyYWJsZSA6IHRydWUsCiAgICAgICAgICAgIHdyaXRhYmxlIDogZmFsc2UsCiAgICAgICAgICAgIHZhbHVlIDogdHJ1ZQogICAgICAgICAgfSk7CgogICAgICAgICAgLy8gQWRibG9ja2VyIERldGVjdGluZyBTY3JpcHRzOiBNZXRob2QgMgogICAgICAgICAgLy8gZ2lzdDogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaXJhemFzeWVkLzNkMjQ3ZDNkMTIxZTc4MWEzODcyCiAgICAgICAgICAvLyBub3RlOiB1c2UgZXh0ZXJuYWxsIHNjcmlwdCAiL2pzL2Fkcy5qcyIgLT4gaXNBZEJsb2NrQWN0aXZlID0gZmFsc2U7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWFrLnV3LCAnaXNBZEJsb2NrQWN0aXZlJywgewogICAgICAgICAgICBlbnVtZXJhYmxlIDogdHJ1ZSwKICAgICAgICAgICAgd3JpdGFibGUgOiBmYWxzZSwKICAgICAgICAgICAgdmFsdWUgOiBmYWxzZQogICAgICAgICAgfSk7CgogICAgICAgICAgLyoKICAgICAgICAgIHdpbmRvdy5pSGF2ZUxvYWRlZEFkcyA9IHRydWU7CiAgICAgICAgICB2YXIgbmljZUFkc0NoZWNrPXRydWU7CiAgICAgICAgICBhZGJsb2NrID0gZmFsc2UKICAgICAgICAgIGlzX2Jsb2NrZXIgPSBmYWxzZTsKICAgICAgICAgICAqLwogICAgICAgIH0sCiAgICAgICAgb25JZGxlIDogZnVuY3Rpb24gKCkgewoKICAgICAgICAgIC8vIEFkQmxvY2sgRGV0ZWN0b3IgKFhlbkZvcm8gUmVsbGVjdCkKICAgICAgICAgIC8vIHNpdGU6IGh0dHA6Ly90aW55dXJsLmNvbS9wYTI4eGRuCiAgICAgICAgICAvLyBjbG9uZUludG86IGh0dHA6Ly90aW55dXJsLmNvbS9rNnFwaG1lCiAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODA1CiAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODA0CiAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvNTkxCiAgICAgICAgICBpZiAoQWFrLnV3LlhlbkZvcm8gJiYgdHlwZW9mIEFhay51dy5YZW5Gb3JvLnJlbGxlY3QgPT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgQWFrLnV3LlhlbkZvcm8ucmVsbGVjdCA9IHsKICAgICAgICAgICAgICBBZEJsb2NrRGV0ZWN0b3IgOiB7CiAgICAgICAgICAgICAgICBzdGFydCA6IGZ1bmN0aW9uICgpIHt9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0FkQmxvY2sgRGV0ZWN0b3IgKFhlbkZvcm8gUmVsbGVjdCknKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKgogICAgICAgICAgLy8gQWR1bmJsb2NrIC0gaHR0cDovL2FkdW5ibG9jay5jb20vCiAgICAgICAgICBpZiAoQWFrLmdldENvb2tpZSgnYWRibG9jaycpID09IDEpIHsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ2FkYmxvY2snLCAwKTsKICAgICAgICAgIEFhay5zZXRDb29raWUoJ2Jhcl9jbG9zZWQnLCAxKTsKICAgICAgICAgIH0KICAgICAgICAgICAqLwoKICAgICAgICAgIC8vIEFkYmxvY2sgQmxvY2tlcgogICAgICAgICAgLy8gaHR0cHM6Ly93b3JkcHJlc3Mub3JnL3BsdWdpbnMvYWRkYmxvY2tibG9ja2VyLwogICAgICAgICAgLy8gaHR0cDovL3Rpbnl1cmwuY29tL25zd242ZnoKICAgICAgICAgIC8vIGh0dHA6Ly9wYXN0ZWJpbi5jb20vZDY1enIzN20KICAgICAgICAgIC8qIGNhbiBjYXVzZSBhIGJ1ZwogICAgICAgICAgdmFyIGFkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Fmc19hZHMnKTsKICAgICAgICAgIHZhciBhZCA9IGFkcy5sZW5ndGggJiYgYWRzW2Fkcy5sZW5ndGggLSAxXTsKICAgICAgICAgIGlmIChhZCAmJiBhZC5pbm5lckhUTUwubGVuZ3RoID09PSAwIHx8IGFkLmNsaWVudEhlaWdodCA9PT0gMCkgewogICAgICAgICAgQWFrLmFkZFNjcmlwdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lTmF0aXZlID0gSFRNTERvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lOwogICAgICAgICAgSFRNTERvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkgewogICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSAnYWZzX2FkcycpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbyhbJ0FudGlBZGJLaWxsZXInLCBsb2NhdGlvbi5ob3N0LCAnQWRibG9ja0Jsb2NrZXInLCBjbGFzc05hbWVdKTsKICAgICAgICAgIHZhciB1bmlxaWQgPSBEYXRlLm5vdygpOwogICAgICAgICAgdmFyIGJhaXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgIGJhaXQuaW5uZXJIVE1MID0gJzxicj4nOwogICAgICAgICAgYmFpdC5jbGFzc05hbWUgPSB1bmlxaWQ7CiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJhaXQpOwogICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUodW5pcWlkKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lTmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICAgKi8KCiAgICAgICAgICAvLyBBZGJ1ZGR5CiAgICAgICAgICBpZiAodHlwZW9mIEFhay51dy5jbG9zZUFkYnVkZHkgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgQWFrLnV3LmNsb3NlQWRidWRkeSgpOwogICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0FkYnVkZHknKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBZEJsb2NrIEFsZXJ0ZXIgKFdQKQogICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dwLXBsdWdpbnMvYWRibG9jay1hbGVydGVyCiAgICAgICAgICAvLwogICAgICAgICAgaWYgKEFhay5nZXRFbGVtZW50KCdkaXYuYWRiX292ZXJsYXkgPiBkaXYuYWRiX21vZGFsX2ltZycpKSB7CiAgICAgICAgICAgIC8vIFJlbW92ZSBBbGVydCArIEFsbG93IFNjcm9sbAogICAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudCgnZGl2LmFkYl9vdmVybGF5Jyk7CiAgICAgICAgICAgIEFhay5hZGRTdHlsZSgnaHRtbCxib2R5IHtoZWlnaHQ6YXV0bzsgb3ZlcmZsb3c6IGF1dG87fScpOwogICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0FkQmxvY2tBbGVydGVyJyk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gVW5rbm93IEFudGkgQWRCbG9jayBzeXN0ZW0KICAgICAgICAgIGlmIChBYWsuZ2V0RWxlbWVudCgnI2Jsb2NrZGl2JykgJiYgQWFrLmNvbnRhaW5zKEFhay5nZXRFbGVtZW50KCcjYmxvY2tkaXYnKS5pbm5lckhUTUwsICdkaXNhYmxlIGFkIGJsb2NraW5nIG9yIHVzZSBhbm90aGVyIGJyb3dzZXIgd2l0aG91dCBhbnkgYWRibG9ja2VyIHdoZW4geW91IHZpc2l0JykpIHsKICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoJyNibG9ja2RpdicpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEFudGlibG9jay5vcmcgdjIKICAgICAgICAgIC8vIG5vdGU6IGRldGVjdCBhbmQgc3RvcmUgYmxvY2sgaWQKICAgICAgICAgIC8vIGRlbW86IGh0dHA6Ly90aW55dXJsLmNvbS9uaHlocHprCiAgICAgICAgICB2YXIgc3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBzdHlsZSA9IHN0eWxlc1tpXTsKICAgICAgICAgICAgdmFyIGNzc1J1bGVzID0gc3R5bGUuc2hlZXQuY3NzUnVsZXM7CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY3NzUnVsZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICB2YXIgY3NzUnVsZSA9IGNzc1J1bGVzW2pdOwogICAgICAgICAgICAgIHZhciBjc3NUZXh0ID0gY3NzUnVsZS5jc3NUZXh0OwogICAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gL14jKFthLXowLTldezQsMTB9KSB+IFwqIFx7IGRpc3BsYXk6IG5vbmU7IFx9LzsKICAgICAgICAgICAgICBpZiAocGF0dGVybi50ZXN0KGNzc1RleHQpKSB7CiAgICAgICAgICAgICAgICB2YXIgaWQgPSBwYXR0ZXJuLmV4ZWMoY3NzVGV4dClbMV07CiAgICAgICAgICAgICAgICBpZiAoQWFrLmhhc1NjcmlwdCgidy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywiICsgaWQgKyAiLGZhbHNlKSIpKSB7CiAgICAgICAgICAgICAgICAgIEFhay5hYWJzLmFibzIgPSBpZDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHdpbiA9IEFhay51dzsKICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gd2luKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKCEvXndlYmtpdC8udGVzdChwcm9wKSAmJiAvXlthLXowLTldezQsMTJ9JC9pLnRlc3QocHJvcCkgJiYgcHJvcCAhPT0gJ2RvY3VtZW50JyAmJiAod2luW3Byb3BdaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQpID09PSBmYWxzZSAmJiB3aW4uaGFzT3duUHJvcGVydHkocHJvcCkgJiYgdHlwZW9mIHdpbltwcm9wXSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSB3aW5bcHJvcF07CgogICAgICAgICAgICAgICAgLy8gQW50aWJsb2NrLm9yZyB2MyAmIEJldHRlclN0b3BBZGJsb2NrCiAgICAgICAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODMzCiAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmRlZmVyRXhlY3V0aW9uICYmCiAgICAgICAgICAgICAgICAgIG1ldGhvZC5kaXNwbGF5TWVzc2FnZSAmJgogICAgICAgICAgICAgICAgICBtZXRob2QuZ2V0RWxlbWVudEJ5ICYmCiAgICAgICAgICAgICAgICAgIG1ldGhvZC5nZXRTdHlsZSAmJgogICAgICAgICAgICAgICAgICBtZXRob2QuaW5zZXJ0ICYmCiAgICAgICAgICAgICAgICAgIG1ldGhvZC5uZXh0RnVuY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZC50b2dnbGUpIHsKICAgICAgICAgICAgICAgICAgICBBYWsuYWFicy5ic2EgPSBwcm9wOwogICAgICAgICAgICAgICAgICAgIEFhay5kZXRlY3RlZCgnQmV0dGVyU3RvcEFkYmxvY2t7ZG9tfScpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIEFhay5hYWJzLmFibzMgPSBwcm9wOwogICAgICAgICAgICAgICAgICAgIEFhay5kZXRlY3RlZCgnQW50aWJsb2NrM3tkb219Jyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgd2luW3Byb3BdID0gbnVsbDsgLy8ga2lsbCBpbnN0YW5jZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEJsb2NrQWRCbG9jawogICAgICAgICAgICAgICAgLy8gc2l0ZTogYmxvY2thZGJsb2NrLmNvbQogICAgICAgICAgICAgICAgLy8gbm90ZTogcmFuZG9tIGluc3RhbmNlIG5hbWUKICAgICAgICAgICAgICAgIC8vIHNvdXJjZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vV2F0aWxpbi9hZjc1ZTBhMmU4MmEyZWZiMzg0YmRlOWM3YjQxZGVjOAogICAgICAgICAgICAgICAgLy8gaXNzdWVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcz9xPWxhYmVsJTNBQmxvY2tBZEJsb2NrCiAgICAgICAgICAgICAgICBpZiAobWV0aG9kLmJhYikgeyAvLyB2YXJpYW50IDEKICAgICAgICAgICAgICAgICAgQWFrLmRldGVjdGVkKCdCbG9ja0FkQmxvY2t7ZG9tOnZhcmlhbnQxfScpOwogICAgICAgICAgICAgICAgICB3aW5bcHJvcF0gPSBudWxsOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhtZXRob2QpLmxlbmd0aCA9PT0gMyAmJiBPYmplY3Qua2V5cyhtZXRob2QpLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICAgICAgICB9KS5qb2luKCkubGVuZ3RoID09PSAzMikgeyAvLyB2YXJpYW50IDIKICAgICAgICAgICAgICAgICAgQWFrLmRldGVjdGVkKCdCbG9ja0FkQmxvY2t7ZG9tOnZhcmlhbnQyfScpOwogICAgICAgICAgICAgICAgICB3aW5bcHJvcF0gPSBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2Vycm9yJywgcHJvcCkKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIEFudGktQWRibG9ja2VycwogICAgICAgICAgdmFyIGFhYnMgPSB7CiAgICAgICAgICAgIC8vIFBsdWdpbnMgV29yZFByZXNzCiAgICAgICAgICAgIE5vQWRCbG9jayA6ICcoL3BsdWdpbnMvbm8tYWRibG9jay98L2Jsb2NrQmxvY2svYmxvY2tCbG9jay5qcXVlcnkuanMpJywKICAgICAgICAgICAgQmV0dGVyU3RvcEFkYmxvY2sgOiAnKC9wbHVnaW5zL2JldHRlci1zdG9wLWFkYmxvY2svfGJzYS1zY3JpcHQtZG9jdHlwZS5qc3xic2Etc2NyaXB0LW5vLWRvY3R5cGUuanMpJywKICAgICAgICAgICAgQWRCbG9ja0Jsb2NrZXIgOiAnL3BsdWdpbnMvd29yZHByZXNzLWFkYmxvY2stYmxvY2tlci8nLAogICAgICAgICAgICBBbnRpQmxvY2tCdWtzc2FBeW1hbiA6ICcvcGx1Z2lucy9hbnRpLWJsb2NrLycsCiAgICAgICAgICAgIEJsb2NrQWx5emVyIDogJy9wbHVnaW5zL2Jsb2NrYWx5emVyLWFkYmxvY2stY291bnRlci8nLAogICAgICAgICAgICBBZEJsb2NraW5nRGV0ZWN0b3IgOiAnL3BsdWdpbnMvYWQtYmxvY2tpbmctZGV0ZWN0b3IvJywKICAgICAgICAgICAgLy8gUGx1Z2lucyBXZWJzaXRlCiAgICAgICAgICAgIEFkd29ya21lZGlhIDogJyhhZHdvcmttZWRpYXxsb3h0a3xjb250ZW50bG9ja2luZ25ldHdvcmtzKS5jb20vZ0xvYWRlci5waHAnLAogICAgICAgICAgICBBZHNjZW5kbWVkaWEgOiAnYWRzY2VuZG1lZGlhLmNvbS9nd2pzLnBocCcsCiAgICAgICAgICAgIEZ1Y2tBZEJsb2NrIDogJygvZnVja2FkYmxvY2suanN8L2Jsb2NrYWRibG9jay5qcyknLAogICAgICAgICAgICBqUXVlcnlBZEJsb2NrIDogJy9qcXVlcnkuYWRibG9jay5qcycsCiAgICAgICAgICAgIGpRdWVyeUFkYmxvY2tEZXRlY3RvciA6ICcvanF1ZXJ5LmFkYmxvY2stZGV0ZWN0b3IuanMnLAogICAgICAgICAgICBBZEJsb2NrQWR2ZXJ0aXNlbWVudCA6ICcvYWR2ZXJ0aXNlbWVudC5qcycsCiAgICAgICAgICAgIEFkQmxvY2tBZHZlcnQgOiAnL2FkdmVydC5qcycsCiAgICAgICAgICAgIEFkQmxvY2tBZHZDdXN0b20gOiAnL2FkdmVydGlzZW1lbnQoLispLmpzJywKICAgICAgICAgICAgQWRCbG9ja0FkZnJhbWUgOiAnL2FkZnJhbWUuanMnLAogICAgICAgICAgICBBbnRpQWRCdXN0ZXIgOiAnL2FudGktYWQtYnVzdGVyLmpzJywKICAgICAgICAgICAgUlRLQW50aUFkYmxvY2sgOiAnL2Jsb2NrY2FrZS5qcycsCiAgICAgICAgICAgIEFkYmxvY2tEZXRlY3RvciA6ICcvQWRibG9ja0RldGVjdG9yL2hhbmRsZXIubWluLmpzJywKICAgICAgICAgICAgalF1ZXJ5QW50aUFkc0Jsb2NrIDogJy9qcXVlcnkuYW50aWFkc2Jsb2NrLmpzJywKICAgICAgICAgICAgQWRidWRkeSA6ICcvanMvYWRidWRkeS5taW4uanMnLAogICAgICAgICAgICBBbnRpQURzQmxvY2tlciA6ICcvYWFkYi9zY3JpcHQuanMnCiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuc2NyaXB0czsKICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2NyaXB0cy5sZW5ndGg7IHkrKykgewogICAgICAgICAgICB2YXIgc2NyaXB0ID0gc2NyaXB0c1t5XTsKICAgICAgICAgICAgaWYgKHNjcmlwdC5zcmMpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYWFicykgewogICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoYWFic1trZXldLCAnaScpLnRlc3Qoc2NyaXB0LnNyYykpIHsKICAgICAgICAgICAgICAgICAgQWFrLmRldGVjdGVkKFtrZXksIHNjcmlwdC5zcmNdKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgb25JbnNlcnQgOiBmdW5jdGlvbiAoaW5zZXJ0ZWROb2RlKSB7CgogICAgICAgICAgLy8gQWxsIE5vZGVzCiAgICAgICAgICBpZiAoQWFrLm9wdHMuaW5zZXJ0ZWQpIHsKICAgICAgICAgICAgaWYgKGluc2VydGVkTm9kZS5zcmMgfHwKICAgICAgICAgICAgICBpbnNlcnRlZE5vZGUuaWQgfHwKICAgICAgICAgICAgICBpbnNlcnRlZE5vZGUuY2xhc3NOYW1lICYmCiAgICAgICAgICAgICAgIS9maXJlYnVnLy50ZXN0KGluc2VydGVkTm9kZS5pbm5lckhUTUwpKSB7CiAgICAgICAgICAgICAgLy8gTm9kZSBpbnNlcnRlZAogICAgICAgICAgICAgIEFhay5sb2coaW5zZXJ0ZWROb2RlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIE5vLUFkYmxvY2sgLSBodHRwOi8vd3d3Lm5vLWFkYmxvY2suY29tLwogICAgICAgICAgaWYgKGluc2VydGVkTm9kZS5pZCAmJgogICAgICAgICAgICBpbnNlcnRlZE5vZGUuaWQubGVuZ3RoID09IDQgJiYKICAgICAgICAgICAgL15bYS16MC05XXs0fSQvLnRlc3QoaW5zZXJ0ZWROb2RlLmlkKSAmJgogICAgICAgICAgICBpbnNlcnRlZE5vZGUubm9kZU5hbWUgPT0gJ0RJVicgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLmZpcnN0Q2hpbGQgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLmZpcnN0Q2hpbGQuaWQgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLmZpcnN0Q2hpbGQuaWQgPT0gaW5zZXJ0ZWROb2RlLmlkICYmCiAgICAgICAgICAgIEFhay5jb250YWlucyhpbnNlcnRlZE5vZGUuaW5uZXJIVE1MLCAnbm8tYWRibG9jay5jb20nKSkgewogICAgICAgICAgICAvLyBSZW1vdmUKICAgICAgICAgICAgQWFrLmRldGVjdGVkKCdOby1BZGJsb2NrJywgZmFsc2UsIGxvY2F0aW9uLmhyZWYpOwogICAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudChpbnNlcnRlZE5vZGUpOwogICAgICAgICAgICAvL0Fhay5sb2coaW5zZXJ0ZWROb2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBTdG9wQWRibG9jayAtIGh0dHA6Ly9zdG9wYWRibG9jay5vcmcvZG93bmxvYWRzLwogICAgICAgICAgaWYgKGluc2VydGVkTm9kZS5pZCAmJgogICAgICAgICAgICBpbnNlcnRlZE5vZGUuaWQubGVuZ3RoID09IDcgJiYKICAgICAgICAgICAgL15hW2EtejAtOV17Nn0kLy50ZXN0KGluc2VydGVkTm9kZS5pZCkgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLm5vZGVOYW1lID09ICdESVYnICYmCiAgICAgICAgICAgIGluc2VydGVkTm9kZS5wYXJlbnROb2RlICYmCiAgICAgICAgICAgIGluc2VydGVkTm9kZS5wYXJlbnROb2RlLmlkICYmCiAgICAgICAgICAgIGluc2VydGVkTm9kZS5wYXJlbnROb2RlLmlkID09IGluc2VydGVkTm9kZS5pZCArICcyJyAmJgogICAgICAgICAgICBBYWsuY29udGFpbnMoaW5zZXJ0ZWROb2RlLmlubmVySFRNTCwgJ3N0b3BhZGJsb2NrLm9yZycpKSB7CiAgICAgICAgICAgIC8vIFJlbW92ZQogICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ1N0b3BBZEJsb2NrJywgZmFsc2UsIGxvY2F0aW9uLmhyZWYpOwogICAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudChpbnNlcnRlZE5vZGUpOwogICAgICAgICAgICAvL0Fhay5sb2coaW5zZXJ0ZWROb2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBbnRpQWRibG9jayAoUGFja2VyKQogICAgICAgICAgdmFyIHJlSWZyYW1lSWQgPSAvXih6ZHx3ZCkkLzsKICAgICAgICAgIHZhciByZUltZ0lkID0gL14oeGR8Z2QpJC87CiAgICAgICAgICB2YXIgcmVJbWdTcmMgPSAvXC9hZHNcL2Jhbm5lci5qcGcvOwogICAgICAgICAgdmFyIHJlSWZyYW1lU3JjID0gLyhcL2FkaGFuZGxlclwvfFwvYWRpbWFnZXNcL3xhZC5odG1sKS87CgogICAgICAgICAgLy8gQ29tbXVucwogICAgICAgICAgaWYgKGluc2VydGVkTm9kZS5pZCAmJgogICAgICAgICAgICByZUltZ0lkLnRlc3QoaW5zZXJ0ZWROb2RlLmlkKSAmJgogICAgICAgICAgICBpbnNlcnRlZE5vZGUubm9kZU5hbWUgPT0gJ0lNRycgJiYKICAgICAgICAgICAgcmVJbWdTcmMudGVzdChpbnNlcnRlZE5vZGUuc3JjKSB8fAogICAgICAgICAgICBpbnNlcnRlZE5vZGUuaWQgJiYKICAgICAgICAgICAgcmVJZnJhbWVJZC50ZXN0KGluc2VydGVkTm9kZS5pZCkgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLm5vZGVOYW1lID09ICdJRlJBTUUnICYmCiAgICAgICAgICAgIHJlSWZyYW1lU3JjLnRlc3QoaW5zZXJ0ZWROb2RlLnNyYykpIHsKCiAgICAgICAgICAgIC8vIFZhcmlhbnQgMQogICAgICAgICAgICBpZiAoaW5zZXJ0ZWROb2RlLmlkID09ICd4ZCcpIHsKICAgICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0FudGlBZGJsb2NrUGFja2VyWmR4ZCcsIGZhbHNlLCBsb2NhdGlvbi5ocmVmKTsKICAgICAgICAgICAgfSAvLyBWYXJpYW50IDIKICAgICAgICAgICAgZWxzZSBpZiAoaW5zZXJ0ZWROb2RlLmlkID09ICdnZCcpIHsKICAgICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0FudGlBZGJsb2NrUGFja2VyV2RnZCcsIGZhbHNlLCBsb2NhdGlvbi5ocmVmKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBSZW1vdmUKICAgICAgICAgICAgLy9BYWsubG9nKGluc2VydGVkTm9kZSk7CiAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KGluc2VydGVkTm9kZSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gQWR1bmJsb2NrIC0gaHR0cDovL2FkdW5ibG9jay5jb20vCiAgICAgICAgICB2YXIgcmVJZCA9IC9eW2Etel17OH0kLzsKICAgICAgICAgIHZhciByZUNsYXNzID0gL15bYS16XXs4fSBbYS16XXs4fS87CiAgICAgICAgICB2YXIgcmVCZyA9IC9eW2Etel17OH0tYmckLzsKICAgICAgICAgIHZhciByZU1lc3NhZ2UgPSAvSWwgc2VtYmxlcmFpdCBxdWUgdm91cyB1dGlsaXNpZXogdW4gYmxvcXVldXIgZGUgcHVibGljaXTDqSAhLzsKCiAgICAgICAgICAvLyBDb21tdW5zCiAgICAgICAgICBpZiAodHlwZW9mIEFhay51dy52dGZhYiAhPSAndW5kZWZpbmVkJyAmJgogICAgICAgICAgICB0eXBlb2YgQWFrLnV3LmFkYmxvY2tfYW50aWIgIT0gJ3VuZGVmaW5lZCcgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLnBhcmVudE5vZGUgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLnBhcmVudE5vZGUubm9kZU5hbWUgPT0gJ0JPRFknICYmCiAgICAgICAgICAgIGluc2VydGVkTm9kZS5pZCAmJgogICAgICAgICAgICByZUlkLnRlc3QoaW5zZXJ0ZWROb2RlLmlkKSAmJgogICAgICAgICAgICBpbnNlcnRlZE5vZGUubm9kZU5hbWUgPT0gJ0RJVicgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLm5leHRTaWJsaW5nICYmCiAgICAgICAgICAgIGluc2VydGVkTm9kZS5uZXh0U2libGluZy5jbGFzc05hbWUgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLm5leHRTaWJsaW5nLm5vZGVOYW1lID09ICdESVYnKSB7CgogICAgICAgICAgICAvLyBGdWxsIFNjcmVlbiBNZXNzYWdlIChQcmVtaXVtKQogICAgICAgICAgICAvLyA8ZGl2IGlkPSJsZnloc3ZkcSIgY2xhc3M9InR2d25vcWRmIHN2b25leHJrIiBzdHlsZT0idG9wOiAxMDBweDsgb3BhY2l0eTogMTsgdmlzaWJpbGl0eTogdmlzaWJsZTsiPgogICAgICAgICAgICAvLyA8ZGl2IGNsYXNzPSJ0dndub3FkZi1iZyIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyI+PC9kaXY+CiAgICAgICAgICAgIGlmIChpbnNlcnRlZE5vZGUuY2xhc3NOYW1lICYmCiAgICAgICAgICAgICAgcmVDbGFzcy50ZXN0KGluc2VydGVkTm9kZS5jbGFzc05hbWUpICYmCiAgICAgICAgICAgICAgcmVCZy50ZXN0KGluc2VydGVkTm9kZS5uZXh0U2libGluZy5jbGFzc05hbWUpICYmCiAgICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLm5leHRTaWJsaW5nLnN0eWxlICYmCiAgICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLm5leHRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgIT0gJ25vbmUnKSB7CgogICAgICAgICAgICAgIC8vIFJlbW92ZSBNZXNzYWdlCiAgICAgICAgICAgICAgQWFrLmRldGVjdGVkKCJBZFVuQmxvY2tQcmVtaXVtIik7CiAgICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoaW5zZXJ0ZWROb2RlLm5leHRTaWJsaW5nKTsgLy8gb3ZlcmxheQogICAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KGluc2VydGVkTm9kZSk7IC8vIGJveAogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIFRvcCBiYXIgTWVzc2FnZSAoRnJlZSkKICAgICAgICAgICAgLy8gPGRpdiBpZD0idml4bWdybHkiPgogICAgICAgICAgICAvLyA8ZGl2IGlkPSJtZm5oYWl5eCIgY2xhc3M9Imxrcm52Ynl0Ij4KICAgICAgICAgICAgZWxzZSBpZiAoaW5zZXJ0ZWROb2RlLm5leHRTaWJsaW5nLmlkICYmCiAgICAgICAgICAgICAgcmVJZC50ZXN0KGluc2VydGVkTm9kZS5uZXh0U2libGluZy5pZCkgJiYKICAgICAgICAgICAgICByZU1lc3NhZ2UudGVzdChpbnNlcnRlZE5vZGUuaW5uZXJIVE1MKSkgewoKICAgICAgICAgICAgICAvLyBSZW1vdmUgTWVzc2FnZQogICAgICAgICAgICAgIEFhay5kZXRlY3RlZCgiQWRVbkJsb2NrRnJlZSIpOwogICAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KGluc2VydGVkTm9kZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBbnRpYmxvY2sgLSBodHRwOi8vYW50aWJsb2NrLm9yZy8KICAgICAgICAgIHZhciByZU1zZ0lkID0gL15bYS16MC05XXs0LDEwfSQvaTsKICAgICAgICAgIHZhciByZVRhZzEgPSAvXihkaXZ8c3BhbnxifGl8Zm9udHxzdHJvbmd8Y2VudGVyKSQvaTsKICAgICAgICAgIHZhciByZVRhZzIgPSAvXihhfGJ8aXxzfHV8cXxwfHN0cm9uZ3xjZW50ZXIpJC9pOwogICAgICAgICAgdmFyIHJlV29yZHMxID0gL2FkIGJsb2NrZXJ8YWQgYmxvY2t8YWQtYmxvY2t8YWRibG9ja2VyfGFkLWJsb2NrZXJ8YWRibG9ja3xibG9xdWV1cnxibG9xdWVhZG9yfFdlcmJlYmxvY2tlcnxhZGJsb2NrZXJ0fCYjMTU3MDsmIzE1ODM7JiMxNTc2OyYjMTYwNDsmIzE2MDg7JiMxNjAzOyAmIzE1NzY7JiMxNjA0OyYjMTU4Nzt80LHQu9C+0LrQuNGA0L7QstGJ0LjQutC+0LwvaTsKICAgICAgICAgIHZhciByZVdvcmRzMiA9IC9rYXBhdHxkaXNhYmxlfGTDqXNhY3RpdmV6fGTDqXNhY3RpdmVyfGRlc2FjdGl2ZXp8ZGVzYWN0aXZlcnxkZXNhdGl2ZXxkZXNhY3RpdmFyfGRlc2FjdGl2ZXxkZXNhY3RpdmF8ZGVha3RpdmllcmV8ZGlzYWJpbGl0YXJlfCYjOTQ1OyYjOTYwOyYjOTQ5OyYjOTU3OyYjOTQ5OyYjOTYxOyYjOTQ3OyYjOTU5OyYjOTYwOyYjOTU5OyYjOTQzOyYjOTUxOyYjOTYzOyYjOTUxO3wmIzEwNzk7JiMxMDcyOyYjMTA4NzsmIzEwODg7JiMxMDc3OyYjMTA5NzsmIzEwNzI7JiMxMDkwOyYjMTEwMDt8w6FsbMOtdHNkIGxlfHB1YmxpY2l0w6lzfNGA0LXQutC70LDQvNC1fHZlcmhpbmRlcnR8YWR2ZXJ0fGthcGF0xLFuxLF6L2k7CgogICAgICAgICAgLy8gQW50aWJsb2NrLm9yZyAoYWxsIHZlcnNpb24pCiAgICAgICAgICBpZiAoaW5zZXJ0ZWROb2RlLnBhcmVudE5vZGUgJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLmlkICYmCiAgICAgICAgICAgIGluc2VydGVkTm9kZS5zdHlsZSAmJgogICAgICAgICAgICBpbnNlcnRlZE5vZGUuY2hpbGROb2Rlcy5sZW5ndGggJiYKICAgICAgICAgICAgaW5zZXJ0ZWROb2RlLmZpcnN0Q2hpbGQgJiYKICAgICAgICAgICAgIWluc2VydGVkTm9kZS5maXJzdENoaWxkLmlkICYmCiAgICAgICAgICAgICFpbnNlcnRlZE5vZGUuZmlyc3RDaGlsZC5jbGFzc05hbWUgJiYKICAgICAgICAgICAgcmVNc2dJZC50ZXN0KGluc2VydGVkTm9kZS5pZCkgJiYKICAgICAgICAgICAgcmVUYWcxLnRlc3QoaW5zZXJ0ZWROb2RlLm5vZGVOYW1lKSAmJgogICAgICAgICAgICByZVRhZzIudGVzdChpbnNlcnRlZE5vZGUuZmlyc3RDaGlsZC5ub2RlTmFtZSkpIHsKICAgICAgICAgICAgLy9BYWsubG9nKGluc2VydGVkTm9kZSk7CgogICAgICAgICAgICAvLyBLaWxsIGF1ZGlvIG1lc3NhZ2UKICAgICAgICAgICAgdmFyIGF1ZGlvID0gaW5zZXJ0ZWROb2RlLnF1ZXJ5U2VsZWN0b3IoImF1ZGlvW2xvb3BdIik7CiAgICAgICAgICAgIGlmIChhdWRpbykgewogICAgICAgICAgICAgIGF1ZGlvLnBhdXNlKCk7CiAgICAgICAgICAgICAgQWFrLmRldGVjdGVkKCdBbnRpYmxvY2t7YXVkaW99Jyk7CiAgICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoYXVkaW8pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEFudGlibG9jay5vcmcgdjIKICAgICAgICAgICAgLy8gZGVtbzogaHR0cDovL3Rpbnl1cmwuY29tL2gzbXd0YTQKICAgICAgICAgICAgZWxzZSBpZiAoKEFhay5hYWJzLmFibzIgJiYgaW5zZXJ0ZWROb2RlLmlkID09IEFhay5hYWJzLmFibzIpIHx8CiAgICAgICAgICAgICAgKGluc2VydGVkTm9kZS5maXJzdENoaWxkLmhhc0NoaWxkTm9kZXMoKSAmJiByZVdvcmRzMS50ZXN0KGluc2VydGVkTm9kZS5maXJzdENoaWxkLmlubmVySFRNTCkgJiYgcmVXb3JkczIudGVzdChpbnNlcnRlZE5vZGUuZmlyc3RDaGlsZC5pbm5lckhUTUwpKSkgewogICAgICAgICAgICAgIEFhay5kZXRlY3RlZCgnQW50aWJsb2NrMntpbnNlcnR9Jyk7CiAgICAgICAgICAgICAgQWFrLnJlbW92ZUVsZW1lbnQoaW5zZXJ0ZWROb2RlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBBbnRpYmxvY2sub3JnIHYzCiAgICAgICAgICAgIC8vIGRlbW86IGh0dHA6Ly90aW55dXJsLmNvbS9xZWNmYTd3CiAgICAgICAgICAgIC8vIGNhc2U6IGh0dHA6Ly90aW55dXJsLmNvbS96YnJscjNhIC8qIGZvcmsgKi8KICAgICAgICAgICAgZWxzZSBpZiAoKEFhay5hYWJzLmFibzMgJiYgaW5zZXJ0ZWROb2RlLmlkID09IEFhay5hYWJzLmFibzMpIHx8CiAgICAgICAgICAgICAgKGluc2VydGVkTm9kZS5maXJzdENoaWxkLmhhc0NoaWxkTm9kZXMoKSAmJiBpbnNlcnRlZE5vZGUuZmlyc3RDaGlsZC5maXJzdENoaWxkLm5vZGVOYW1lID09ICdJTUcnICYmIC9eZGF0YTppbWFnZVwvcG5nO2Jhc2U2NC8udGVzdChpbnNlcnRlZE5vZGUuZmlyc3RDaGlsZC5maXJzdENoaWxkLnNyYykpKSB7CiAgICAgICAgICAgICAgQWFrLnV3W0Fhay5hYWJzLmFibzNdID0gbnVsbDsKICAgICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0FudGlibG9jazN7aW5zZXJ0fScpOwogICAgICAgICAgICAgIEFhay5yZW1vdmVFbGVtZW50KGluc2VydGVkTm9kZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gQmV0dGVyU3RvcEFkYmxvY2sKICAgICAgICAgICAgLy8gZGVtbzogaHR0cDovL3Rpbnl1cmwuY29tL2pzOXphdDQKICAgICAgICAgICAgLy8gc291cmNlOiBodHRwOi8vcGFzdGViaW4uY29tL1lpbWtydEtCCiAgICAgICAgICAgIC8vIGlzc3VlOiBodHRwOi8vdGlueXVybC5jb20vemV0Z2J0eAogICAgICAgICAgICBlbHNlIGlmIChBYWsuYWFicy5ic2EgJiYgaW5zZXJ0ZWROb2RlLmlkID09IEFhay5hYWJzLmJzYSkgewogICAgICAgICAgICAgIEFhay51d1tBYWsuYWFicy5ic2FdID0gbnVsbDsKICAgICAgICAgICAgICBBYWsuZGV0ZWN0ZWQoJ0JldHRlclN0b3BBZGJsb2Nre2luc2VydH0nKTsKICAgICAgICAgICAgICBBYWsucmVtb3ZlRWxlbWVudChpbnNlcnRlZE5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vICBNYW55IGZhbHNlIHBvc2l0aXZlCiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIC8vQWFrLnJlbW92ZUVsZW1lbnQoaW5zZXJ0ZWROb2RlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGJsb2NrRGV0ZWN0IDogZnVuY3Rpb24gKCkgewoKICAgICAgLy8gRXhjbHVkZSBkb21haW5zCiAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xNDY2CiAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy8xMjYzCiAgICAgIC8vIGlzc3VlOiBodHRwczovL2dyZWFzeWZvcmsub3JnL2VuL2ZvcnVtL2Rpc2N1c3Npb24vODQyMi8KICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzk4NgogICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3JlZWsvYW50aS1hZGJsb2NrLWtpbGxlci9pc3N1ZXMvODU3CiAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy82MTcKICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvZnIvZm9ydW0vZGlzY3Vzc2lvbi81NDI2CiAgICAgIC8vIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVlay9hbnRpLWFkYmxvY2sta2lsbGVyL2lzc3Vlcy80MTkKICAgICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWVrL2FudGktYWRibG9jay1raWxsZXIvaXNzdWVzLzM3NwogICAgICB2YXIgZXhjbHVkZXMgPSBbIjM2MC5jbiIsICJhbWF6b24uIiwgImFwcGxlLmNvbSIsICJhc2suY29tIiwgImJhaWR1LmNvbSIsICJiaW5nLmNvbSIsICJidWZmZXJhcHAuY29tIiwgImNoYXRhbmdvLmNvbSIsICJjaHJvbWVhY3Rpb25zLmNvbSIsICJlYXN5aW5wbGF5Lm5ldCIsICJlYmF5LmNvbSIsICJmYWNlYm9vay5jb20iLCAiZmxhdHRyLmNvbSIsICJmbGlja3IuY29tIiwgImdoYWNrcy5uZXQiLCAiZ29vZ2xlLiIsICJpbWRiLmNvbSIsICJpbWdib3guY29tIiwgImltZ3VyLmNvbSIsICJpbnN0YWdyYW0uY29tIiwgImpzYmluLmNvbSIsICJqc2ZpZGRsZS5uZXQiLCAibGlua2VkaW4uY29tIiwgImxpdmUuY29tIiwgIm1haWwucnUiLCAibWljcm9zb2Z0LmNvbSIsICJtc24uY29tIiwgInBheXBhbC5jb20iLCAicGludGVyZXN0LmNvbSIsICJwcmVsb2FkZXJzLm5ldCIsICJxcS5jb20iLCAicmVkZGl0LmNvbSIsICJzdGFja292ZXJmbG93LmNvbSIsICJ0YW1wZXJtb25rZXkubmV0IiwgInR3aXR0ZXIuY29tIiwgInZpbWVvLmNvbSIsICJ3aWtpcGVkaWEub3JnIiwgInczc2Nob29scy5jb20iLCAieWFob28uIiwgInlhbmRleC5ydSIsICJ5b3V0dS5iZSIsICJ5b3V0dWJlLmNvbSIsICJ4ZW12dHYubmV0IiwgInZvZC5wbCIsICJhZ2FyLmlvIiwgInBhbmRvb24uaW5mbyIsICJmc2Yub3JnIiwgImFkYmxvY2twbHVzLm9yZyIsICJwbG5rci5jbyIsICJleGFjdHRhcmdldC5jb20iLCAiZG9sbGRpdmluZS5jb20iLCAicG9wbWVjaC5ydSIsICJjYWxtLmNvbSJdOwogICAgICB2YXIgaG9zdCA9IGxvY2F0aW9uLmhvc3Q7CiAgICAgIHZhciBleGNsdWRlZCA9IGZhbHNlOwogICAgICBleGNsdWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChleGNsdWRlKSB7CiAgICAgICAgaWYgKG5ldyBSZWdFeHAoZXhjbHVkZSkudGVzdChob3N0KSkgewogICAgICAgICAgZXhjbHVkZWQgPSB0cnVlOwogICAgICAgICAgaWYgKEFhay5vcHRzLmxvZ0V4Y2x1ZGVkKSB7CiAgICAgICAgICAgIEFhay53YXJuKCdFeGNsdWRlZCcpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICAvLyBJbmNsdWRlIGRvbWFpbnMKICAgICAgLy8gSXNFdmVudHVwcG9ydGVkOiBodHRwOi8vdGlueXVybC5jb20vb2VlejhjNwogICAgICBpZiAoIWV4Y2x1ZGVkKSB7CgogICAgICAgIHZhciBoYW5kbGVyRXZlbnRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHJ1bGUgPSBBYWsucnVsZXNbbmFtZV07CgogICAgICAgICAgcnVsZS5ob3N0LmZvckVhY2goZnVuY3Rpb24gKGhvc3QpIHsKICAgICAgICAgICAgLy8gQ2hlY2sgaG9zdAogICAgICAgICAgICBpZiAobmV3IFJlZ0V4cChob3N0KS50ZXN0KGxvY2F0aW9uLmhvc3QpKSB7CgogICAgICAgICAgICAgIC8vIE5hdGl2ZSBtb2RlCiAgICAgICAgICAgICAgaWYgKCFBYWsudXNlR00gJiYgQWFrLmlzVG9wZnJhbWUpIHsKICAgICAgICAgICAgICAgIEFhay53YXJuKCdSdW4gbmF0aXZlbHkuJyk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvLyBMb2cgcnVsZSB1c2VkCiAgICAgICAgICAgICAgaWYgKHJ1bGUuaG9zdFswXSAhPSAnLio/JykgewogICAgICAgICAgICAgICAgQWFrLmRldGVjdGVkKCdydWxlJywgcnVsZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIAogICAgICAgICAgICAgIC8vIEJlZm9yZSBET00gbG9hZAogICAgICAgICAgICAgIGlmIChydWxlLm9uU3RhcnQpIHsKICAgICAgICAgICAgICAgIHJ1bGUub25TdGFydCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyBPbiBhbGwgc3RhdGVtZW50cwogICAgICAgICAgICAgIGlmIChydWxlLm9uQWx3YXlzKSB7CiAgICAgICAgICAgICAgICBydWxlLm9uQWx3YXlzKCk7IC8vIHN0YXJ0CiAgICAgICAgICAgICAgICBBYWsub25FdmVudCh3aW5kb3csICdET01Db250ZW50TG9hZGVkJywgcnVsZS5vbkFsd2F5cyk7IC8vIGlkbGUKICAgICAgICAgICAgICAgIEFhay5vbkV2ZW50KHdpbmRvdywgJ2xvYWQnLCBydWxlLm9uQWx3YXlzKTsgLy8gZW5kCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8vIEJlZm9yZSBTY3JpcHQgRXhlY3V0ZWQKICAgICAgICAgICAgICBpZiAocnVsZS5vbkJlZm9yZVNjcmlwdCkgewoKICAgICAgICAgICAgICAgIC8vIG9wdGlvbnM6IGNvbnRhaW5zLCBzZWFyY2gsIHJlcGxhY2UsIG92ZXJyaWRlLCByZW1vdmUsIGV4dGVybmFsCiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uc0JlZm9yZVNjcmlwdCA9IHJ1bGUub25CZWZvcmVTY3JpcHQoKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc0JlZm9yZVNjcmlwdCA9PSAib2JqZWN0IikgewoKICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJCZWZvcmVTY3JpcHQgPSBmdW5jdGlvbiAoZSwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgICAgIHZhciBpc0V2ZW50ID0gZSBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudDsKICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1NjcmlwdCA9IChlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQpIHx8IGU7CgogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobykgeyAvLyBoYXNBdHRyaWJ1dGUKICAgICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSBvLmV4dGVybmFsID8gJ3NyYycgOiAnaW5uZXJIVE1MJzsKICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2ggPSBuZXcgUmVnRXhwKG8uY29udGFpbnMsIG8uZmxhZ3MgfHwgJycpOwoKICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2NyaXB0W3NyY10gJiYgdGhpc1NjcmlwdFtzcmNdLmxlbmd0aCAmJiBzZWFyY2gudGVzdCh0aGlzU2NyaXB0W3NyY10pKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIHNjcmlwdCBleGVjdXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBzY3JpcHQKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXNTY3JpcHQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1NjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBhIHBhcnQgb2YgdGhlIHNjcmlwdAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5yZXBsYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0W3NyY10gPSB0aGlzU2NyaXB0W3NyY10ucmVwbGFjZShzZWFyY2gsIG8ucmVwbGFjZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdTY3JpcHQsIHRoaXNTY3JpcHQpOwogICAgICAgICAgICAgICAgICAgICAgICB9IC8vIE92ZXJyaWRlIHNjcmlwdAogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvLm92ZXJyaWRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0W3NyY10gPSBvLm92ZXJyaWRlOwogICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3U2NyaXB0LCB0aGlzU2NyaXB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyBSZW1vdmUgc2NyaXB0CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG8ucmVtb3ZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXNTY3JpcHQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5kZXRlY3RlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIEFhay5kZXRlY3RlZChvLmRldGVjdGVkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQkJCQkJCQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFhay5vcHRzLmxvZ0ludGVyY2VwdGVkU2NyaXB0cykgewogICAgICAgICAgICAgICAgICAgICAgICAgIEFhay5sb2coc3JjLCBvLCB0aGlzU2NyaXB0LCBuZXdTY3JpcHQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAvLyBCcm93c2VyIHN1cHBvcnRpbmcgZXZlbnQgYmVmb3Jlc2NyaXB0ZXhlY3V0ZQogICAgICAgICAgICAgICAgICBpZiAoJ29uYmVmb3Jlc2NyaXB0ZXhlY3V0ZScgaW4gZG9jdW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICBBYWsub25FdmVudCh3aW5kb3csICdiZWZvcmVzY3JpcHRleGVjdXRlJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJCZWZvcmVTY3JpcHQoZSwgb3B0aW9uc0JlZm9yZVNjcmlwdCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIEJyb3dzZXIgbm90IHN1cHBvdGluZyBiZWZvcmVzY3JpcHRleGVjdXRlCgogICAgICAgICAgICAgICAgICAgIHZhciBsb2FkRG9jdW1lbnQgPSBmdW5jdGlvbiAob3B0aW9uc0JlZm9yZVNjcmlwdCkgewogICAgICAgICAgICAgICAgICAgICAgLy9pZiAoZG9jdW1lbnQucmVmZXJyZXIgPT09ICcnKQogICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm47CgogICAgICAgICAgICAgICAgICAgICAgQWFrLndhcm4oJ29uYmVmb3Jlc2NyaXB0LWNvbXBhdGlibGUnKTsKCiAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgIEFhay5hZGRTY3JpcHQoJ3dpbmRvdy5zdG9wKCk7Jyk7IC8vIGNocm9tZS9vcGVyYQogICAgICAgICAgICAgICAgICAgICAgLy9BYWsuYWRkU2NyaXB0KCdkb2N1bWVudC5vcGVuKCk7Jyk7IC8vIGZpcmVmb3gKCiAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgY29udGVudAogICAgICAgICAgICAgICAgICAgICAgQWFrLnJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgOiBsb2NhdGlvbi5ocmVmLAogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzIDogewogICAgICAgICAgICAgICAgICAgICAgICAgICJSZWZlcmVyIiA6IGRvY3VtZW50LnJlZmVycmVyCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIG9ubG9hZCA6IGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHJlc3VsdC5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbCwgInRleHQvaHRtbCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JpcHRzID0gZG9jLnNjcmlwdHM7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTY3JpcHQgPSBzY3JpcHRzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlckJlZm9yZVNjcmlwdCh0aGlzU2NyaXB0LCBvcHRpb25zQmVmb3JlU2NyaXB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXcml0ZSBuZXcgY29udGVudCB0byBIVE1MIGRvY3VtZW50OgogICAgICAgICAgICAgICAgICAgICAgICAgIEFhay5hZGRTY3JpcHQoJ2RvY3VtZW50Lm9wZW4oKTsgZG9jdW1lbnQud3JpdGUodW5lc2NhcGUoIicgKyB3aW5kb3cuZXNjYXBlKGh0bWwpICsgJyIpKTsgZG9jdW1lbnQuY2xvc2UoKTsnKTsgLy8gY2hyb21lL29wZXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9BYWsuYWRkU2NyaXB0KCdkb2N1bWVudC53cml0ZSh1bmVzY2FwZSgiJyArIGVzY2FwZShodG1sKSArICciKSk7IGRvY3VtZW50LmNsb3NlKCk7Jyk7IC8vIGZpcmVmb3gKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBsb2FkRG9jdW1lbnQob3B0aW9uc0JlZm9yZVNjcmlwdCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IC8vIEFmdGVyIFNjcmlwdCBFeGVjdXRlZAogICAgICAgICAgICAgIGlmIChydWxlLm9uQWZ0ZXJTY3JpcHQpIHsKICAgICAgICAgICAgICAgIGlmICgnb25hZnRlcnNjcmlwdGV4ZWN1dGUnIGluIGRvY3VtZW50KSB7IC8vIE1vemlsbGEgRmlyZWZveAogICAgICAgICAgICAgICAgICBBYWsub25FdmVudCh3aW5kb3csICdhZnRlcnNjcmlwdGV4ZWN1dGUnLCBydWxlLm9uQWZ0ZXJTY3JpcHQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyBXaGVuIERPTSBMb2FkCiAgICAgICAgICAgICAgaWYgKHJ1bGUub25JZGxlKSB7CiAgICAgICAgICAgICAgICBpZiAoIUFhay51c2VHTSkgeyAvLyBOYXRpdmUgbW9kZQogICAgICAgICAgICAgICAgICBydWxlLm9uSWRsZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgLy9BYWsub25FdmVudCh3aW5kb3csICdET01Db250ZW50TG9hZGVkJywgcnVsZS5vbklkbGUpOwogICAgICAgICAgICAgICAgICBBYWsub25FdmVudCh3aW5kb3csICdET01Db250ZW50TG9hZGVkJywgcnVsZS5vbklkbGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyBXaGVuIFdpbmRvdyBMb2FkCiAgICAgICAgICAgICAgaWYgKHJ1bGUub25FbmQpIHsKICAgICAgICAgICAgICAgIGlmICghQWFrLnVzZUdNKSB7IC8vIE5hdGl2ZSBtb2RlCiAgICAgICAgICAgICAgICAgIHJ1bGUub25FbmQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIEFhay5vbkV2ZW50KHdpbmRvdywgJ2xvYWQnLCBydWxlLm9uRW5kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gV2hlbiBET00gQXR0ck1vZGlmaWVkCiAgICAgICAgICAgICAgaWYgKHJ1bGUub25BdHRyTW9kaWZpZWQpIHsKICAgICAgICAgICAgICAgIEFhay5vbkV2ZW50KHdpbmRvdywgJ0RPTUF0dHJNb2RpZmllZCcsIHJ1bGUub25BdHRyTW9kaWZpZWQsIGZhbHNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gV2hlbiBET00gU3VidHJlZU1vZGlmaWVkCiAgICAgICAgICAgICAgaWYgKHJ1bGUub25TdWJ0cmVlTW9kaWZpZWQpIHsKICAgICAgICAgICAgICAgIEFhay5vbkV2ZW50KHdpbmRvdywgJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHJ1bGUub25TdWJ0cmVlTW9kaWZpZWQsIGZhbHNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gV2hlbiBET00gRWxlbWVudHMgYXJlIEluc2VydGVkIGluIERvY3VtZW50CiAgICAgICAgICAgICAgaWYgKHJ1bGUub25JbnNlcnQpIHsKCiAgICAgICAgICAgICAgICAvLyBNdXRhdGlvbiBPYnNlcnZlcgogICAgICAgICAgICAgICAgLy8gZG9jOiBodHRwOi8vdGlueXVybC5jb20vbXh4emVlNAogICAgICAgICAgICAgICAgLy8gc3VwcG9ydDogaHR0cDovL3Rpbnl1cmwuY29tL25lcG43dnkKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgIT0gJ3VuZGVmaW5lZCcgfHwKICAgICAgICAgICAgICAgICAgdHlwZW9mIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgIT0gJ3VuZGVmaW5lZCcpIHsKCiAgICAgICAgICAgICAgICAgIC8vIE11dGF0aW9uIE9ic2VydmVyCiAgICAgICAgICAgICAgICAgIHZhciBNdXRhdGlvbk9ic2VydmVyMSA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyOwoKICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlCiAgICAgICAgICAgICAgICAgIHZhciBvYnMxID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIxKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbiBzYWZlbHkgdXNlIGBmb3JFYWNoYCBiZWNhdXNlIHdlIGFscmVhZHkgdXNlIG11dGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAvLyBvYnNlcnZlcnMgdGhhdCBhcmUgbW9yZSByZWNlbnQgdGhhbiBgZm9yRWFjaGAuIChzb3VyY2U6IE1ETikKICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3YW50IG9ubHkgYWRkZWQgbm9kZXMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtdXRhdGlvbi5hZGRlZE5vZGVzLCBmdW5jdGlvbiAoYWRkZWROb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQWFrLm9wdHMubG9nSW5zZXJ0ZWROb2RlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBYWsubG9nKGFkZGVkTm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLm9uSW5zZXJ0KGFkZGVkTm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAvLyBPYnNlcnZlcgogICAgICAgICAgICAgICAgICBvYnMxLm9ic2VydmUoZG9jdW1lbnQsIHsKICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3QgOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHN1YnRyZWUgOiB0cnVlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gTXV0YXRpb24gRXZlbnRzIChBbHRlcm5hdGl2ZSBTb2x1dGlvbikKICAgICAgICAgICAgICAgIC8vIGRvYzogaHR0cDovL3Rpbnl1cmwuY29tL29wOTVyZnkKICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICBBYWsub25FdmVudCh3aW5kb3csICJET01Ob2RlSW5zZXJ0ZWQiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChBYWsub3B0cy5sb2dJbnNlcnRlZE5vZGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICBBYWsubG9nKGUudGFyZ2V0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcnVsZS5vbkluc2VydChlLnRhcmdldCk7CiAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8gV2hlbiBET00gRWxlbWVudHMgYXJlIFJlbW92ZWQgaW4gRG9jdW1lbnQKICAgICAgICAgICAgICBpZiAocnVsZS5vblJlbW92ZSkgewoKICAgICAgICAgICAgICAgIC8vIE11dGF0aW9uIE9ic2VydmVyCiAgICAgICAgICAgICAgICAvLyBkb2M6IGh0dHA6Ly90aW55dXJsLmNvbS9teHh6ZWU0CiAgICAgICAgICAgICAgICAvLyBzdXBwb3J0OiBodHRwOi8vdGlueXVybC5jb20vbmVwbjd2eQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciAhPSAndW5kZWZpbmVkJyB8fAogICAgICAgICAgICAgICAgICB0eXBlb2YgV2ViS2l0TXV0YXRpb25PYnNlcnZlciAhPSAndW5kZWZpbmVkJykgewoKICAgICAgICAgICAgICAgICAgLy8gTXV0YXRpb24gT2JzZXJ2ZXIKICAgICAgICAgICAgICAgICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7CgogICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UKICAgICAgICAgICAgICAgICAgdmFyIG9iczIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcjIoZnVuY3Rpb24gKG11dGF0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIHNhZmVseSB1c2UgYGZvckVhY2hgIGJlY2F1c2Ugd2UgYWxyZWFkeSB1c2UgbXV0YXRpb24KICAgICAgICAgICAgICAgICAgICAgIC8vIG9ic2VydmVycyB0aGF0IGFyZSBtb3JlIHJlY2VudCB0aGFuIGBmb3JFYWNoYC4gKHNvdXJjZTogTUROKQogICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHdhbnQgb25seSByZW1vdmVkIG5vZGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtdXRhdGlvbi5yZW1vdmVkTm9kZXMsIGZ1bmN0aW9uIChyZW1vdmVkTm9kZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFhay5vcHRzLmxvZ1JlbW92ZWROb2RlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBYWsubG9nKHJlbW92ZWROb2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUub25SZW1vdmUocmVtb3ZlZE5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgLy8gT2JzZXJ2ZXIKICAgICAgICAgICAgICAgICAgb2JzMi5vYnNlcnZlKGRvY3VtZW50LCB7CiAgICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0IDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBzdWJ0cmVlIDogdHJ1ZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIE11dGF0aW9uIEV2ZW50cyAoQWx0ZXJuYXRpdmUgU29sdXRpb24pCiAgICAgICAgICAgICAgICAvLyBkb2M6IGh0dHA6Ly90aW55dXJsLmNvbS9vcDk1cmZ5CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgQWFrLm9uRXZlbnQod2luZG93LCAiRE9NTm9kZVJlbW92ZWQiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChBYWsub3B0cy5sb2dSZW1vdmVkTm9kZXMpIHsKICAgICAgICAgICAgICAgICAgICAgIEFhay5sb2coZS50YXJnZXQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBydWxlLm9uUmVtb3ZlKGUudGFyZ2V0KTsKICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAvLyBBYWsgRXZlbnRzCiAgICAgICAgICAgICAgQWFrLm9uRXZlbnQod2luZG93LCAnZGV0ZWN0ZWQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgQWFrLmluZm8oWydBbnRpQWRiS2lsbGVyJywgQWFrLmlzVG9wZnJhbWUgPyAndG9wZnJhbWUnIDogJ3N1YmZyYW1lJywgbG9jYXRpb24uaG9zdCwgZS5kZXRhaWxdKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gQXBwbHkgcnVsZXMKICAgICAgICBmb3IgKHZhciBuYW1lIGluIEFhay5ydWxlcykgewogICAgICAgICAgaWYgKEFhay5ydWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICBoYW5kbGVyRXZlbnRzKEFhaywgbmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgQWFrLmluaXRpYWxpemUoKTsKCn0pKHdpbmRvdyk7"},{"name":"Enable Right Click | Reek","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http*://*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1540408179622,"data":{}},"enabled":true,"position":4,"uuid":"2b41a01a-aaa4-4e71-9403-3f2276bc17f7","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgRW5hYmxlIFJpZ2h0IENsaWNrIHwgUmVlawovLyBAbmFtZXNwYWNlIE84TU1sc0ZaNGFvT2RjakIKLy8gQGRlc2NyaXB0aW9uIEVuYWJsZSByaWdodCBjbGljayBvbiB3ZWJzaXRlcyBoYXZpbmcgZGlzYWJsZWQKLy8gQHZlcnNpb24gMS4wCi8vIEBsaWNlbnNlIENyZWF0aXZlIENvbW1vbnMgQlktTkMtU0EKLy8gQGVuY29kaW5nIHV0Zi04Ci8vIEBpY29uIGh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9hZmI4Mzc2YTlmNjM0Y2QzNTAxYWY0Mzg3ZGU2NDI1Zi5wbmcKLy8gQGluY2x1ZGUgaHR0cCo6Ly8qCi8vID09L1VzZXJTY3JpcHQ9PQoKICAvLyBFbmFibGUgcmlnaHQgY2xpY2sKICB1bnNhZmVXaW5kb3cuZG9jdW1lbnQub25jb250ZXh0bWVudSA9IG51bGw7"},{"name":"Remove Youtube Ads","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*youtube.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1540408179623,"data":{}},"enabled":true,"position":5,"uuid":"334b2eaf-79e1-40f1-bf60-09834b6f2213","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFJlbW92ZSBZb3V0dWJlIEFkcwovLyBAbmFtZXNwYWNlICAgUFhnYW1lcgovLyBAZGVzY3JpcHRpb24gUmVtb3ZlIGFkcwovLyBAaW5jbHVkZSAgICAgKnlvdXR1YmUuY29tLyoKLy8gQHZlcnNpb24gICAgIDEKLy8gQGdyYW50ICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09Cgpkb2N1bWVudC5jb29raWU9IlZJU0lUT1JfSU5GTzFfTElWRT1vS2NrVlNxdmFHdzsgcGF0aD0vOyBkb21haW49LnlvdXR1YmUuY29tIjs="},{"name":"Hide ads on Facebook","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://tasks.libertagia.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":["libertagia.com"]}},"storage":{"ts":1540408179623,"data":{}},"enabled":true,"position":6,"uuid":"8e32de25-25cd-419a-9b44-583b146c38b4","source":""},{"name":"Remove Tumblr ads","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://www.tumblr.com/dashboard*","https://www.tumblr.com/dashboard*","http://www.tumblr.com/reblog*","https://www.tumblr.com/reblog*","http://www.tumblr.com/search*","https://www.tumblr.com/search*","http://www.tumblr.com/explore*","https://www.tumblr.com/explore*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1540408179624,"data":{}},"enabled":true,"position":7,"uuid":"d99065c1-4904-4f3d-a3cd-384ed02bdafe","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgUmVtb3ZlIFR1bWJsciBhZHMKLy8gQG5hbWVzcGFjZSAgICAgaHR0cDovL3VzZXJzdHlsZXMub3JnCi8vIEBkZXNjcmlwdGlvbgkgIDxiPlRoaXMgdXNlciBzdHlsZSBpcyBubyBsb25nZXIgYmVpbmcgdXBkYXRlZCBhbmQgbWF5IG9yIG1heSBub3Qgd29yay48L2I+Ci8vIEBhdXRob3IgICAgICAgIGNpY2VyYWtlcwovLyBAaG9tZXBhZ2UgICAgICBodHRwczovL3VzZXJzdHlsZXMub3JnL3N0eWxlcy8xMTI3NzcKLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL3d3dy50dW1ibHIuY29tL2Rhc2hib2FyZCoKLy8gQGluY2x1ZGUgICAgICAgaHR0cHM6Ly93d3cudHVtYmxyLmNvbS9kYXNoYm9hcmQqCi8vIEBpbmNsdWRlICAgICAgIGh0dHA6Ly93d3cudHVtYmxyLmNvbS9yZWJsb2cqCi8vIEBpbmNsdWRlICAgICAgIGh0dHBzOi8vd3d3LnR1bWJsci5jb20vcmVibG9nKgovLyBAaW5jbHVkZSAgICAgICBodHRwOi8vd3d3LnR1bWJsci5jb20vc2VhcmNoKgovLyBAaW5jbHVkZSAgICAgICBodHRwczovL3d3dy50dW1ibHIuY29tL3NlYXJjaCoKLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL3d3dy50dW1ibHIuY29tL2V4cGxvcmUqCi8vIEBpbmNsdWRlICAgICAgIGh0dHBzOi8vd3d3LnR1bWJsci5jb20vZXhwbG9yZSoKLy8gQHJ1bi1hdCAgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQHZlcnNpb24gICAgICAgMC4yMDE3MDcyNzEwMzA0OQovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKCkge3ZhciBjc3MgPSBbCgkiLnN0cmV0Y2h5X2tpZHMgeyIsCgkiCWRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsiLAoJIn0iLAoJIiIsCgkiLm5vdGlmaWNhdGlvbi5zaW5nbGVfbm90aWZpY2F0aW9uLmFsdC50YWtlb3Zlci1jb250YWluZXIubWJfdHJhY2tlZCB7IiwKCSIgICAgZGlzcGxheTpub25lICFpbXBvcnRhbnQ7IiwKCSJ9IiwKCSIiLAoJIi55YW1wbHVzLXVuaXQtY29udGFpbmVyIHsiLAoJIglkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IiwKCSJ9IiwKCSIiLAoJIi5zcG9uc29yZWRfcG9zdCB7IiwKCSIJZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyIsCgkifSIsCgkiIiwKCSIucmVtbmFudC11bml0LWNvbnRhaW5lciB7IiwKCSIJZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyIsCgkifSIsCgkiIiwKCSIucmVtbmFudF9hZCB7IiwKCSIJZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyIsCgkifSIsCgkiIiwKCSIudGFrZW92ZXItY29udGFpbmVyIC5zcG9uc29yZWQtZGF5LW1lZGlhLXNlY3Rpb24geyIsCgkiCWRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsiLAoJIn0iLAoJIiIsCgkiLmltYWdlLWFkIHsiLAoJIglkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IiwKCSJ9IiwKCSIiLAoJIi5kaXNwbGF5LWFkLS15YWhvby5zZWFyY2gtdGV4dC1hZC5wdC5wb3N0X2JyaWNrIHsiLAoJIglkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IiwKCSJ9IiwKCSIiLAoJIiNwb3N0cy5wb3N0cz5saS5ub3RpZmljYXRpb24uc2luZ2xlX25vdGlmaWNhdGlvbi5hbHQudGFrZW92ZXItY29udGFpbmVyLmJpZy1tYXJnaW4geyIsCgkiCW1hcmdpbjogMHB4OyIsCgkifSIsCgkiIiwKCSIuc2lkZWJhci1hZC1jb250YWluZXIgeyIsCgkiCWRpc3BsYXk6IG5vbmU7IiwKCSJ9IiwKCSIiLAoJIi5kZnAtYWQtY29udGFpbmVyIHsiLAoJIglkaXNwbGF5OiBub25lOyIsCgkifSIsCgkiIiwKCSIvKiBWaWRlbyBBZHMgSGlkZGVuICovIiwKCSIiLAoJIi52aWRlby1hZCBzcGFuLCAudmlkZW8tYWQgLmNvbnRlbnQsIC52aWRlby1hZCAuaGVhZGVyLCAudmlkZW8tYWQgLnBvc3RfZm9vdGVyLmNsZWFyZml4LCAudmlkZW8tYWQgYXJ0aWNsZSB7IiwKCSIJZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyIsCgkifSIsCgkiIiwKCSIudmlkZW8tYWQgZGl2LCAudmlkZW8tYWQgeyIsCgkiCXdpZHRoOiAxcHggIWltcG9ydGFudDsiLAoJIgloZWlnaHQ6IDBweCAhaW1wb3J0YW50OyIsCgkifSIKXS5qb2luKCJcbiIpOwppZiAodHlwZW9mIEdNX2FkZFN0eWxlICE9ICJ1bmRlZmluZWQiKSB7CglHTV9hZGRTdHlsZShjc3MpOwp9IGVsc2UgaWYgKHR5cGVvZiBQUk9fYWRkU3R5bGUgIT0gInVuZGVmaW5lZCIpIHsKCVBST19hZGRTdHlsZShjc3MpOwp9IGVsc2UgaWYgKHR5cGVvZiBhZGRTdHlsZSAhPSAidW5kZWZpbmVkIikgewoJYWRkU3R5bGUoY3NzKTsKfSBlbHNlIHsKCXZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKCW5vZGUudHlwZSA9ICJ0ZXh0L2NzcyI7Cglub2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpOwoJdmFyIGhlYWRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKTsKCWlmIChoZWFkcy5sZW5ndGggPiAwKSB7CgkJaGVhZHNbMF0uYXBwZW5kQ2hpbGQobm9kZSk7Cgl9IGVsc2UgewoJCS8vIG5vIGhlYWQgeWV0LCBzdGljayBpdCB3aGVyZWV2ZXIKCQlkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSk7Cgl9Cn0KfSkoKTsK"},{"name":"Direct links out","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*://google.*","*://www.google.*","*://encrypted.google.*"],"merge_includes":true,"use_matches":[],"orig_matches":["*://yandex.ru/*","*://yandex.ua/*","*://yandex.by/*","*://yandex.kz/*","*://yandex.com.tr/*","*://yandex.com/*","*://*.yandex.ru/*","*://*.yandex.ua/*","*://*.yandex.by/*","*://*.yandex.kz/*","*://*.yandex.com.tr/*","*://*.yandex.com/*","*://youtube.com/*","*://*.youtube.com/*","*://wikimapia.org/*","*://deviantart.com/*","*://*.deviantart.com/*","*://joyreactor.cc/*","*://*.joyreactor.cc/*","*://reactor.cc/*","*://*.reactor.cc/*","*://joyreactor.com/*","*://*.joyreactor.com/*","*://vk.com/*","*://*.vk.com/*","*://ok.ru/*","*://*.ok.ru/*","*://steamcommunity.com/*","*://*.steamcommunity.com/*","*://facebook.com/*","*://*.facebook.com/*","*://twitter.com/*","*://*.twitter.com/*","*://4pda.ru/*","*://*.4pda.ru/*","*://kat.cr/*","*://kickassto.co/*","*://katproxy.is/*","*://thekat.tv/*","*://*.kat.cr/*","*://*.kickassto.co/*","*://*.katproxy.is/*","*://*.thekat.tv/*","*://addons.mozilla.org/*","*://pixiv.net/*","*://*.pixiv.net/*","*://tumblr.com/*","*://*.tumblr.com/*","*://danieldefo.ru/*","*://*.danieldefo.ru/*","*://yaplakal.com/*","*://*.yaplakal.com/*","*://soundcloud.com/*","*://*.soundcloud.com/*","*://upwork.com/*","*://*.upwork.com/*","*://picarto.tv/*","*://*.picarto.tv/*","*://taker.im/*","*://*.taker.im/*","*://*.forumavia.ru/*","*://*.slack.com/*","*://instagram.com/*","*://*.instagram.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1540408179633,"data":{}},"enabled":true,"position":8,"file_url":"https://openuserjs.org/install/nokeya/Direct_links_out.user.js","uuid":"124e9ac6-77a1-4d2d-ba40-281d2181b423","source":""},{"name":"Pinterest without registration","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://*.pinterest.com/*","https://*.pinterest.com/*","https://*.pinterest.*/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1540408179643,"data":{}},"enabled":true,"position":9,"uuid":"d117d6bf-9a3f-4ebd-bee2-5b47a44d3c98","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFBpbnRlcmVzdCB3aXRob3V0IHJlZ2lzdHJhdGlvbgovLyBAbmFtZXNwYWNlICAgaHR0cDovL2FuZHJlYWxhenphcm90dG8uY29tLwovLyBAdmVyc2lvbiAgICAgMi4yCi8vIEBkZXNjcmlwdGlvbiBBbGxvd3MgdG8gYnJvd3NlIFBpbnRlcmVzdCB3aXRob3V0IGxvZ2luL3JlZ2lzdHJhdGlvbiwgcmVtb3ZpbmcgdGhlIG9mZmVuZGluZyBtb2RhbCBwb3B1cAovLyBAaW5jbHVkZSAgICAgaHR0cDovLyoucGludGVyZXN0LmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwczovLyoucGludGVyZXN0LmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwczovLyoucGludGVyZXN0LiovKgovLyBAY29weXJpZ2h0ICAgMjAxNCssIEFuZHJlYSBMYXp6YXJvdHRvCi8vIEByZXF1aXJlICAgICBodHRwOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS1sYXRlc3QubWluLmpzCi8vIEBsaWNlbnNlICAgICBHUEwgdmVyc2lvbiAzIG9yIGFueSBsYXRlciB2ZXJzaW9uOyBodHRwOi8vd3d3LmdudS5vcmcvY29weWxlZnQvZ3BsLmh0bWwKLy8gQGdyYW50ICAgICAgIEdNX2FkZFN0eWxlCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVmVyeSBodW1ibGUgcXVlcnkgc3RyaW5nIGV4dHJhY3RvcgpmdW5jdGlvbiBzZWFyY2hQYXJhbWV0ZXIoKSB7CiAgICBpZiAobG9jYXRpb24uaHJlZi5pbmRleE9mKCdxPScpID4gLTEpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gbG9jYXRpb24uaHJlZi5zcGxpdCgncT0nKVsxXS5zcGxpdCgnJicpWzBdOwogICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0LnJlcGxhY2UoL1wrL2csICcgJykpOwogICAgfQogICAgcmV0dXJuOwp9CgokKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CglpZihsb2NhdGlvbi5wYXRobmFtZSA9PSAiLyIpCgkJbG9jYXRpb24uaHJlZiA9ICJodHRwczovL3d3dy5waW50ZXJlc3QuY29tL2NhdGVnb3JpZXMiOwoKCUdNX2FkZFN0eWxlKCIuVW5hdXRoQmFubmVyLCBib2R5ID4gLk1vZGFsLCAuTW9kYWxNYW5hZ2VyID4gLk1vZGFsLCAuQ2xvc2V1cF9fd3JhcHBlciA+IGRpdltzdHlsZSo9J2ZpeGVkJ10geyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0gIiArCgkJIi5ub1Njcm9sbCB7IG92ZXJmbG93OiBhdXRvICFpbXBvcnRhbnQ7IH0gIiArCgkJImRpdltzdHlsZSo9J2N1YmljLWJlemllciddLCBkaXZbc3R5bGUqPSdmaXhlZCddPmRpdltzdHlsZSo9J29wYWNpdHk6IDAuNSddLCBkaXZbc3R5bGUqPSdiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNik7J10sIC5GdWxsUGFnZU1vZGFsX19zY3JvbGxlciB7IGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfSAiICsKCQkiZGl2LmdyaWRDb250YWluZXIgPiBkaXYsIC5HcmlkIHsgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7IH0iKTsKICAgIEdNX2FkZFN0eWxlKCIuSGVhZGVyIHsgd2lkdGg6IDEwMCU7IH0iKTsKCUdNX2FkZFN0eWxlKCIjZGVza3RvcFdyYXBwZXIgeyBwb3NpdGlvbjogaW5oZXJpdCAhaW1wb3J0YW50fSIgKwogICAgICAgICcuRGVuemVsUmVhY3RCcmlkZ2UgPiBkaXYgPiBkaXZbc3R5bGUqPSJvcGFjaXR5OiAxIl0ge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDt9Jyk7CgoJJCgiYm9keSIpLnJlbW92ZUNsYXNzKCJub1RvdWNoIikuY3NzKCdoZWlnaHQnLCAnYXV0bycpOwoJJCgnZGl2W2RhdGEtcmVhY3RpZF1bc3R5bGUqPWZpeGVkXScpLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTsKCSQoIiNkZXNrdG9wV3JhcHBlciArICogKyBkaXYiKS5yZW1vdmUoKTsKCiAgICAvLyBGaXggbGlua3MKICAgICQoJy5Hcm93dGhVbmF1dGhQaW5JbWFnZSA+IGFbaHJlZl0nKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBsaW5rID0gJCh0aGlzKTsKICAgICAgICBsaW5rLnBhcmVudCgpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gbGluay5hdHRyKCdocmVmJyk7CiAgICAgICAgfSk7CiAgICB9KTsKCiAgICAvLyBBZGQgc2ltcGxlIHNlYXJjaCBmb3JtCiAgICB2YXIgc2VhcmNoRm9ybSA9ICQoIjxmb3JtIG5hbWU9J3NlYXJjaCcgYWN0aW9uPScvc2VhcmNoL3BpbnMvJz4iICsKICAgICAgICAgICAgICAgICAgICAgICAiPGlucHV0IHR5cGU9J3RleHQnIG5hbWU9J3EnIC8+IiArCiAgICAgICAgICAgICAgICAgICAgICAgIjxidXR0b24gdHlwZT0nc3VibWl0Jz4iICsKICAgICAgICAgICAgICAgICAgICAgICAiPGltZyBzdHlsZT0nd2lkdGg6IDI0cHg7IG1hcmdpbi10b3A6IC00cHgnIHNyYz0naHR0cHM6Ly9pLmltZ3VyLmNvbS9ON1hZMWd6LnBuZyc+IiArCiAgICAgICAgICAgICAgICAgICAgICAgIjwvYnV0dG9uPjwvZm9ybT4iKTsKICAgIHNlYXJjaEZvcm0uY3NzKCdtYXJnaW4tcmlnaHQnLCAnNGVtJykuZmluZCgnaW5wdXQsIGJ1dHRvbicpLmNzcyh7CiAgICAgICAgJ2hlaWdodCc6ICc0MHB4JywKICAgICAgICAnbGluZS1oZWlnaHQnOiAnMzZweCcsCiAgICAgICAgJ3BhZGRpbmcnOiAnMCAxZW0nLAogICAgICAgICdib3JkZXInOiAnMXB4IHNvbGlkICNkZGQnLAogICAgICAgICdiYWNrZ3JvdW5kJzogJ3doaXRlJywKICAgICAgICAnYm9yZGVyLXJhZGl1cyc6ICc0cHgnLAogICAgICAgICdib3gtc2l6aW5nJzogJ2JvcmRlci1ib3gnLAogICAgICAgICdmb250LXNpemUnOiAnMTRweCcKICAgIH0pOwogICAgc2VhcmNoRm9ybS5maW5kKCdpbnB1dCcpLnZhbChzZWFyY2hQYXJhbWV0ZXIoKSkuY3NzKCd3aWR0aCcsICdjYWxjKDEwMHZ3IC0gNjQwcHgpJyk7CiAgICBzZWFyY2hGb3JtLmZpbmQoJ2J1dHRvbicpLmNzcyh7CiAgICAgICAgJ21hcmdpbi1sZWZ0JzogJzFlbScsCiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnI2ViZWJlYicsCiAgICAgICAgJ2JvcmRlcic6IDAKICAgIH0pOwogICAgaWYgKCEkKCdpbnB1dC5PcGVuU2VhcmNoQm94SW5wdXQnKS5sZW5ndGgpCiAgICAgICAgJCgiLlVuYXV0aEhlYWRlcl9fcmlnaHRDb250ZW50Q29udGFpbmVyIikuYmVmb3JlKHNlYXJjaEZvcm0pOwp9KTs=","requires":[{"meta":{"name":"jquery-latest.min.js","url":"http://code.jquery.com/jquery-latest.min.js","ts":1566110292117,"mimetype":"text/javascript"},"source":""}]},{"name":"AntiAdware","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http*://*180upload.com/*","http*://*4upfiles.com/*","http*://*get*.adobe.com/*flashplayer/*","http*://*get*.adobe.com/*reader/*","http*://*afterdawn.com/software/*","http*://*akafile.com/akago.php","http*://*chip.de/downloads/*","http*://*clicknupload.com/*","http*://*cloudyvideos.com/*","http*://*coolrom.com/*/*","http*://*clipconverter.cc/download/*","http*://*dailyuploads.net/*","http*://*datafilehost.com/d/*","http*://*davvas.com/*","http*://*d-h.st/*","http*://*download.cnet.com/*","http*://*telecharger.cnet.com/*","http*://*descargar.cnet.com/*","http*://*de.download.cnet.com/*","http*://*filefactory.com/file/*","http*://*filescdn.com/*","http*://*filehippo.com/*download*","http*://*freewarefiles.com/downloads_counter.php*","http*://*google.*/earth/download/ge/agree.html","http*://*hugefiles.net/*","http*://*hulkload.com/*","http*://*kingfiles.net/*","http*://*letitbit.net/download/*","http*://*loveroms.com/*","http*://*up.media1fire.com/*","http*://*mightyupload.com/*","http*://*mp3fil.*/get/*","http*://*mp3juices.to/*","http*://*mp3olimp.net/*","http*://*mp3olimpz.com/*","http*://*opensubtitles.org/*/subtitles/*","http*://*revclouds.com/*","http*://*romhustler.net/download/*","http*://*romhustler.net/rom/*","http*://*secureupload.eu/*","http*://*sendspace.com/file/*","http*://*sharebeast.com/*","http*://*shared.com/*","http*://*softm8.com*","http*://*.softonic.*","http*://*sourceforge.net/*","http*://*tusfiles.net/*","http*://*unlimitzone.com/*","http*://*uploading.com/*","http*://*uploadocean.com/*","http*://*uplod.ws/*","http*://*uploads.to/*","http*://*uptobox.com/*","http*://*userscdn.com/*","http*://*ziddu.com/downloadfile/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1555249425677,"data":{}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/4294-antiadware/code/AntiAdware.user.js","uuid":"914256a8-6b79-426e-a90c-0421a7a5ffe2","source":"","requires":[{"meta":{"name":"jquery-2.0.3.min.js","url":"http://code.jquery.com/jquery-2.0.3.min.js","ts":1566814351231,"mimetype":"text/javascript"},"source":""}]},{"name":"Manga Loader","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://bato.to/reader*","*://mangafox.me/manga/*/*/*","*://mangafox.la/manga/*/*/*","*://fanfox.net/manga/*/*/*","*://readms.net/r/*/*","*://readms.net/read/*/*","*://mangastream.com/r/*/*/*/*","*://mangastream.com/read/*/*/*/*","*://www.mangareader.net/*/*","*://*.mangahere.co/manga/*/*","*://*.mangahere.cc/manga/*/*","*://www.mangapanda.com/*/*","*://mangapark.me/manga/*/*/*","*://mngcow.co/*/*","*://centraldemangas.org/online/*/*","*://*.com.br/leitura/online/capitulo/*","*://www.mangatown.com/manga/*/*","*://manga-joy.com/*/*","*://*.dm5.com/m*","*://*.senmanga.com/*/*","*://www.japscan.com/lecture-en-ligne/*","*://www.pecintakomik.com/manga/*/*","*://mangawall.com/manga/*/*","*://manga.animea.net/*","*://kissmanga.com/Manga/*/*","*://view.thespectrum.net/series/*","*://manhua.dmzj.com/*/*","*://hqbr.com.br/hqs/*/capitulo/*/leitor/0","*://www.dmzj.com/view/*/*","*://mangaindo.id/*/*","*://mangadoom.co/*/*","*://*.mangago.me/read-manga/*/*","*://mangalator.ch/show.php?gallery=*","*://eatmanga.com/Manga-Scan/*/*","*://www.mangacat.me/*/*/*","*://www.mangahen.com/*/*","*://www.readmng.com/*/*","*://mangatraders.biz/read-online/*","*://www.mangainn.net/manga/chapter/*","*://*.kukudm.com/comiclist/*/*","*://www.mangamap.com/*/*","*://www.mangachapter.me/*/*/*.html","*://kawaii.ca/reader/*","*://lonemanga.com/manga/*/*","*://read.egscans.com/om/manga/*/*","*://manga.madokami.al/reader/*","*://read.egscans.com/*","*://imperialscans.com/read/*","*://www.chuixue.com/manhua/*/*","*://www.sh-arab.com/manga/*","*://spinybackmanga.com/*","*://br.mangahost.com/manga/*/*","*://www.manga.ae/*/*/*","*://mangaforall.com/manga/*/*/*","*://hellocomic.com/*/*/*","*://www.3asq.info/*/*","*://*.readcomiconline.to/Comic/*","*://*.moonbunnycafe.com/*","*://*.mangaeden.com/*","*://*.comicastle.org/read-*","*://*.mymh8.com/chapter/*","*://*.unionmangas.net/leitor/*","*://*.otakusmash.com/*/*","*://*.mangahome.com/manga/*/*","*://*.readcomics.tv/*/chapter*","*://*.cartoonmad.com/comic/*","*://*.comicnad.com/comic/*","*://*.ikanman.com/comic/*/*","*://*.manhuagui.com/comic/*/*","*://*.mangasail.com/*","*://*.mangatail.com/*","*://*.titaniascans.com/reader/*/*","*://*.komikstation.com/*/*/*","*://*.gmanga.me/mangas/*/*/*","*://mangadex.org/chapter/*","*://merakiscans.com/*/*","*://biamamscans.com/read/*","*://read.lhtranslation.com/*.html","*://www.930mh.com/manhua/*/*.html*","*://www.mangabox.me/reader/*/episodes/*/","*://twocomic.com/view/comic_*.html?ch=*","*://manga.redhawkscans.com/reader/read/*","*://reader.s2smanga.com/read/*","*://casanovascans.com/read/*","*://reader.vortex-scans.com/read/*","*://reader.roseliascans.com/read/*","*://mangatopia.net/slide/read/*","*://www.twistedhelscans.com/read/*","*://sensescans.com/reader/read/*","*://reader.kireicake.com/read/*","*://substitutescans.com/reader/read/*","*://mangaichiscans.mokkori.fr/fs/read/*","*://reader.shoujosense.com/read/*","*://www.friendshipscans.com/slide/read/*","*://manga.famatg.com/read/*","*://www.demonicscans.com/FoOlSlide/read/*","*://reader.psscans.info/read/*","*://otscans.com/foolslide/read/*","*://necron99scans.com/reader/read/*","*://manga.inpowerz.com/read/*","*://reader.evilflowers.com/read/*","*://reader.cafeconirst.com/read/*","*://kobato.hologfx.com/reader/read/*","*://abandonedkittenscans.mokkori.fr/reader/read/*","*://jaiminisbox.com/reader/read/*","*://*.gomanga.co/reader/read/*","*://reader.manga-download.org/read/*/*","*://*.manga-ar.net/manga/*/*/*","*://*.helveticascans.com/r/read/*","*://reader.thecatscans.com/read/*","*://yonkouprod.com/reader/read/*","*://reader.championscans.com/read/*","*://reader.whiteoutscans.com/read/*","*://hatigarmscans.eu/hs/read/*","*://lector.kirishimafansub.com/lector/read/*","*://hotchocolatescans.com/fs/read/*","*://*.slide.world-three.org/read/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":true,"orig_connects":[]}},"storage":{"ts":1555249534075,"data":{}},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/692-manga-loader/code/Manga%20Loader.user.js","uuid":"0570812b-6aba-4190-a887-cf1221b7a468","source":""},{"name":"fuskator defuskating LoL","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://fuskator.com/expanded/*","https://fuskator.com/thumbs/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1555250111103,"data":{}},"enabled":true,"position":12,"uuid":"375ec362-b647-4ff9-bd6c-e594d6463977","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBmdXNrYXRvciBkZWZ1c2thdGluZyBMb0wKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2Z1c2thdG9yLmNvbS9leHBhbmRlZC8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9mdXNrYXRvci5jb20vdGh1bWJzLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJidG5TaW1pbGFyIikuY2xpY2soKTsKfSkoKTs="},{"name":"wp.pl","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.abczdrowie.pl/*","*://*.autokrata.pl/*","*://*.autokult.pl/*","*://*.biztok.pl/*","*://*.gadzetomania.pl/*","*://*.hotmoney.pl/*","*://*.kafeteria.pl/*","*://*.kafeteria.tv/*","*://*.komediowo.pl/*","*://*.komorkomania.pl/*","*://*.money.pl/*","*://*.money.pl/*","*://*.pudelek.tv/*","*://*.sfora.pl/*","*://*.snobka.pl/*","*://*.wawalove.pl/*","*://*.wp.pl/*","*://*.wp.tv/*","*://*.wrzuta.pl/*","*://*.pudelek.pl/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1559501124876,"data":{}},"enabled":true,"position":13,"file_url":"https://raw.githubusercontent.com/MajkiIT/polish-ads-filter/master/polish-adblock-filters/polish_adblock.user.js","uuid":"60d8b02c-560f-46b5-a020-dc4ea51346f1","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICB3cC5wbAovLyBAdmVyc2lvbiAgICAgIDAuMgovLyBAZGVzY3JpcHRpb24gIFBvemJ5Y2llIHNpw4TihKIgcmVrbGFtIGkga29tdW5pa2F0dSBvIGFkYmxvY2t1IG5hIHN0cm9uYWNoIG5hbGXDhcK8w4TigKZjeWNoIGRvIHdwLnBsCi8vIEBhdXRob3IgICAgICAgRjR6Ci8vIEBtYXRjaCAgICAgICAgKjovLyouYWJjemRyb3dpZS5wbC8qCi8vIEBtYXRjaCAgICAgICAgKjovLyouYXV0b2tyYXRhLnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5hdXRva3VsdC5wbC8qCi8vIEBtYXRjaCAgICAgICAgKjovLyouYml6dG9rLnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5nYWR6ZXRvbWFuaWEucGwvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLmhvdG1vbmV5LnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5rYWZldGVyaWEucGwvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLmthZmV0ZXJpYS50di8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoua29tZWRpb3dvLnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5rb21vcmtvbWFuaWEucGwvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLm1vbmV5LnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5tb25leS5wbC8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoucHVkZWxlay50di8qCi8vIEBtYXRjaCAgICAgICAgKjovLyouc2ZvcmEucGwvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnNub2JrYS5wbC8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoud2F3YWxvdmUucGwvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLndwLnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi53cC50di8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoud3J6dXRhLnBsLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5wdWRlbGVrLnBsLyoKLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1zdGFydAovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gQHVwZGF0ZVVSTCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWFqa2lJVC9wb2xpc2gtYWRzLWZpbHRlci9tYXN0ZXIvcG9saXNoLWFkYmxvY2stZmlsdGVycy9wb2xpc2hfYWRibG9jay51c2VyLmpzCi8vIEBkb3dubG9hZFVSTCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWFqa2lJVC9wb2xpc2gtYWRzLWZpbHRlci9tYXN0ZXIvcG9saXNoLWFkYmxvY2stZmlsdGVycy9wb2xpc2hfYWRibG9jay51c2VyLmpzCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKGIpIHsKICAgIGZ1bmN0aW9uIGEoKSB7CiAgICAgICAgImFkdmVydGlzZW1lbnQiICE9IGFyZ3VtZW50c1swXSAmJiBiLmFwcGx5KHdpbmRvdywgYXJndW1lbnRzKQogICAgfQogICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMod2luZG93LCB7CiAgICAgICAgaGFzU2VudGluZWw6IHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbigpIHt9CiAgICAgICAgfSwKICAgICAgICBhZGRFdmVudExpc3RlbmVyOiB7CiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGEpIHsKICAgICAgICAgICAgICAgIGIgPSBhCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KQp9KSh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcik7Cg=="}]}